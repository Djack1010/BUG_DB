public class WrapClass 
{
    public static java.lang.Number createNumber(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String str, pfx, temp$6, mant, dec, exp, temp$38, temp$41, temp$44, temp$45, temp$50, temp$51, temp$52, temp$53, temp$62, temp$63, numeric, temp$66, temp$72, temp$79, temp$92, temp$98, temp$99;
        java.lang.Number temp$0;
        boolean temp$1, temp$7, temp$33, temp$35, temp$54, allZeros, temp$67, temp$68, temp$69, temp$73, temp$74, temp$81, temp$85, allZeros, temp$103, temp$104, temp$105, temp$107, temp$111;
        java.lang.NumberFormatException temp$2, temp$36, temp$48, nfe, temp$77, nfe, nfe, e, temp$90, nfe, nfe, nfe, nfe;
        java.lang.String[] hex_prefixes, temp$3;
        int pfxLen, temp$4, temp$5, temp$8, temp$9, temp$10, i, temp$11, temp$13, temp$14, temp$15, temp$16, temp$17, hexDigits, temp$18, temp$19, temp$20, temp$22, temp$25, temp$26, decPos, temp$28, expPos, temp$29, temp$30, temp$31, temp$32, numDecimals, temp$34, temp$39, temp$40, temp$42, temp$43, temp$46, temp$47, temp$55, temp$56, temp$57, temp$58, temp$59, temp$60, temp$61, temp$64, temp$65, temp$71, temp$83, temp$88, temp$93, temp$94, temp$95, temp$96, temp$97, temp$109, temp$113;
        char firstSigDigit, temp$12, lastChar, temp$27, temp$70;
        java.math.BigInteger temp$21, temp$76, temp$102;
        java.lang.Long temp$23, temp$75, temp$101;
        java.lang.Integer temp$24, temp$100;
        java.lang.StringBuffer temp$37, temp$49, temp$78, temp$91;
        java.lang.Float f, temp$80, f, temp$106;
        float temp$82, temp$86, temp$108;
        java.lang.Double d, temp$84, d, temp$110;
        double temp$87, temp$112;
        java.math.BigDecimal temp$89, temp$114;

        str := @parameter0: java.lang.String;
        if str == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = null;
        return temp$0;

     label1:
        nop;
        temp$1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(str);
        if temp$1 == 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$2 = new java.lang.NumberFormatException;
        specialinvoke temp$2.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number");
        throw temp$2;

     label3:
        nop;
        temp$3 = newarray (java.lang.String)[6];
        temp$3[0] = "0x";
        temp$3[1] = "0X";
        temp$3[2] = "-0x";
        temp$3[3] = "-0X";
        temp$3[4] = "#";
        temp$3[5] = "-#";
        hex_prefixes = temp$3;
        pfxLen = 0;
        temp$4 = 0;

     label4:
        nop;
        temp$5 = lengthof hex_prefixes;
        if temp$4 >= temp$5 goto label7;

        temp$6 = hex_prefixes[temp$4];
        pfx = temp$6;
        temp$7 = virtualinvoke str.<java.lang.String: boolean startsWith(java.lang.String)>(pfx);
        if temp$7 == 0 goto label6;

        goto label5;

     label5:
        nop;
        temp$8 = pfxLen;
        temp$9 = virtualinvoke pfx.<java.lang.String: int length()>();
        temp$10 = temp$8 + temp$9;
        pfxLen = temp$10;
        goto label7;

     label6:
        nop;
        nop;
        temp$4 = temp$4 + 1;
        goto label4;

     label7:
        nop;
        if pfxLen > 0 goto label8;

        goto label23;

     label8:
        nop;
        firstSigDigit = 0;
        i = pfxLen;

     label9:
        nop;
        temp$11 = virtualinvoke str.<java.lang.String: int length()>();
        if i < temp$11 goto label10;

        goto label14;

     label10:
        nop;
        temp$12 = virtualinvoke str.<java.lang.String: char charAt(int)>(i);
        firstSigDigit = temp$12;
        temp$13 = (int) firstSigDigit;
        if temp$13 == 48 goto label11;

        goto label12;

     label11:
        nop;
        temp$14 = pfxLen;
        temp$15 = temp$14 + 1;
        pfxLen = temp$15;
        goto label13;

     label12:
        nop;
        goto label14;

     label13:
        nop;
        nop;
        temp$16 = i;
        temp$17 = temp$16 + 1;
        i = temp$17;
        goto label9;

     label14:
        nop;
        temp$18 = virtualinvoke str.<java.lang.String: int length()>();
        temp$19 = temp$18 - pfxLen;
        hexDigits = temp$19;
        if hexDigits > 16 goto label17;

        goto label15;

     label15:
        nop;
        if hexDigits == 16 goto label16;

        goto label18;

     label16:
        nop;
        temp$20 = (int) firstSigDigit;
        if temp$20 > 55 goto label17;

        goto label18;

        goto label17;

        goto label18;

     label17:
        nop;
        temp$21 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigInteger createBigInteger(java.lang.String)>(str);
        return temp$21;

     label18:
        nop;
        if hexDigits > 8 goto label21;

        goto label19;

     label19:
        nop;
        if hexDigits == 8 goto label20;

        goto label22;

     label20:
        nop;
        temp$22 = (int) firstSigDigit;
        if temp$22 > 55 goto label21;

        goto label22;

        goto label21;

        goto label22;

     label21:
        nop;
        temp$23 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Long createLong(java.lang.String)>(str);
        return temp$23;

     label22:
        nop;
        temp$24 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer createInteger(java.lang.String)>(str);
        return temp$24;

     label23:
        nop;
        temp$25 = virtualinvoke str.<java.lang.String: int length()>();
        temp$26 = temp$25 - 1;
        temp$27 = virtualinvoke str.<java.lang.String: char charAt(int)>(temp$26);
        lastChar = temp$27;
        temp$28 = virtualinvoke str.<java.lang.String: int indexOf(int)>(46);
        decPos = temp$28;
        temp$29 = virtualinvoke str.<java.lang.String: int indexOf(int)>(101);
        temp$30 = temp$29;
        temp$31 = virtualinvoke str.<java.lang.String: int indexOf(int)>(69);
        temp$32 = temp$30 + temp$31;
        expPos = temp$32 + 1;
        numDecimals = 0;
        if decPos > -1 goto label24;

        goto label36;

     label24:
        nop;
        if expPos > -1 goto label25;

        goto label34;

     label25:
        nop;
        if expPos < decPos goto label27;

        goto label26;

     label26:
        nop;
        temp$33 = 0;
        goto label28;

     label27:
        nop;
        temp$33 = 1;

     label28:
        nop;
        temp$34 = virtualinvoke str.<java.lang.String: int length()>();
        if expPos > temp$34 goto label30;

        goto label29;

     label29:
        nop;
        temp$35 = 0;
        goto label31;

     label30:
        nop;
        temp$35 = 1;

     label31:
        nop;
        if temp$33 != temp$35 goto label32;

        goto label33;

     label32:
        nop;
        temp$36 = new java.lang.NumberFormatException;
        temp$37 = new java.lang.StringBuffer;
        specialinvoke temp$37.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(str);
        virtualinvoke temp$37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" is not a valid number.");
        temp$38 = virtualinvoke temp$37.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$36.<java.lang.NumberFormatException: void <init>(java.lang.String)>(temp$38);
        throw temp$36;

     label33:
        nop;
        temp$39 = decPos;
        temp$40 = temp$39 + 1;
        temp$41 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(temp$40, expPos);
        dec = temp$41;
        goto label35;

     label34:
        nop;
        temp$42 = decPos;
        temp$43 = temp$42 + 1;
        temp$44 = virtualinvoke str.<java.lang.String: java.lang.String substring(int)>(temp$43);
        dec = temp$44;

     label35:
        nop;
        temp$45 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.String getMantissa(java.lang.String,int)>(str, decPos);
        mant = temp$45;
        temp$46 = virtualinvoke dec.<java.lang.String: int length()>();
        numDecimals = temp$46;
        goto label42;

     label36:
        nop;
        if expPos > -1 goto label37;

        goto label40;

     label37:
        nop;
        temp$47 = virtualinvoke str.<java.lang.String: int length()>();
        if expPos > temp$47 goto label38;

        goto label39;

     label38:
        nop;
        temp$48 = new java.lang.NumberFormatException;
        temp$49 = new java.lang.StringBuffer;
        specialinvoke temp$49.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(str);
        virtualinvoke temp$49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" is not a valid number.");
        temp$50 = virtualinvoke temp$49.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$48.<java.lang.NumberFormatException: void <init>(java.lang.String)>(temp$50);
        throw temp$48;

     label39:
        nop;
        temp$51 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.String getMantissa(java.lang.String,int)>(str, expPos);
        mant = temp$51;
        goto label41;

     label40:
        nop;
        temp$52 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.String getMantissa(java.lang.String)>(str);
        mant = temp$52;

     label41:
        nop;
        temp$53 = null;
        dec = temp$53;

     label42:
        nop;
        temp$54 = staticinvoke <java.lang.Character: boolean isDigit(char)>(lastChar);
        if temp$54 == 0 goto label43;

        goto label91;

     label43:
        nop;
        temp$55 = (int) lastChar;
        if temp$55 != 46 goto label44;

        goto label91;

        goto label44;

     label44:
        nop;
        if expPos > -1 goto label45;

        goto label47;

     label45:
        nop;
        temp$56 = virtualinvoke str.<java.lang.String: int length()>();
        temp$57 = temp$56 - 1;
        if expPos < temp$57 goto label46;

        goto label47;

        goto label46;

     label46:
        nop;
        temp$58 = expPos;
        temp$59 = temp$58 + 1;
        temp$60 = virtualinvoke str.<java.lang.String: int length()>();
        temp$61 = temp$60 - 1;
        temp$62 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(temp$59, temp$61);
        exp = temp$62;
        goto label48;

     label47:
        nop;
        temp$63 = null;
        exp = temp$63;

     label48:
        nop;
        temp$64 = virtualinvoke str.<java.lang.String: int length()>();
        temp$65 = temp$64 - 1;
        temp$66 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(0, temp$65);
        numeric = temp$66;
        temp$67 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isAllZeros(java.lang.String)>(mant);
        if temp$67 == 0 goto label50;

        goto label49;

     label49:
        nop;
        temp$68 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isAllZeros(java.lang.String)>(exp);
        if temp$68 == 0 goto label50;

        goto label51;

        goto label51;

     label50:
        nop;
        temp$69 = 0;
        goto label52;

     label51:
        nop;
        temp$69 = 1;

     label52:
        nop;
        allZeros = temp$69;
        goto label90;

     label53:
        nop;

     label54:
        nop;
        if dec == null goto label55;

        goto label64;

     label55:
        nop;
        if exp == null goto label56;

        goto label64;

        goto label56;

     label56:
        nop;
        temp$70 = virtualinvoke numeric.<java.lang.String: char charAt(int)>(0);
        temp$71 = (int) temp$70;
        if temp$71 == 45 goto label57;

        goto label58;

     label57:
        nop;
        temp$72 = virtualinvoke numeric.<java.lang.String: java.lang.String substring(int)>(1);
        temp$73 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isDigits(java.lang.String)>(temp$72);
        if temp$73 == 0 goto label58;

        goto label59;

        goto label59;

     label58:
        nop;
        temp$74 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isDigits(java.lang.String)>(numeric);
        if temp$74 == 0 goto label64;

        goto label59;

        goto label64;

        goto label59;

     label59:
        nop;

     label60:
        nop;
        temp$75 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Long createLong(java.lang.String)>(numeric);

     label61:
        nop;
        return temp$75;

     label62:
        nop;
        nfe := @caughtexception;
        nop;
        goto label63;

     label63:
        nop;
        temp$76 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigInteger createBigInteger(java.lang.String)>(numeric);
        return temp$76;

     label64:
        nop;
        temp$77 = new java.lang.NumberFormatException;
        temp$78 = new java.lang.StringBuffer;
        specialinvoke temp$78.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(str);
        virtualinvoke temp$78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" is not a valid number.");
        temp$79 = virtualinvoke temp$78.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$77.<java.lang.NumberFormatException: void <init>(java.lang.String)>(temp$79);
        throw temp$77;

     label65:
        nop;

     label66:
        nop;

     label67:
        nop;
        temp$80 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Float createFloat(java.lang.String)>(numeric);
        f = temp$80;
        temp$81 = virtualinvoke f.<java.lang.Float: boolean isInfinite()>();
        if temp$81 == 0 goto label68;

        goto label72;

     label68:
        nop;
        temp$82 = virtualinvoke f.<java.lang.Float: float floatValue()>();
        temp$83 = temp$82 cmpg 0.0F;
        if temp$83 != 0 goto label70;

        goto label69;

     label69:
        nop;
        if allZeros == 0 goto label72;

        goto label70;

        goto label72;

        goto label70;

     label70:
        nop;

     label71:
        nop;
        return f;

     label72:
        nop;
        goto label74;

     label73:
        nop;
        nfe := @caughtexception;
        nop;
        goto label74;

     label74:
        nop;

     label75:
        nop;

     label76:
        nop;

     label77:
        nop;
        temp$84 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Double createDouble(java.lang.String)>(numeric);
        d = temp$84;
        temp$85 = virtualinvoke d.<java.lang.Double: boolean isInfinite()>();
        if temp$85 == 0 goto label78;

        goto label82;

     label78:
        nop;
        temp$86 = virtualinvoke d.<java.lang.Double: float floatValue()>();
        temp$87 = (double) temp$86;
        temp$88 = temp$87 cmpg 0.0;
        if temp$88 != 0 goto label80;

        goto label79;

     label79:
        nop;
        if allZeros == 0 goto label82;

        goto label80;

        goto label82;

        goto label80;

     label80:
        nop;

     label81:
        nop;
        return d;

     label82:
        nop;
        goto label84;

     label83:
        nop;
        nfe := @caughtexception;
        nop;
        goto label84;

     label84:
        nop;

     label85:
        nop;
        temp$89 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigDecimal createBigDecimal(java.lang.String)>(numeric);

     label86:
        nop;
        return temp$89;

     label87:
        nop;
        e := @caughtexception;
        nop;
        goto label88;

     label88:
        nop;

     label89:
        nop;
        temp$90 = new java.lang.NumberFormatException;
        temp$91 = new java.lang.StringBuffer;
        specialinvoke temp$91.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(str);
        virtualinvoke temp$91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" is not a valid number.");
        temp$92 = virtualinvoke temp$91.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$90.<java.lang.NumberFormatException: void <init>(java.lang.String)>(temp$92);
        throw temp$90;

     label90:
        nop;
        nop;
        lookupswitch(lastChar)
        {
            case 68: goto label76;
            case 70: goto label66;
            case 76: goto label54;
            case 100: goto label75;
            case 102: goto label65;
            case 108: goto label53;
            default: goto label89;
        };

        nop;

     label91:
        nop;
        if expPos > -1 goto label92;

        goto label94;

     label92:
        nop;
        temp$93 = virtualinvoke str.<java.lang.String: int length()>();
        temp$94 = temp$93 - 1;
        if expPos < temp$94 goto label93;

        goto label94;

        goto label93;

     label93:
        nop;
        temp$95 = expPos;
        temp$96 = temp$95 + 1;
        temp$97 = virtualinvoke str.<java.lang.String: int length()>();
        temp$98 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(temp$96, temp$97);
        exp = temp$98;
        goto label95;

     label94:
        nop;
        temp$99 = null;
        exp = temp$99;

     label95:
        nop;
        if dec == null goto label96;

        goto label106;

     label96:
        nop;
        if exp == null goto label97;

        goto label106;

        goto label97;

     label97:
        nop;

     label98:
        nop;
        temp$100 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer createInteger(java.lang.String)>(str);

     label99:
        nop;
        return temp$100;

     label100:
        nop;
        nfe := @caughtexception;
        nop;
        goto label101;

     label101:
        nop;

     label102:
        nop;
        temp$101 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Long createLong(java.lang.String)>(str);

     label103:
        nop;
        return temp$101;

     label104:
        nop;
        nfe := @caughtexception;
        nop;
        goto label105;

     label105:
        nop;
        temp$102 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigInteger createBigInteger(java.lang.String)>(str);
        return temp$102;

     label106:
        nop;
        temp$103 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isAllZeros(java.lang.String)>(mant);
        if temp$103 == 0 goto label108;

        goto label107;

     label107:
        nop;
        temp$104 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isAllZeros(java.lang.String)>(exp);
        if temp$104 == 0 goto label108;

        goto label109;

        goto label109;

     label108:
        nop;
        temp$105 = 0;
        goto label110;

     label109:
        nop;
        temp$105 = 1;

     label110:
        nop;
        allZeros = temp$105;

     label111:
        nop;
        if numDecimals <= 7 goto label112;

        goto label118;

     label112:
        nop;
        temp$106 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Float createFloat(java.lang.String)>(str);
        f = temp$106;
        temp$107 = virtualinvoke f.<java.lang.Float: boolean isInfinite()>();
        if temp$107 == 0 goto label113;

        goto label117;

     label113:
        nop;
        temp$108 = virtualinvoke f.<java.lang.Float: float floatValue()>();
        temp$109 = temp$108 cmpg 0.0F;
        if temp$109 != 0 goto label115;

        goto label114;

     label114:
        nop;
        if allZeros == 0 goto label117;

        goto label115;

        goto label117;

        goto label115;

     label115:
        nop;

     label116:
        nop;
        return f;

     label117:
        nop;

     label118:
        nop;
        goto label120;

     label119:
        nop;
        nfe := @caughtexception;
        nop;
        goto label120;

     label120:
        nop;

     label121:
        nop;
        if numDecimals <= 16 goto label122;

        goto label128;

     label122:
        nop;
        temp$110 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Double createDouble(java.lang.String)>(str);
        d = temp$110;
        temp$111 = virtualinvoke d.<java.lang.Double: boolean isInfinite()>();
        if temp$111 == 0 goto label123;

        goto label127;

     label123:
        nop;
        temp$112 = virtualinvoke d.<java.lang.Double: double doubleValue()>();
        temp$113 = temp$112 cmpg 0.0;
        if temp$113 != 0 goto label125;

        goto label124;

     label124:
        nop;
        if allZeros == 0 goto label127;

        goto label125;

        goto label127;

        goto label125;

     label125:
        nop;

     label126:
        nop;
        return d;

     label127:
        nop;

     label128:
        nop;
        goto label130;

     label129:
        nop;
        nfe := @caughtexception;
        nop;
        goto label130;

     label130:
        nop;
        temp$114 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigDecimal createBigDecimal(java.lang.String)>(str);
        return temp$114;

        catch java.lang.NumberFormatException from label60 to label61 with label62;
        catch java.lang.NumberFormatException from label67 to label71 with label73;
        catch java.lang.NumberFormatException from label72 to label73 with label73;
        catch java.lang.NumberFormatException from label77 to label81 with label83;
        catch java.lang.NumberFormatException from label82 to label83 with label83;
        catch java.lang.NumberFormatException from label85 to label86 with label87;
        catch java.lang.NumberFormatException from label98 to label99 with label100;
        catch java.lang.NumberFormatException from label102 to label103 with label104;
        catch java.lang.NumberFormatException from label111 to label116 with label119;
        catch java.lang.NumberFormatException from label117 to label119 with label119;
        catch java.lang.NumberFormatException from label121 to label126 with label129;
        catch java.lang.NumberFormatException from label127 to label129 with label129;
    }
}
