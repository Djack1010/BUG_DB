public class WrapClass 
{
    public void appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object)
    {
        org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle this;
        java.lang.StringBuffer buffer, temp$15;
        java.lang.String fieldName, temp$14;
        java.lang.Object value;
        java.lang.Class temp$0, temp$3, temp$4, temp$5, temp$6, temp$9;
        boolean temp$1, temp$2, temp$7, temp$8, temp$10;
        int temp$11, temp$12, temp$13, temp$16, temp$17, temp$18;

        this := @this: org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle;
        buffer := @parameter0: java.lang.StringBuffer;
        fieldName := @parameter1: java.lang.String;
        value := @parameter2: java.lang.Object;
        temp$0 = virtualinvoke value.<java.lang.Object: java.lang.Class getClass()>();
        temp$1 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(temp$0);
        if temp$1 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$2 = 0;
        goto label2;

     label1:
        nop;
        temp$2 = 1;

     label2:
        nop;
        temp$4 = <org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: java.lang.Class class$java$lang$String>;
        if temp$4 != null goto label3;

        temp$5 = staticinvoke <org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: java.lang.Class class$(java.lang.String)>("java.lang.String");
        <org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: java.lang.Class class$java$lang$String> = temp$5;
        temp$3 = temp$5;
        goto label4;

     label3:
        nop;
        temp$3 = <org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: java.lang.Class class$java$lang$String>;

     label4:
        nop;
        temp$6 = virtualinvoke value.<java.lang.Object: java.lang.Class getClass()>();
        temp$7 = virtualinvoke temp$3.<java.lang.Class: boolean equals(java.lang.Object)>(temp$6);
        if temp$7 == 0 goto label6;

        goto label5;

     label5:
        nop;
        temp$8 = 0;
        goto label7;

     label6:
        nop;
        temp$8 = 1;

     label7:
        nop;
        if temp$2 == temp$8 goto label8;

        goto label10;

     label8:
        nop;
        temp$9 = virtualinvoke value.<java.lang.Object: java.lang.Class getClass()>();
        temp$10 = virtualinvoke this.<org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: boolean accept(java.lang.Class)>(temp$9);
        if temp$10 == 0 goto label10;

        goto label9;

        goto label9;

     label9:
        nop;
        temp$11 = this.<org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: int spaces>;
        temp$12 = this.<org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: int indent>;
        temp$13 = temp$11 + temp$12;
        this.<org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: int spaces> = temp$13;
        virtualinvoke this.<org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: void resetIndent()>();
        temp$14 = staticinvoke <org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)>(value, this);
        temp$15 = virtualinvoke buffer.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(temp$14);
        temp$16 = this.<org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: int spaces>;
        temp$17 = this.<org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: int indent>;
        temp$18 = temp$16 - temp$17;
        this.<org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: int spaces> = temp$18;
        virtualinvoke this.<org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle: void resetIndent()>();
        goto label11;

     label10:
        nop;
        specialinvoke this.<org.apache.commons.lang3.builder.RecursiveToStringStyle: void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)>(buffer, fieldName, value);

     label11:
        nop;
        return;
    }
}
