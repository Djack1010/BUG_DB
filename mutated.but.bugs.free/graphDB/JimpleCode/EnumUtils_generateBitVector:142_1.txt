public class WrapClass 
{
    public static long generateBitVector(java.lang.Class, java.lang.Iterable)
    {
        java.lang.Class enumClass, temp$0;
        java.lang.Iterable values;
        long total, temp$6, temp$9, temp$10;
        java.util.Iterator temp$1;
        java.lang.Enum constant;
        boolean temp$2, temp$4;
        java.lang.Object temp$3;
        java.lang.Object[] temp$5;
        int temp$7, temp$8;

        enumClass := @parameter0: java.lang.Class;
        values := @parameter1: java.lang.Iterable;
        temp$0 = staticinvoke <org.apache.commons.lang3.EnumUtils: java.lang.Class checkBitVectorable(java.lang.Class)>(enumClass);
        total = 0L;
        temp$1 = interfaceinvoke values.<java.lang.Iterable: java.util.Iterator iterator()>();

     label0:
        nop;
        temp$2 = interfaceinvoke temp$1.<java.util.Iterator: boolean hasNext()>();
        if temp$2 == 0 goto label4;

        temp$3 = interfaceinvoke temp$1.<java.util.Iterator: java.lang.Object next()>();
        constant = (java.lang.Enum) temp$3;
        if constant != null goto label2;

        goto label1;

     label1:
        nop;
        temp$4 = 0;
        goto label3;

     label2:
        nop;
        temp$4 = 1;

     label3:
        nop;
        temp$5 = newarray (java.lang.Object)[0];
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(temp$4, "null elements not permitted", temp$5);
        temp$6 = total;
        temp$7 = virtualinvoke constant.<java.lang.Enum: int ordinal()>();
        temp$8 = 1 << temp$7;
        temp$9 = (long) temp$8;
        temp$10 = temp$6 | temp$9;
        total = temp$10;
        nop;
        goto label0;

     label4:
        nop;
        return total;
    }
}
