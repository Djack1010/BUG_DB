public class WrapClass 
{
    public static transient java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class 'cls';
        java.lang.Class[] parameterTypes, temp$6, temp$10, temp$11;
        java.lang.reflect.Constructor ctor, temp$0, result, ctor, temp$5, temp$8, constructor;
        boolean temp$1, temp$7, temp$9;
        java.lang.NoSuchMethodException e;
        java.lang.reflect.Constructor[] ctors, temp$2;
        int temp$3, temp$4, temp$12;

        'cls' := @parameter0: java.lang.Class;
        parameterTypes := @parameter1: java.lang.Class[];

     label0:
        nop;
        temp$0 = virtualinvoke 'cls'.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(parameterTypes);
        ctor = temp$0;
        temp$1 = staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: boolean setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>(ctor);

     label1:
        nop;
        return ctor;

     label2:
        nop;
        e := @caughtexception;
        nop;
        goto label3;

     label3:
        nop;
        result = null;
        temp$2 = virtualinvoke 'cls'.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();
        ctors = temp$2;
        temp$3 = 0;

     label4:
        nop;
        temp$4 = lengthof ctors;
        if temp$3 >= temp$4 goto label12;

        temp$5 = ctors[temp$3];
        ctor = temp$5;
        temp$6 = virtualinvoke ctor.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
        temp$7 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(parameterTypes, temp$6, 1);
        if temp$7 == 0 goto label11;

        goto label5;

     label5:
        nop;
        temp$8 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.reflect.Constructor getAccessibleConstructor(java.lang.reflect.Constructor)>(ctor);
        ctor = temp$8;
        if ctor != null goto label6;

        goto label10;

     label6:
        nop;
        temp$9 = staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: boolean setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>(ctor);
        if result == null goto label8;

        goto label7;

     label7:
        nop;
        temp$10 = virtualinvoke ctor.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
        temp$11 = virtualinvoke result.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
        temp$12 = staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: int compareParameterTypes(java.lang.Class[],java.lang.Class[],java.lang.Class[])>(temp$10, temp$11, parameterTypes);
        if temp$12 < 0 goto label8;

        goto label9;

        goto label9;

     label8:
        nop;
        constructor = (java.lang.reflect.Constructor) ctor;
        result = constructor;

     label9:
        nop;

     label10:
        nop;

     label11:
        nop;
        nop;
        temp$3 = temp$3 + 1;
        goto label4;

     label12:
        nop;
        return result;

        catch java.lang.NoSuchMethodException from label0 to label1 with label2;
    }
}
