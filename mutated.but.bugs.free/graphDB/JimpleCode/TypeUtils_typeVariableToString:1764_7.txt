public class WrapClass 
{
    private static final java.lang.String typeVariableToString(java.lang.reflect.TypeVariable)
    {
        java.lang.reflect.TypeVariable v;
        java.lang.StringBuilder buf, temp$0, temp$5, temp$7;
        java.lang.String temp$1, temp$8;
        java.lang.reflect.Type[] bounds, temp$2, temp$6;
        int temp$3, temp$4;

        v := @parameter0: java.lang.reflect.TypeVariable;
        temp$0 = new java.lang.StringBuilder;
        temp$1 = interfaceinvoke v.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
        specialinvoke temp$0.<java.lang.StringBuilder: void <init>(java.lang.String)>(temp$1);
        buf = temp$0;
        temp$2 = interfaceinvoke v.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
        bounds = temp$2;
        temp$3 = lengthof bounds;
        if temp$3 > 0 goto label0;

        goto label2;

     label0:
        nop;
        temp$4 = lengthof bounds;
        if temp$4 == 1 goto label2;

        goto label1;

        goto label1;

     label1:
        nop;
        temp$5 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" extends ");
        temp$6 = interfaceinvoke v.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
        temp$7 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.StringBuilder appendAllTo(java.lang.StringBuilder,java.lang.String,java.lang.reflect.Type[])>(buf, " & ", temp$6);

     label2:
        nop;
        temp$8 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.String toString()>();
        return temp$8;
    }
}
