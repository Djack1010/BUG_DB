public class WrapClass 
{
    public static transient int reflectionHashCode(int, int, java.lang.Object, boolean, java.lang.Class, java.lang.String[])
    {
        int initialNonZeroOddNumber, multiplierNonZeroOddNumber, temp$7;
        java.lang.Object object;
        boolean testTransients, temp$4, temp$5;
        java.lang.Class reflectUpToClass, clazz, temp$2, temp$3, temp$6;
        java.lang.String[] excludeFields;
        java.lang.IllegalArgumentException temp$0;
        org.apache.commons.lang3.builder.HashCodeBuilder builder, temp$1;

        initialNonZeroOddNumber := @parameter0: int;
        multiplierNonZeroOddNumber := @parameter1: int;
        object := @parameter2: java.lang.Object;
        testTransients := @parameter3: boolean;
        reflectUpToClass := @parameter4: java.lang.Class;
        excludeFields := @parameter5: java.lang.String[];
        if object == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = new java.lang.IllegalArgumentException;
        specialinvoke temp$0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The object to build a hash code for must not be null");
        throw temp$0;

     label1:
        nop;
        temp$1 = new org.apache.commons.lang3.builder.HashCodeBuilder;
        specialinvoke temp$1.<org.apache.commons.lang3.builder.HashCodeBuilder: void <init>(int,int)>(initialNonZeroOddNumber, multiplierNonZeroOddNumber);
        builder = temp$1;
        temp$2 = virtualinvoke object.<java.lang.Object: java.lang.Class getClass()>();
        clazz = temp$2;
        staticinvoke <org.apache.commons.lang3.builder.HashCodeBuilder: void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.HashCodeBuilder,boolean,java.lang.String[])>(object, clazz, builder, testTransients, excludeFields);

     label2:
        nop;
        temp$3 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getSuperclass()>();
        if temp$3 != null goto label4;

        goto label3;

     label3:
        nop;
        temp$4 = 0;
        goto label5;

     label4:
        nop;
        temp$4 = 1;

     label5:
        nop;
        if clazz != reflectUpToClass goto label7;

        goto label6;

     label6:
        nop;
        temp$5 = 0;
        goto label8;

     label7:
        nop;
        temp$5 = 1;

     label8:
        nop;
        if temp$4 == temp$5 goto label9;

        goto label10;

     label9:
        nop;
        temp$6 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getSuperclass()>();
        clazz = temp$6;
        staticinvoke <org.apache.commons.lang3.builder.HashCodeBuilder: void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.HashCodeBuilder,boolean,java.lang.String[])>(object, clazz, builder, testTransients, excludeFields);
        goto label2;

     label10:
        nop;
        temp$7 = virtualinvoke builder.<org.apache.commons.lang3.builder.HashCodeBuilder: int toHashCode()>();
        return temp$7;
    }
}
