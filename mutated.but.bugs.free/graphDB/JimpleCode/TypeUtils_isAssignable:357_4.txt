public class WrapClass 
{
    private static final boolean isAssignable(java.lang.reflect.Type, java.lang.Class)
    {
        java.lang.reflect.Type type, bound, temp$17, temp$26;
        java.lang.Class toClass, temp$6, temp$10, temp$20, temp$21, temp$22, temp$27;
        boolean temp$0, temp$1, temp$2, temp$3, temp$4, temp$5, temp$7, temp$8, temp$11, temp$12, temp$18, temp$19, temp$23, temp$24, temp$28, temp$29, temp$30, temp$31;
        java.lang.reflect.ParameterizedType temp$9;
        java.lang.reflect.TypeVariable temp$13;
        java.lang.reflect.Type[] temp$14;
        int temp$15, temp$16;
        java.lang.reflect.GenericArrayType temp$25;
        java.lang.IllegalStateException temp$32;
        java.lang.StringBuffer temp$33;
        java.lang.String temp$34;

        type := @parameter0: java.lang.reflect.Type;
        toClass := @parameter1: java.lang.Class;
        if type == null goto label0;

        goto label5;

     label0:
        nop;
        if toClass == null goto label3;

        goto label1;

     label1:
        nop;
        temp$0 = virtualinvoke toClass.<java.lang.Class: boolean isPrimitive()>();
        if temp$0 == 0 goto label3;

        goto label2;

        goto label2;

     label2:
        nop;
        temp$1 = 0;
        goto label4;

     label3:
        nop;
        temp$1 = 1;

     label4:
        nop;
        return temp$1;

     label5:
        nop;
        if toClass == null goto label6;

        goto label7;

     label6:
        nop;
        temp$2 = 0;
        return temp$2;

     label7:
        nop;
        temp$3 = virtualinvoke toClass.<java.lang.Class: boolean equals(java.lang.Object)>(type);
        if temp$3 == 0 goto label9;

        goto label8;

     label8:
        nop;
        temp$4 = 1;
        return temp$4;

     label9:
        nop;
        temp$5 = type instanceof java.lang.Class;
        if temp$5 == 0 goto label11;

        goto label10;

     label10:
        nop;
        temp$6 = (java.lang.Class) type;
        temp$7 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(temp$6, toClass);
        return temp$7;

     label11:
        nop;
        temp$8 = type instanceof java.lang.reflect.ParameterizedType;
        if temp$8 == 0 goto label13;

        goto label12;

     label12:
        nop;
        temp$9 = (java.lang.reflect.ParameterizedType) type;
        temp$10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(temp$9);
        temp$11 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(temp$10, toClass);
        return temp$11;

     label13:
        nop;
        temp$12 = type instanceof java.lang.reflect.TypeVariable;
        if temp$12 == 0 goto label17;

        goto label14;

     label14:
        nop;
        temp$13 = (java.lang.reflect.TypeVariable) type;
        temp$14 = interfaceinvoke temp$13.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
        temp$15 = 0;

     label15:
        nop;
        temp$16 = lengthof temp$14;
        if temp$15 >= temp$16 goto label16;

        temp$17 = temp$14[temp$15];
        bound = temp$17;
        nop;
        temp$15 = temp$15 + 1;
        goto label15;

     label16:
        nop;
        temp$18 = 0;
        return temp$18;

     label17:
        nop;
        temp$19 = type instanceof java.lang.reflect.GenericArrayType;
        if temp$19 == 0 goto label26;

        goto label18;

     label18:
        nop;
        temp$21 = <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class class$java$lang$Object>;
        if temp$21 != null goto label19;

        temp$22 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class class$(java.lang.String)>("java.lang.Object");
        <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class class$java$lang$Object> = temp$22;
        temp$20 = temp$22;
        goto label20;

     label19:
        nop;
        temp$20 = <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class class$java$lang$Object>;

     label20:
        nop;
        temp$23 = virtualinvoke toClass.<java.lang.Class: boolean equals(java.lang.Object)>(temp$20);
        if temp$23 == 0 goto label21;

        goto label24;

     label21:
        nop;
        temp$24 = virtualinvoke toClass.<java.lang.Class: boolean isArray()>();
        if temp$24 == 0 goto label23;

        goto label22;

     label22:
        nop;
        temp$25 = (java.lang.reflect.GenericArrayType) type;
        temp$26 = interfaceinvoke temp$25.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
        temp$27 = virtualinvoke toClass.<java.lang.Class: java.lang.Class getComponentType()>();
        temp$28 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(temp$26, temp$27);
        if temp$28 == 0 goto label23;

        goto label24;

        goto label24;

        goto label23;

     label23:
        nop;
        temp$29 = 0;
        goto label25;

     label24:
        nop;
        temp$29 = 1;

     label25:
        nop;
        return temp$29;

     label26:
        nop;
        temp$30 = type instanceof java.lang.reflect.WildcardType;
        if temp$30 == 0 goto label28;

        goto label27;

     label27:
        nop;
        temp$31 = 0;
        return temp$31;

     label28:
        nop;
        temp$32 = new java.lang.IllegalStateException;
        temp$33 = new java.lang.StringBuffer;
        specialinvoke temp$33.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("found an unhandled type: ");
        virtualinvoke temp$33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(type);
        temp$34 = virtualinvoke temp$33.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$32.<java.lang.IllegalStateException: void <init>(java.lang.String)>(temp$34);
        throw temp$32;
    }
}
