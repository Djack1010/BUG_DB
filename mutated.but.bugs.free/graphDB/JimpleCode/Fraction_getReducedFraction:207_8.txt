public class WrapClass 
{
    public static final org.apache.commons.lang3.math.Fraction getReducedFraction(int, int)
    {
        int numerator, denominator, temp$1, temp$2, temp$3, temp$4, temp$5, temp$7, temp$8, gcd, temp$9, temp$10, temp$11, temp$12, temp$13;
        java.lang.ArithmeticException temp$0, temp$6;
        org.apache.commons.lang3.math.Fraction temp$14;

        numerator := @parameter0: int;
        denominator := @parameter1: int;
        if denominator == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = new java.lang.ArithmeticException;
        specialinvoke temp$0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The denominator must not be zero");
        throw temp$0;

     label1:
        nop;
        if denominator == -2147483648 goto label2;

        goto label4;

     label2:
        nop;
        temp$1 = numerator & 1;
        if temp$1 == 0 goto label3;

        goto label4;

        goto label3;

     label3:
        nop;
        temp$2 = numerator;
        temp$3 = temp$2 / 2;
        numerator = temp$3;
        temp$4 = denominator;
        temp$5 = temp$4 / 2;
        denominator = temp$5;

     label4:
        nop;
        if denominator < 0 goto label5;

        goto label9;

     label5:
        nop;
        if numerator == -2147483648 goto label7;

        goto label6;

     label6:
        nop;
        if denominator == -2147483648 goto label7;

        goto label8;

        goto label8;

     label7:
        nop;
        temp$6 = new java.lang.ArithmeticException;
        specialinvoke temp$6.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: can\'t negate");
        throw temp$6;

     label8:
        nop;
        temp$7 = neg numerator;
        numerator = temp$7;
        temp$8 = neg denominator;
        denominator = temp$8;

     label9:
        nop;
        temp$9 = staticinvoke <org.apache.commons.lang3.math.Fraction: int greatestCommonDivisor(int,int)>(numerator, denominator);
        gcd = temp$9;
        temp$10 = numerator;
        temp$11 = temp$10 / gcd;
        numerator = temp$11;
        temp$12 = denominator;
        temp$13 = temp$12 / gcd;
        denominator = temp$13;
        temp$14 = new org.apache.commons.lang3.math.Fraction;
        specialinvoke temp$14.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(numerator, denominator);
        return temp$14;
    }
}
