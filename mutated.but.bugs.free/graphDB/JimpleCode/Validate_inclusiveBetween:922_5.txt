public class WrapClass 
{
    public static transient void inclusiveBetween(java.lang.Object, java.lang.Object, java.lang.Comparable, java.lang.String, java.lang.Object[])
    {
        java.lang.Object start, end;
        java.lang.Comparable value;
        java.lang.String message, temp$5;
        java.lang.Object[] values;
        int temp$0, temp$2;
        boolean temp$1, temp$3;
        java.lang.IllegalArgumentException temp$4;

        start := @parameter0: java.lang.Object;
        end := @parameter1: java.lang.Object;
        value := @parameter2: java.lang.Comparable;
        message := @parameter3: java.lang.String;
        values := @parameter4: java.lang.Object[];
        temp$0 = interfaceinvoke value.<java.lang.Comparable: int compareTo(java.lang.Object)>(start);
        if temp$0 < 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = 0;
        goto label2;

     label1:
        nop;
        temp$1 = 1;

     label2:
        nop;
        temp$2 = interfaceinvoke value.<java.lang.Comparable: int compareTo(java.lang.Object)>(end);
        if temp$2 > 0 goto label4;

        goto label3;

     label3:
        nop;
        temp$3 = 0;
        goto label5;

     label4:
        nop;
        temp$3 = 1;

     label5:
        nop;
        if temp$1 != temp$3 goto label6;

        goto label7;

     label6:
        nop;
        temp$4 = new java.lang.IllegalArgumentException;
        temp$5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(message, values);
        specialinvoke temp$4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(temp$5);
        throw temp$4;

     label7:
        nop;
        return;
    }
}
