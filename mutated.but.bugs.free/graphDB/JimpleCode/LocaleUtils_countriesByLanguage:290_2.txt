public class WrapClass 
{
    public static java.util.List countriesByLanguage(java.lang.String)
    {
        java.lang.String languageCode, temp$10, temp$12, temp$14;
        java.util.List temp$0, temp$1, countries, temp$4, locales, temp$6, temp$19, temp$20, temp$23, temp$26;
        java.util.concurrent.ConcurrentMap temp$2, temp$21, temp$24;
        java.lang.Object temp$3, temp$8, temp$22, temp$25;
        java.util.ArrayList temp$5;
        int i, temp$7, temp$13, temp$17, temp$18;
        java.util.Locale locale, temp$9;
        boolean temp$11, temp$15, temp$16;

        languageCode := @parameter0: java.lang.String;
        if languageCode == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
        temp$1 = (java.util.List) temp$0;
        return temp$1;

     label1:
        nop;
        temp$2 = <org.apache.commons.lang3.LocaleUtils: java.util.concurrent.ConcurrentMap cCountriesByLanguage>;
        temp$3 = interfaceinvoke temp$2.<java.util.Map: java.lang.Object get(java.lang.Object)>(languageCode);
        temp$4 = (java.util.List) temp$3;
        countries = temp$4;
        if countries == null goto label2;

        goto label10;

     label2:
        nop;
        temp$5 = new java.util.ArrayList;
        specialinvoke temp$5.<java.util.ArrayList: void <init>()>();
        countries = temp$5;
        temp$6 = staticinvoke <org.apache.commons.lang3.LocaleUtils: java.util.List availableLocaleList()>();
        locales = temp$6;
        i = 0;

     label3:
        nop;
        temp$7 = interfaceinvoke locales.<java.util.List: int size()>();
        if i < temp$7 goto label4;

        goto label9;

     label4:
        nop;
        temp$8 = interfaceinvoke locales.<java.util.List: java.lang.Object get(int)>(i);
        temp$9 = (java.util.Locale) temp$8;
        locale = temp$9;
        temp$10 = virtualinvoke locale.<java.util.Locale: java.lang.String getLanguage()>();
        temp$11 = virtualinvoke languageCode.<java.lang.String: boolean equals(java.lang.Object)>(temp$10);
        if temp$11 == 0 goto label8;

        goto label5;

     label5:
        nop;
        temp$12 = virtualinvoke locale.<java.util.Locale: java.lang.String getCountry()>();
        temp$13 = virtualinvoke temp$12.<java.lang.String: int length()>();
        if temp$13 != -1 goto label6;

        goto label8;

        goto label6;

     label6:
        nop;
        temp$14 = virtualinvoke locale.<java.util.Locale: java.lang.String getVariant()>();
        temp$15 = virtualinvoke temp$14.<java.lang.String: boolean isEmpty()>();
        if temp$15 == 0 goto label8;

        goto label7;

        goto label7;

     label7:
        nop;
        temp$16 = interfaceinvoke countries.<java.util.List: boolean add(java.lang.Object)>(locale);

     label8:
        nop;
        nop;
        temp$17 = i;
        temp$18 = temp$17 + 1;
        i = temp$18;
        goto label3;

     label9:
        nop;
        temp$19 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(countries);
        temp$20 = (java.util.List) temp$19;
        countries = temp$20;
        temp$21 = <org.apache.commons.lang3.LocaleUtils: java.util.concurrent.ConcurrentMap cCountriesByLanguage>;
        temp$22 = interfaceinvoke temp$21.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(languageCode, countries);
        temp$23 = (java.util.List) temp$22;
        temp$24 = <org.apache.commons.lang3.LocaleUtils: java.util.concurrent.ConcurrentMap cCountriesByLanguage>;
        temp$25 = interfaceinvoke temp$24.<java.util.Map: java.lang.Object get(java.lang.Object)>(languageCode);
        temp$26 = (java.util.List) temp$25;
        countries = temp$26;

     label10:
        nop;
        return countries;
    }
}
