public class WrapClass 
{
    private static final java.lang.String[] splitByCharacterType(java.lang.String, boolean)
    {
        java.lang.String str, temp$16, temp$19, temp$24;
        boolean camelCase, temp$1, temp$18, temp$21, temp$27;
        java.lang.String[] temp$0, temp$2, temp$29, temp$31;
        char[] c, temp$3, temp$5, temp$11;
        java.util.List list;
        java.util.ArrayList temp$4;
        int tokenStart, currentType, temp$6, temp$8, pos, temp$9, temp$10, type, temp$12, temp$14, newTokenStart, temp$15, temp$17, temp$20, temp$22, temp$23, temp$25, temp$26, temp$28;
        char temp$7, temp$13;
        java.lang.Object[] temp$30;

        str := @parameter0: java.lang.String;
        camelCase := @parameter1: boolean;
        if str == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = null;
        return temp$0;

     label1:
        nop;
        temp$1 = virtualinvoke str.<java.lang.String: boolean isEmpty()>();
        if temp$1 == 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$2 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
        return temp$2;

     label3:
        nop;
        temp$3 = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
        c = temp$3;
        temp$4 = new java.util.ArrayList;
        specialinvoke temp$4.<java.util.ArrayList: void <init>()>();
        list = temp$4;
        tokenStart = 0;
        temp$5 = c;
        temp$6 = tokenStart;
        temp$7 = temp$5[temp$6];
        temp$8 = staticinvoke <java.lang.Character: int getType(char)>(temp$7);
        currentType = temp$8;
        temp$9 = tokenStart;
        pos = temp$9 + 0;

     label4:
        nop;
        temp$10 = lengthof c;
        if pos < temp$10 goto label5;

        goto label16;

     label5:
        nop;
        temp$11 = c;
        temp$12 = pos;
        temp$13 = temp$11[temp$12];
        temp$14 = staticinvoke <java.lang.Character: int getType(char)>(temp$13);
        type = temp$14;
        if type == currentType goto label6;

        goto label7;

     label6:
        nop;
        goto label15;

     label7:
        nop;
        if camelCase == 0 goto label13;

        goto label8;

     label8:
        nop;
        if type == 2 goto label9;

        goto label13;

        goto label9;

     label9:
        nop;
        if currentType == 1 goto label10;

        goto label13;

        goto label10;

     label10:
        nop;
        temp$15 = pos - 1;
        newTokenStart = temp$15;
        if newTokenStart != tokenStart goto label11;

        goto label12;

     label11:
        nop;
        temp$16 = new java.lang.String;
        temp$17 = newTokenStart - tokenStart;
        specialinvoke temp$16.<java.lang.String: void <init>(char[],int,int)>(c, tokenStart, temp$17);
        temp$18 = interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>(temp$16);
        tokenStart = newTokenStart;

     label12:
        nop;
        goto label14;

     label13:
        nop;
        temp$19 = new java.lang.String;
        temp$20 = pos - tokenStart;
        specialinvoke temp$19.<java.lang.String: void <init>(char[],int,int)>(c, tokenStart, temp$20);
        temp$21 = interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>(temp$19);
        tokenStart = pos;

     label14:
        nop;
        currentType = type;

     label15:
        nop;
        temp$22 = pos;
        temp$23 = temp$22 + 1;
        pos = temp$23;
        goto label4;

     label16:
        nop;
        temp$24 = new java.lang.String;
        temp$25 = lengthof c;
        temp$26 = temp$25 - tokenStart;
        specialinvoke temp$24.<java.lang.String: void <init>(char[],int,int)>(c, tokenStart, temp$26);
        temp$27 = interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>(temp$24);
        temp$28 = interfaceinvoke list.<java.util.List: int size()>();
        temp$29 = newarray (java.lang.String)[temp$28];
        temp$30 = interfaceinvoke list.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(temp$29);
        temp$31 = (java.lang.String[]) temp$30;
        return temp$31;
    }
}
