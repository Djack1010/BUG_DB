public class WrapClass 
{
    public static java.lang.String toString(java.lang.reflect.Type)
    {
        java.lang.reflect.Type type;
        boolean temp$0, temp$3, temp$6, temp$9, temp$12;
        java.lang.Class temp$1;
        java.lang.String temp$2, temp$5, temp$8, temp$11, temp$14, temp$16;
        java.lang.reflect.ParameterizedType temp$4;
        java.lang.reflect.WildcardType temp$7;
        java.lang.reflect.TypeVariable temp$10;
        java.lang.reflect.GenericArrayType temp$13;
        java.lang.IllegalArgumentException temp$15;

        type := @parameter0: java.lang.reflect.Type;
        temp$0 = type instanceof java.lang.Class;
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = (java.lang.Class) type;
        temp$2 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String classToString(java.lang.Class)>(temp$1);
        return temp$2;

     label1:
        nop;
        temp$3 = type instanceof java.lang.reflect.ParameterizedType;
        if temp$3 == 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$4 = (java.lang.reflect.ParameterizedType) type;
        temp$5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String parameterizedTypeToString(java.lang.reflect.ParameterizedType)>(temp$4);
        return temp$5;

     label3:
        nop;
        temp$6 = type instanceof java.lang.reflect.WildcardType;
        if temp$6 == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$7 = (java.lang.reflect.WildcardType) type;
        temp$8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String wildcardTypeToString(java.lang.reflect.WildcardType)>(temp$7);
        return temp$8;

     label5:
        nop;
        temp$9 = type instanceof java.lang.reflect.TypeVariable;
        if temp$9 == 0 goto label7;

        goto label6;

     label6:
        nop;
        temp$10 = (java.lang.reflect.TypeVariable) type;
        temp$11 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String typeVariableToString(java.lang.reflect.TypeVariable)>(temp$10);
        return temp$11;

     label7:
        nop;
        temp$12 = type instanceof java.lang.reflect.GenericArrayType;
        if temp$12 == 0 goto label9;

        goto label8;

     label8:
        nop;
        temp$13 = (java.lang.reflect.GenericArrayType) type;
        temp$14 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String genericArrayTypeToString(java.lang.reflect.GenericArrayType)>(temp$13);
        return temp$14;

     label9:
        nop;
        temp$15 = new java.lang.IllegalArgumentException;
        temp$16 = staticinvoke <org.apache.commons.lang3.ObjectUtils: java.lang.String identityToString(java.lang.Object)>(type);
        specialinvoke temp$15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(temp$16);
        throw temp$15;
    }
}
