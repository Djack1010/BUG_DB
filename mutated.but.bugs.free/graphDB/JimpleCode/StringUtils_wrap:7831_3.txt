public class WrapClass 
{
    public static java.lang.String wrap(java.lang.String, char)
    {
        java.lang.String str, temp$2;
        char wrapWith;
        boolean temp$0;
        java.lang.StringBuffer temp$1;

        str := @parameter0: java.lang.String;
        wrapWith := @parameter1: char;
        temp$0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        return str;

     label1:
        nop;
        temp$1 = new java.lang.StringBuffer;
        specialinvoke temp$1.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(wrapWith);
        virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(str);
        virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(wrapWith);
        temp$2 = virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.String toString()>();
        return temp$2;
    }
}
