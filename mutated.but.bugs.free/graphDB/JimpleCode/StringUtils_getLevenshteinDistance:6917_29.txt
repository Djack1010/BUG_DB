public class WrapClass 
{
    public static int getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        java.lang.CharSequence s, t, tmp;
        int threshold, n, temp$2, m, temp$3, temp$4, temp$5, temp$6, temp$7, temp$8, temp$9, temp$10, boundary, temp$11, temp$12, i, temp$13, temp$14, temp$15, j, temp$16, temp$19, min, temp$20, temp$21, max, temp$22, temp$23, temp$24, temp$25, temp$26, temp$27, temp$29, temp$30, temp$31, i, temp$32, temp$34, temp$35, temp$37, temp$39, temp$40, temp$41, temp$43, temp$44, temp$46, temp$47, temp$48, temp$50, temp$51, temp$52, temp$54, temp$55, temp$56, temp$57, temp$58, temp$59, temp$60, temp$61, temp$62, temp$64, temp$65, temp$67, temp$68, temp$69;
        java.lang.IllegalArgumentException temp$0, temp$1;
        int[] p, d, _d, temp$18, temp$28, temp$36, temp$38, temp$42, temp$45, temp$49, temp$53, temp$63, temp$66;
        char t_j, temp$17, temp$33;

        s := @parameter0: java.lang.CharSequence;
        t := @parameter1: java.lang.CharSequence;
        threshold := @parameter2: int;
        if s == null goto label1;

        goto label0;

     label0:
        nop;
        if t == null goto label1;

        goto label2;

        goto label2;

     label1:
        nop;
        temp$0 = new java.lang.IllegalArgumentException;
        specialinvoke temp$0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Strings must not be null");
        throw temp$0;

     label2:
        nop;
        if threshold < 0 goto label3;

        goto label4;

     label3:
        nop;
        temp$1 = new java.lang.IllegalArgumentException;
        specialinvoke temp$1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Threshold must not be negative");
        throw temp$1;

     label4:
        nop;
        temp$2 = interfaceinvoke s.<java.lang.CharSequence: int length()>();
        n = temp$2;
        temp$3 = interfaceinvoke t.<java.lang.CharSequence: int length()>();
        m = temp$3;
        if n == 0 goto label5;

        goto label9;

     label5:
        nop;
        if m <= threshold goto label6;

        goto label7;

     label6:
        nop;
        temp$4 = m;
        goto label8;

     label7:
        nop;
        temp$4 = -1;

     label8:
        nop;
        return temp$4;

     label9:
        nop;
        if m == 0 goto label10;

        goto label14;

     label10:
        nop;
        if n <= threshold goto label11;

        goto label12;

     label11:
        nop;
        temp$5 = n;
        goto label13;

     label12:
        nop;
        temp$5 = -1;

     label13:
        nop;
        return temp$5;

     label14:
        nop;
        if n > m goto label15;

        goto label16;

     label15:
        nop;
        tmp = s;
        s = t;
        t = tmp;
        n = m;
        temp$6 = interfaceinvoke t.<java.lang.CharSequence: int length()>();
        m = temp$6;

     label16:
        nop;
        temp$7 = n;
        temp$8 = temp$7 + 1;
        p = newarray (int)[temp$8];
        temp$9 = n;
        temp$10 = temp$9 + 1;
        d = newarray (int)[temp$10];
        temp$11 = staticinvoke <java.lang.Math: int min(int,int)>(n, threshold);
        temp$12 = temp$11;
        boundary = temp$12 + 1;
        i = 0;

     label17:
        nop;
        if i < boundary goto label18;

        goto label19;

     label18:
        nop;
        nop;
        temp$13 = i;
        temp$14 = temp$13 + 1;
        i = temp$14;
        goto label17;

     label19:
        nop;
        temp$15 = lengthof p;
        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(p, boundary, temp$15, 2147483647);
        staticinvoke <java.util.Arrays: void fill(int[],int)>(d, 2147483647);
        j = 1;

     label20:
        nop;
        if j <= m goto label21;

        goto label35;

     label21:
        nop;
        temp$16 = j - 1;
        temp$17 = interfaceinvoke t.<java.lang.CharSequence: char charAt(int)>(temp$16);
        t_j = temp$17;
        temp$18 = d;
        temp$19 = 0;
        temp$18[temp$19] = j;
        temp$20 = j - threshold;
        temp$21 = staticinvoke <java.lang.Math: int max(int,int)>(1, temp$20);
        min = temp$21;
        temp$23 = 2147483647 - threshold;
        if j > temp$23 goto label22;

        goto label23;

     label22:
        nop;
        temp$22 = n;
        goto label24;

     label23:
        nop;
        temp$24 = j;
        temp$25 = temp$24 + threshold;
        temp$26 = staticinvoke <java.lang.Math: int min(int,int)>(n, temp$25);
        temp$22 = temp$26;

     label24:
        nop;
        max = temp$22;
        if min > max goto label25;

        goto label26;

     label25:
        nop;
        temp$27 = -1;
        return temp$27;

     label26:
        nop;
        if min > 1 goto label27;

        goto label28;

     label27:
        nop;
        temp$28 = d;
        temp$29 = min - 1;
        temp$30 = temp$29;
        temp$31 = 2147483647;
        temp$28[temp$30] = temp$31;

     label28:
        nop;
        i = min;

     label29:
        nop;
        if i <= max goto label30;

        goto label34;

     label30:
        nop;
        temp$32 = i - 1;
        temp$33 = interfaceinvoke s.<java.lang.CharSequence: char charAt(int)>(temp$32);
        temp$34 = (int) temp$33;
        temp$35 = (int) t_j;
        if temp$34 == temp$35 goto label31;

        goto label32;

     label31:
        nop;
        temp$36 = d;
        temp$37 = i;
        temp$38 = p;
        temp$39 = i - 1;
        temp$40 = temp$39;
        temp$41 = temp$38[temp$40];
        temp$36[temp$37] = temp$41;
        goto label33;

     label32:
        nop;
        temp$42 = d;
        temp$43 = i;
        temp$44 = 1;
        temp$45 = d;
        temp$46 = i - 1;
        temp$47 = temp$46;
        temp$48 = temp$45[temp$47];
        temp$49 = p;
        temp$50 = i;
        temp$51 = temp$49[temp$50];
        temp$52 = staticinvoke <java.lang.Math: int min(int,int)>(temp$48, temp$51);
        temp$53 = p;
        temp$54 = i - 1;
        temp$55 = temp$54;
        temp$56 = temp$53[temp$55];
        temp$57 = staticinvoke <java.lang.Math: int min(int,int)>(temp$52, temp$56);
        temp$58 = temp$44 + temp$57;
        temp$42[temp$43] = temp$58;

     label33:
        nop;
        nop;
        temp$59 = i;
        temp$60 = temp$59 + 1;
        i = temp$60;
        goto label29;

     label34:
        nop;
        _d = p;
        p = d;
        d = _d;
        nop;
        temp$61 = j;
        temp$62 = temp$61 + 1;
        j = temp$62;
        goto label20;

     label35:
        nop;
        temp$63 = p;
        temp$64 = n;
        temp$65 = temp$63[temp$64];
        if temp$65 <= threshold goto label36;

        goto label37;

     label36:
        nop;
        temp$66 = p;
        temp$67 = n;
        temp$68 = temp$66[temp$67];
        return temp$68;

     label37:
        nop;
        temp$69 = -1;
        return temp$69;
    }
}
