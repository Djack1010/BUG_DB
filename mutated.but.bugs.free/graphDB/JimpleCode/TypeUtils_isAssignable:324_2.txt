public class WrapClass 
{
    private static final boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map)
    {
        java.lang.reflect.Type type, toType;
        java.util.Map typeVarAssigns;
        boolean temp$0, temp$1, temp$3, temp$4, temp$6, temp$7, temp$9, temp$10, temp$12, temp$13, temp$15;
        java.lang.Class temp$2;
        java.lang.reflect.ParameterizedType temp$5;
        java.lang.reflect.GenericArrayType temp$8;
        java.lang.reflect.WildcardType temp$11;
        java.lang.reflect.TypeVariable temp$14;
        java.lang.IllegalStateException temp$16;
        java.lang.StringBuffer temp$17;
        java.lang.String temp$18;

        type := @parameter0: java.lang.reflect.Type;
        toType := @parameter1: java.lang.reflect.Type;
        typeVarAssigns := @parameter2: java.util.Map;
        if toType == null goto label1;

        goto label0;

     label0:
        nop;
        temp$0 = 0;
        goto label2;

     label1:
        nop;
        temp$0 = 1;

     label2:
        nop;
        temp$1 = toType instanceof java.lang.Class;
        if temp$0 != temp$1 goto label3;

        goto label4;

     label3:
        nop;
        temp$2 = (java.lang.Class) toType;
        temp$3 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(type, temp$2);
        return temp$3;

     label4:
        nop;
        temp$4 = toType instanceof java.lang.reflect.ParameterizedType;
        if temp$4 == 0 goto label6;

        goto label5;

     label5:
        nop;
        temp$5 = (java.lang.reflect.ParameterizedType) toType;
        temp$6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)>(type, temp$5, typeVarAssigns);
        return temp$6;

     label6:
        nop;
        temp$7 = toType instanceof java.lang.reflect.GenericArrayType;
        if temp$7 == 0 goto label8;

        goto label7;

     label7:
        nop;
        temp$8 = (java.lang.reflect.GenericArrayType) toType;
        temp$9 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.GenericArrayType,java.util.Map)>(type, temp$8, typeVarAssigns);
        return temp$9;

     label8:
        nop;
        temp$10 = toType instanceof java.lang.reflect.WildcardType;
        if temp$10 == 0 goto label10;

        goto label9;

     label9:
        nop;
        temp$11 = (java.lang.reflect.WildcardType) toType;
        temp$12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.WildcardType,java.util.Map)>(type, temp$11, typeVarAssigns);
        return temp$12;

     label10:
        nop;
        temp$13 = toType instanceof java.lang.reflect.TypeVariable;
        if temp$13 == 0 goto label12;

        goto label11;

     label11:
        nop;
        temp$14 = (java.lang.reflect.TypeVariable) toType;
        temp$15 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.util.Map)>(type, temp$14, typeVarAssigns);
        return temp$15;

     label12:
        nop;
        temp$16 = new java.lang.IllegalStateException;
        temp$17 = new java.lang.StringBuffer;
        specialinvoke temp$17.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("found an unhandled type: ");
        virtualinvoke temp$17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(toType);
        temp$18 = virtualinvoke temp$17.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$16.<java.lang.IllegalStateException: void <init>(java.lang.String)>(temp$18);
        throw temp$16;
    }
}
