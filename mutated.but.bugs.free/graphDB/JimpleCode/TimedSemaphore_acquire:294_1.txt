public class WrapClass 
{
    public synchronized void acquire() throws java.lang.InterruptedException
    {
        org.apache.commons.lang3.concurrent.TimedSemaphore this;
        boolean temp$0, canPass, temp$5, temp$8, temp$9;
        java.lang.IllegalStateException temp$1;
        java.util.concurrent.ScheduledFuture temp$2, temp$3;
        int temp$4, temp$6, temp$7, temp$10, temp$11;

        this := @this: org.apache.commons.lang3.concurrent.TimedSemaphore;
        temp$0 = virtualinvoke this.<org.apache.commons.lang3.concurrent.TimedSemaphore: boolean isShutdown()>();
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = new java.lang.IllegalStateException;
        specialinvoke temp$1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("TimedSemaphore is shut down!");
        throw temp$1;

     label1:
        nop;
        temp$2 = this.<org.apache.commons.lang3.concurrent.TimedSemaphore: java.util.concurrent.ScheduledFuture task>;
        if temp$2 == null goto label2;

        goto label3;

     label2:
        nop;
        temp$3 = virtualinvoke this.<org.apache.commons.lang3.concurrent.TimedSemaphore: java.util.concurrent.ScheduledFuture startTimer()>();
        this.<org.apache.commons.lang3.concurrent.TimedSemaphore: java.util.concurrent.ScheduledFuture task> = temp$3;

     label3:
        nop;
        canPass = 0;

     label4:
        nop;
        temp$4 = virtualinvoke this.<org.apache.commons.lang3.concurrent.TimedSemaphore: int getLimit()>();
        if temp$4 <= 0 goto label6;

        goto label5;

     label5:
        nop;
        temp$5 = 0;
        goto label7;

     label6:
        nop;
        temp$5 = 1;

     label7:
        nop;
        temp$6 = virtualinvoke this.<org.apache.commons.lang3.concurrent.TimedSemaphore: int getLimit()>();
        temp$7 = this.<org.apache.commons.lang3.concurrent.TimedSemaphore: int acquireCount>;
        if temp$7 < temp$6 goto label9;

        goto label8;

     label8:
        nop;
        temp$8 = 0;
        goto label10;

     label9:
        nop;
        temp$8 = 1;

     label10:
        nop;
        if temp$5 != temp$8 goto label12;

        goto label11;

     label11:
        nop;
        temp$9 = 0;
        goto label13;

     label12:
        nop;
        temp$9 = 1;

     label13:
        nop;
        canPass = temp$9;
        if canPass == 0 goto label14;

        goto label15;

     label14:
        nop;
        virtualinvoke this.<org.apache.commons.lang3.concurrent.TimedSemaphore: void wait()>();
        goto label16;

     label15:
        nop;
        temp$10 = this.<org.apache.commons.lang3.concurrent.TimedSemaphore: int acquireCount>;
        temp$11 = temp$10 + 1;
        this.<org.apache.commons.lang3.concurrent.TimedSemaphore: int acquireCount> = temp$11;

     label16:
        nop;
        nop;
        if canPass == 0 goto label4;

        goto label17;

     label17:
        nop;
        return;
    }
}
