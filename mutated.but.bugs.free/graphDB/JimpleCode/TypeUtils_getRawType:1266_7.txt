public class WrapClass 
{
    public static java.lang.Class getRawType(java.lang.reflect.Type, java.lang.reflect.Type)
    {
        java.lang.reflect.Type type, assigningType, typeArgument, temp$15, temp$20;
        boolean temp$0, temp$2, temp$5, temp$9, temp$18, temp$24;
        java.lang.Class temp$1, temp$4, temp$6, temp$10, temp$11, temp$13, temp$16, temp$17, rawComponentType, temp$21, temp$23, temp$25;
        java.lang.reflect.ParameterizedType temp$3;
        java.lang.Object genericDeclaration, temp$14, temp$22;
        java.lang.reflect.TypeVariable temp$7;
        java.lang.reflect.GenericDeclaration temp$8;
        java.util.Map typeVarAssigns, temp$12;
        java.lang.reflect.GenericArrayType temp$19;
        java.lang.IllegalArgumentException temp$26;
        java.lang.StringBuffer temp$27;
        java.lang.String temp$28;

        type := @parameter0: java.lang.reflect.Type;
        assigningType := @parameter1: java.lang.reflect.Type;
        temp$0 = type instanceof java.lang.Class;
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = (java.lang.Class) type;
        return temp$1;

     label1:
        nop;
        temp$2 = type instanceof java.lang.reflect.ParameterizedType;
        if temp$2 == 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$3 = (java.lang.reflect.ParameterizedType) type;
        temp$4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(temp$3);
        return temp$4;

     label3:
        nop;
        temp$5 = type instanceof java.lang.reflect.TypeVariable;
        if temp$5 == 0 goto label13;

        goto label4;

     label4:
        nop;
        if assigningType == null goto label5;

        goto label6;

     label5:
        nop;
        temp$6 = null;
        return temp$6;

     label6:
        nop;
        temp$7 = (java.lang.reflect.TypeVariable) type;
        temp$8 = interfaceinvoke temp$7.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();
        genericDeclaration = temp$8;
        temp$9 = genericDeclaration instanceof java.lang.Class;
        if temp$9 == 0 goto label7;

        goto label8;

     label7:
        nop;
        temp$10 = null;
        return temp$10;

     label8:
        nop;
        temp$11 = (java.lang.Class) genericDeclaration;
        temp$12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)>(assigningType, temp$11);
        typeVarAssigns = temp$12;
        if typeVarAssigns == null goto label9;

        goto label10;

     label9:
        nop;
        temp$13 = null;
        return temp$13;

     label10:
        nop;
        temp$14 = interfaceinvoke typeVarAssigns.<java.util.Map: java.lang.Object get(java.lang.Object)>(type);
        temp$15 = (java.lang.reflect.Type) temp$14;
        typeArgument = temp$15;
        if typeArgument == null goto label11;

        goto label12;

     label11:
        nop;
        temp$16 = null;
        return temp$16;

     label12:
        nop;
        temp$17 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>(typeArgument, assigningType);
        return temp$17;

     label13:
        nop;
        temp$18 = type instanceof java.lang.reflect.GenericArrayType;
        if temp$18 == 0 goto label15;

        goto label14;

     label14:
        nop;
        temp$19 = (java.lang.reflect.GenericArrayType) type;
        temp$20 = interfaceinvoke temp$19.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
        temp$21 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>(temp$20, assigningType);
        rawComponentType = temp$21;
        temp$22 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(rawComponentType, 1);
        temp$23 = virtualinvoke temp$22.<java.lang.Object: java.lang.Class getClass()>();
        return temp$23;

     label15:
        nop;
        temp$24 = type instanceof java.lang.reflect.WildcardType;
        if temp$24 == 0 goto label17;

        goto label16;

     label16:
        nop;
        temp$25 = null;
        return temp$25;

     label17:
        nop;
        temp$26 = new java.lang.IllegalArgumentException;
        temp$27 = new java.lang.StringBuffer;
        specialinvoke temp$27.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("unknown type: ");
        virtualinvoke temp$27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(type);
        temp$28 = virtualinvoke temp$27.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(temp$28);
        throw temp$26;
    }
}
