public class WrapClass 
{
    private static final boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map)
    {
        java.lang.reflect.Type type, toTypeArg, temp$13, fromTypeArg, temp$14;
        java.lang.reflect.ParameterizedType toParameterizedType;
        java.util.Map typeVarAssigns, fromTypeVarAssigns, temp$3, toTypeVarAssigns, temp$7;
        boolean temp$0, temp$1, temp$4, temp$5, temp$6, temp$11, temp$15, temp$16, temp$17, temp$18, temp$19;
        java.lang.Class toClass, temp$2;
        java.util.Set temp$8, temp$9;
        java.util.Iterator temp$10;
        java.lang.reflect.TypeVariable var;
        java.lang.Object temp$12;

        type := @parameter0: java.lang.reflect.Type;
        toParameterizedType := @parameter1: java.lang.reflect.ParameterizedType;
        typeVarAssigns := @parameter2: java.util.Map;
        if type == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = 1;
        return temp$0;

     label1:
        nop;
        if toParameterizedType == null goto label2;

        goto label3;

     label2:
        nop;
        temp$1 = 0;
        return temp$1;

     label3:
        nop;
        temp$2 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(toParameterizedType);
        toClass = temp$2;
        temp$3 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)>(type, toClass, null);
        fromTypeVarAssigns = temp$3;
        if fromTypeVarAssigns == null goto label4;

        goto label5;

     label4:
        nop;
        temp$4 = 0;
        return temp$4;

     label5:
        nop;
        temp$5 = interfaceinvoke fromTypeVarAssigns.<java.util.Map: boolean isEmpty()>();
        if temp$5 == 0 goto label7;

        goto label6;

     label6:
        nop;
        temp$6 = 1;
        return temp$6;

     label7:
        nop;
        temp$7 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)>(toParameterizedType, toClass, typeVarAssigns);
        toTypeVarAssigns = temp$7;
        temp$8 = interfaceinvoke toTypeVarAssigns.<java.util.Map: java.util.Set keySet()>();
        temp$9 = (java.util.Set) temp$8;
        temp$10 = interfaceinvoke temp$9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label8:
        nop;
        temp$11 = interfaceinvoke temp$10.<java.util.Iterator: boolean hasNext()>();
        if temp$11 == 0 goto label14;

        temp$12 = interfaceinvoke temp$10.<java.util.Iterator: java.lang.Object next()>();
        var = (java.lang.reflect.TypeVariable) temp$12;
        temp$13 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)>(var, toTypeVarAssigns);
        toTypeArg = temp$13;
        temp$14 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)>(var, fromTypeVarAssigns);
        fromTypeArg = temp$14;
        if fromTypeArg != null goto label9;

        goto label13;

     label9:
        nop;
        temp$15 = interfaceinvoke toTypeArg.<java.lang.reflect.Type: boolean equals(java.lang.Object)>(fromTypeArg);
        if temp$15 == 0 goto label10;

        goto label13;

        goto label10;

     label10:
        nop;
        temp$16 = toTypeArg instanceof java.lang.reflect.WildcardType;
        if temp$16 == 0 goto label12;

        goto label11;

     label11:
        nop;
        temp$17 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(fromTypeArg, toTypeArg, typeVarAssigns);
        if temp$17 == 0 goto label12;

        goto label13;

        goto label13;

        goto label12;

     label12:
        nop;
        temp$18 = 0;
        return temp$18;

     label13:
        nop;
        nop;
        goto label8;

     label14:
        nop;
        temp$19 = 1;
        return temp$19;
    }
}
