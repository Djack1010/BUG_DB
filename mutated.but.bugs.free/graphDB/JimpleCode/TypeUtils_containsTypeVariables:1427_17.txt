public class WrapClass 
{
    public static boolean containsTypeVariables(java.lang.reflect.Type)
    {
        java.lang.reflect.Type type, arg, temp$12, temp$20, temp$25;
        boolean temp$0, temp$1, temp$6, temp$7, temp$13, temp$14, temp$15, temp$16, temp$21, temp$26, temp$27, temp$28;
        java.lang.Class temp$2;
        java.lang.reflect.TypeVariable[] temp$3, temp$4;
        int temp$5, temp$10, temp$11, temp$19, temp$24;
        java.lang.reflect.ParameterizedType temp$8;
        java.lang.reflect.Type[] temp$9, temp$17, temp$18, temp$22, temp$23;
        java.lang.reflect.WildcardType wild;

        type := @parameter0: java.lang.reflect.Type;
        temp$0 = type instanceof java.lang.reflect.TypeVariable;
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;

     label1:
        nop;
        temp$1 = type instanceof java.lang.Class;
        if temp$1 == 0 goto label6;

        goto label2;

     label2:
        nop;
        temp$2 = (java.lang.Class) type;
        temp$3 = virtualinvoke temp$2.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
        temp$4 = (java.lang.reflect.TypeVariable[]) temp$3;
        temp$5 = lengthof temp$4;
        if temp$5 > 0 goto label4;

        goto label3;

     label3:
        nop;
        temp$6 = 0;
        goto label5;

     label4:
        nop;
        temp$6 = 1;

     label5:
        nop;
        return temp$6;

     label6:
        nop;
        temp$7 = type instanceof java.lang.reflect.ParameterizedType;
        if temp$7 == 0 goto label12;

        goto label7;

     label7:
        nop;
        temp$8 = (java.lang.reflect.ParameterizedType) type;
        temp$9 = interfaceinvoke temp$8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
        temp$10 = 0;

     label8:
        nop;
        temp$11 = lengthof temp$9;
        if temp$10 >= temp$11 goto label11;

        temp$12 = temp$9[temp$10];
        arg = temp$12;
        temp$13 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean containsTypeVariables(java.lang.reflect.Type)>(arg);
        if temp$13 == 0 goto label10;

        goto label9;

     label9:
        nop;
        temp$14 = 1;
        return temp$14;

     label10:
        nop;
        nop;
        temp$10 = temp$10 + 1;
        goto label8;

     label11:
        nop;
        temp$15 = 0;
        return temp$15;

     label12:
        nop;
        temp$16 = type instanceof java.lang.reflect.WildcardType;
        if temp$16 == 0 goto label18;

        goto label13;

     label13:
        nop;
        wild = (java.lang.reflect.WildcardType) type;
        temp$17 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitLowerBounds(java.lang.reflect.WildcardType)>(wild);
        temp$18 = temp$17;
        temp$19 = 0;
        temp$20 = temp$18[temp$19];
        temp$21 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean containsTypeVariables(java.lang.reflect.Type)>(temp$20);
        if temp$21 == 0 goto label14;

        goto label16;

     label14:
        nop;
        temp$22 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)>(wild);
        temp$23 = temp$22;
        temp$24 = 0;
        temp$25 = temp$23[temp$24];
        temp$26 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean containsTypeVariables(java.lang.reflect.Type)>(temp$25);
        if temp$26 == 0 goto label15;

        goto label16;

        goto label15;

     label15:
        nop;
        temp$27 = 0;
        goto label17;

     label16:
        nop;
        temp$27 = 1;

     label17:
        nop;
        return temp$27;

     label18:
        nop;
        temp$28 = 0;
        return temp$28;
    }
}
