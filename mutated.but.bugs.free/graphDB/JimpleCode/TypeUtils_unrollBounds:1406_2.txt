public class WrapClass 
{
    private static final java.lang.reflect.Type[] unrollBounds(java.util.Map, java.lang.reflect.Type[])
    {
        java.util.Map typeArguments;
        java.lang.reflect.Type[] bounds, result, temp$1, temp$5;
        int i, temp$0, temp$2, temp$6, temp$7, temp$8;
        java.lang.reflect.Type unrolled, temp$3, temp$4;

        typeArguments := @parameter0: java.util.Map;
        bounds := @parameter1: java.lang.reflect.Type[];
        result = bounds;
        i = 0;

     label0:
        nop;
        temp$0 = lengthof result;
        if i < temp$0 goto label1;

        goto label5;

     label1:
        nop;
        temp$1 = result;
        temp$2 = i;
        temp$3 = temp$1[temp$2];
        temp$4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)>(typeArguments, temp$3);
        unrolled = temp$4;
        if unrolled == null goto label2;

        goto label3;

     label2:
        nop;
        goto label4;

     label3:
        nop;
        temp$5 = result;
        temp$6 = i;
        temp$5[temp$6] = unrolled;

     label4:
        nop;
        nop;
        temp$7 = i;
        temp$8 = temp$7 + 1;
        i = temp$8;
        goto label0;

     label5:
        nop;
        return result;
    }
}
