public class WrapClass 
{
    public static java.lang.reflect.Type[] normalizeUpperBounds(java.lang.reflect.Type[])
    {
        java.lang.reflect.Type[] bounds, temp$2, temp$15, temp$17;
        java.lang.Object[] temp$0, temp$16;
        java.lang.Object temp$1;
        java.util.Set types;
        java.util.HashSet temp$3;
        int temp$4, temp$5, temp$6, temp$8, temp$9, temp$14;
        java.lang.reflect.Type type1, temp$7, type2, temp$10;
        boolean subtypeFound, temp$11, temp$12, temp$13;

        bounds := @parameter0: java.lang.reflect.Type[];
        temp$0 = newarray (java.lang.Object)[0];
        temp$1 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(bounds, "null value specified for bounds array", temp$0);
        temp$2 = (java.lang.reflect.Type[]) temp$1;
        temp$3 = new java.util.HashSet;
        temp$4 = lengthof bounds;
        specialinvoke temp$3.<java.util.HashSet: void <init>(int)>(temp$4);
        types = temp$3;
        temp$5 = 0;

     label0:
        nop;
        temp$6 = lengthof bounds;
        if temp$5 >= temp$6 goto label8;

        temp$7 = bounds[temp$5];
        type1 = temp$7;
        subtypeFound = 0;
        temp$8 = 0;

     label1:
        nop;
        temp$9 = lengthof bounds;
        if temp$8 >= temp$9 goto label5;

        temp$10 = bounds[temp$8];
        type2 = temp$10;
        if type1 != type2 goto label2;

        goto label4;

     label2:
        nop;
        temp$11 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(type2, type1, null);
        if temp$11 == 0 goto label4;

        goto label3;

        goto label3;

     label3:
        nop;
        temp$12 = 1;
        subtypeFound = temp$12;
        goto label5;

     label4:
        nop;
        nop;
        temp$8 = temp$8 + 1;
        goto label1;

     label5:
        nop;
        if subtypeFound == 0 goto label6;

        goto label7;

     label6:
        nop;
        temp$13 = interfaceinvoke types.<java.util.Set: boolean add(java.lang.Object)>(type1);

     label7:
        nop;
        nop;
        temp$5 = temp$5 + 1;
        goto label0;

     label8:
        nop;
        temp$14 = interfaceinvoke types.<java.util.Set: int size()>();
        temp$15 = newarray (java.lang.reflect.Type)[temp$14];
        temp$16 = interfaceinvoke types.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(temp$15);
        temp$17 = (java.lang.reflect.Type[]) temp$16;
        return temp$17;
    }
}
