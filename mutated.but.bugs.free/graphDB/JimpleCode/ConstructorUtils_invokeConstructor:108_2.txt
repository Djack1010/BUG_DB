public class WrapClass 
{
    public static java.lang.Object invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException
    {
        java.lang.Class 'cls';
        java.lang.Object[] args, temp$0;
        java.lang.Class[] parameterTypes, temp$1;
        java.lang.reflect.Constructor ctor, temp$2;
        java.lang.Object temp$3;

        'cls' := @parameter0: java.lang.Class;
        args := @parameter1: java.lang.Object[];
        parameterTypes := @parameter2: java.lang.Class[];
        temp$0 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] nullToEmpty(java.lang.Object[])>(args);
        args = temp$0;
        temp$1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] nullToEmpty(java.lang.Class[])>(parameterTypes);
        parameterTypes = temp$1;
        temp$2 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class,java.lang.Class[])>('cls', parameterTypes);
        ctor = temp$2;
        temp$3 = virtualinvoke ctor.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(args);
        return temp$3;
    }
}
