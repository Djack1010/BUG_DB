public class WrapClass 
{
    public static final org.apache.commons.lang3.math.Fraction getFraction(int, int, int)
    {
        int whole, numerator, denominator, temp$14, temp$15, temp$18;
        java.lang.ArithmeticException temp$0, temp$1, temp$2, temp$16;
        long numeratorValue, temp$3, temp$4, temp$5, temp$6, temp$7, temp$8, temp$9, temp$10, temp$11, temp$12, temp$13;
        org.apache.commons.lang3.math.Fraction temp$17;

        whole := @parameter0: int;
        numerator := @parameter1: int;
        denominator := @parameter2: int;
        if denominator == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = new java.lang.ArithmeticException;
        specialinvoke temp$0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The denominator must not be zero");
        throw temp$0;

     label1:
        nop;
        if denominator < 1 goto label2;

        goto label3;

     label2:
        nop;
        temp$1 = new java.lang.ArithmeticException;
        specialinvoke temp$1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The denominator must not be negative");
        throw temp$1;

     label3:
        nop;
        if numerator < 0 goto label4;

        goto label5;

     label4:
        nop;
        temp$2 = new java.lang.ArithmeticException;
        specialinvoke temp$2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The numerator must not be negative");
        throw temp$2;

     label5:
        nop;
        if whole < 0 goto label6;

        goto label7;

     label6:
        nop;
        temp$3 = (long) whole;
        temp$4 = (long) denominator;
        temp$5 = temp$3 * temp$4;
        temp$6 = (long) numerator;
        temp$7 = temp$5 - temp$6;
        numeratorValue = temp$7;
        goto label8;

     label7:
        nop;
        temp$8 = (long) whole;
        temp$9 = (long) denominator;
        temp$10 = temp$8 * temp$9;
        temp$11 = temp$10;
        temp$12 = (long) numerator;
        temp$13 = temp$11 + temp$12;
        numeratorValue = temp$13;

     label8:
        nop;
        temp$14 = numeratorValue cmp -2147483648L;
        if temp$14 >= 0 goto label9;

        goto label10;

     label9:
        nop;
        temp$15 = numeratorValue cmp 2147483647L;
        if temp$15 <= 0 goto label11;

        goto label10;

        goto label11;

     label10:
        nop;
        temp$16 = new java.lang.ArithmeticException;
        specialinvoke temp$16.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Numerator too large to represent as an Integer.");
        throw temp$16;

     label11:
        nop;
        temp$17 = new org.apache.commons.lang3.math.Fraction;
        temp$18 = (int) numeratorValue;
        specialinvoke temp$17.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(temp$18, denominator);
        return temp$17;
    }
}
