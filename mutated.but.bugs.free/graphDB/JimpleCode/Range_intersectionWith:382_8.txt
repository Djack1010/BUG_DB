public class WrapClass 
{
    public final org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)
    {
        org.apache.commons.lang3.Range this, other, temp$12;
        boolean temp$0, temp$4;
        java.lang.IllegalArgumentException temp$1;
        java.lang.Object[] temp$2;
        java.lang.String temp$3;
        java.lang.Object min, temp$5, temp$7, temp$8, max, temp$10;
        java.util.Comparator temp$6, temp$11;
        int temp$9;

        this := @this: org.apache.commons.lang3.Range;
        other := @parameter0: org.apache.commons.lang3.Range;
        temp$0 = virtualinvoke this.<org.apache.commons.lang3.Range: boolean isOverlappedBy(org.apache.commons.lang3.Range)>(other);
        if temp$0 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = new java.lang.IllegalArgumentException;
        temp$2 = newarray (java.lang.Object)[1];
        temp$2[0] = other;
        temp$3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot calculate intersection with non-overlapping range %s", temp$2);
        specialinvoke temp$1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(temp$3);
        throw temp$1;

     label1:
        nop;
        temp$4 = virtualinvoke this.<org.apache.commons.lang3.Range: boolean equals(java.lang.Object)>(other);
        if temp$4 == 0 goto label3;

        goto label2;

     label2:
        nop;
        return this;

     label3:
        nop;
        temp$6 = virtualinvoke this.<org.apache.commons.lang3.Range: java.util.Comparator getComparator()>();
        temp$7 = this.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
        temp$8 = other.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
        temp$9 = interfaceinvoke temp$6.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(temp$7, temp$8);
        if temp$9 < 0 goto label4;

        goto label5;

     label4:
        nop;
        temp$5 = other.<org.apache.commons.lang3.Range: java.lang.Object minimum>;
        goto label6;

     label5:
        nop;
        temp$5 = this.<org.apache.commons.lang3.Range: java.lang.Object minimum>;

     label6:
        nop;
        min = temp$5;
        goto label7;

     label7:
        nop;
        temp$10 = other.<org.apache.commons.lang3.Range: java.lang.Object maximum>;
        nop;
        max = temp$10;
        temp$11 = virtualinvoke this.<org.apache.commons.lang3.Range: java.util.Comparator getComparator()>();
        temp$12 = staticinvoke <org.apache.commons.lang3.Range: org.apache.commons.lang3.Range between(java.lang.Object,java.lang.Object,java.util.Comparator)>(min, max, temp$11);
        return temp$12;
    }
}
