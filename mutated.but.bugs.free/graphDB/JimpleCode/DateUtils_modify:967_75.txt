public class WrapClass 
{
    private static final void modify(java.util.Calendar, int, org.apache.commons.lang3.time.DateUtils$ModifyType)
    {
        java.util.Calendar val;
        int field, temp$0, millisecs, temp$4, seconds, temp$9, minutes, temp$15, temp$21, temp$23, temp$24, temp$26, element, temp$27, temp$28, temp$33, temp$34, temp$36, temp$37, offset, temp$39, temp$40, temp$41, temp$42, temp$43, temp$44, temp$48, temp$49, temp$50, temp$51, temp$52, min, temp$56, temp$57, temp$58, max, temp$60, temp$61, temp$62, temp$64, temp$65, temp$66, temp$67, temp$68, temp$69, temp$72, temp$73, temp$75, temp$76, temp$77, temp$78;
        org.apache.commons.lang3.time.DateUtils$ModifyType modType, temp$5, temp$10, temp$16, temp$29, temp$31;
        java.lang.ArithmeticException temp$1;
        java.util.Date date, temp$2;
        long time, temp$3, temp$6, temp$7, temp$11, temp$12, temp$13, temp$17, temp$18, temp$19, temp$20;
        boolean done, temp$8, temp$14, roundUp, temp$30, temp$32, offsetSet, temp$45, temp$46, temp$53, temp$54, temp$70;
        int[][] temp$22;
        int[] aField, temp$25, temp$35, temp$38, temp$47, temp$55, temp$59, temp$63, temp$71, temp$74;
        java.lang.IllegalArgumentException temp$79;
        java.lang.StringBuffer temp$80;
        java.lang.String temp$81;

        val := @parameter0: java.util.Calendar;
        field := @parameter1: int;
        modType := @parameter2: org.apache.commons.lang3.time.DateUtils$ModifyType;
        temp$0 = virtualinvoke val.<java.util.Calendar: int get(int)>(1);
        if temp$0 > 280000000 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = new java.lang.ArithmeticException;
        specialinvoke temp$1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Calendar value too large for accurate calculations");
        throw temp$1;

     label1:
        nop;
        if field == 14 goto label2;

        goto label3;

     label2:
        nop;
        return;

     label3:
        nop;
        temp$2 = virtualinvoke val.<java.util.Calendar: java.util.Date getTime()>();
        date = temp$2;
        temp$3 = virtualinvoke date.<java.util.Date: long getTime()>();
        time = temp$3;
        done = 0;
        temp$4 = virtualinvoke val.<java.util.Calendar: int get(int)>(14);
        millisecs = temp$4;
        temp$5 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType TRUNCATE>;
        if temp$5 == modType goto label5;

        goto label4;

     label4:
        nop;
        if millisecs < 500 goto label5;

        goto label6;

        goto label6;

     label5:
        nop;
        temp$6 = (long) millisecs;
        temp$7 = time - temp$6;
        time = temp$7;

     label6:
        nop;
        if field == 13 goto label7;

        goto label8;

     label7:
        nop;
        temp$8 = 1;
        done = temp$8;

     label8:
        nop;
        temp$9 = virtualinvoke val.<java.util.Calendar: int get(int)>(13);
        seconds = temp$9;
        if done == 0 goto label9;

        goto label12;

     label9:
        nop;
        temp$10 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType TRUNCATE>;
        if temp$10 == modType goto label11;

        goto label10;

     label10:
        nop;
        if seconds < 30 goto label11;

        goto label12;

        goto label12;

        goto label11;

     label11:
        nop;
        temp$11 = (long) seconds;
        temp$12 = temp$11 * 1000L;
        temp$13 = time - temp$12;
        time = temp$13;

     label12:
        nop;
        if field == 12 goto label13;

        goto label14;

     label13:
        nop;
        temp$14 = 1;
        done = temp$14;

     label14:
        nop;
        temp$15 = virtualinvoke val.<java.util.Calendar: int get(int)>(12);
        minutes = temp$15;
        if done == 0 goto label15;

        goto label18;

     label15:
        nop;
        temp$16 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType TRUNCATE>;
        if temp$16 == modType goto label17;

        goto label16;

     label16:
        nop;
        if minutes < 30 goto label17;

        goto label18;

        goto label18;

        goto label17;

     label17:
        nop;
        temp$17 = (long) minutes;
        temp$18 = temp$17 * 60000L;
        temp$19 = time - temp$18;
        time = temp$19;

     label18:
        nop;
        temp$20 = virtualinvoke date.<java.util.Date: long getTime()>();
        temp$21 = temp$20 cmp time;
        if temp$21 == 0 goto label20;

        goto label19;

     label19:
        nop;
        virtualinvoke date.<java.util.Date: void setTime(long)>(time);
        virtualinvoke val.<java.util.Calendar: void setTime(java.util.Date)>(date);

     label20:
        nop;
        roundUp = 0;
        temp$22 = <org.apache.commons.lang3.time.DateUtils: int[][] fields>;
        temp$23 = 0;

     label21:
        nop;
        temp$24 = lengthof temp$22;
        if temp$23 >= temp$24 goto label73;

        temp$25 = temp$22[temp$23];
        aField = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(temp$25);
        temp$26 = 0;

     label22:
        nop;
        temp$27 = lengthof aField;
        if temp$26 >= temp$27 goto label46;

        temp$28 = aField[temp$26];
        element = temp$28;
        if element == field goto label23;

        goto label45;

     label23:
        nop;
        temp$29 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType CEILING>;
        if modType == temp$29 goto label25;

        goto label24;

     label24:
        nop;
        temp$30 = 0;
        goto label26;

     label25:
        nop;
        temp$30 = 1;

     label26:
        nop;
        temp$31 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType ROUND>;
        if modType == temp$31 goto label27;

        goto label28;

     label27:
        nop;
        if roundUp == 0 goto label28;

        goto label29;

        goto label29;

     label28:
        nop;
        temp$32 = 0;
        goto label30;

     label29:
        nop;
        temp$32 = 1;

     label30:
        nop;
        if temp$30 != temp$32 goto label31;

        goto label44;

     label31:
        nop;
        if field == 1001 goto label32;

        goto label36;

     label32:
        nop;
        temp$33 = virtualinvoke val.<java.util.Calendar: int get(int)>(5);
        if temp$33 == 1 goto label33;

        goto label34;

     label33:
        nop;
        virtualinvoke val.<java.util.Calendar: void add(int,int)>(5, 15);
        goto label35;

     label34:
        nop;
        virtualinvoke val.<java.util.Calendar: void add(int,int)>(5, -15);
        virtualinvoke val.<java.util.Calendar: void add(int,int)>(2, 1);

     label35:
        nop;
        goto label43;

     label36:
        nop;
        if field == 9 goto label37;

        goto label41;

     label37:
        nop;
        temp$34 = virtualinvoke val.<java.util.Calendar: int get(int)>(11);
        if temp$34 == 0 goto label38;

        goto label39;

     label38:
        nop;
        virtualinvoke val.<java.util.Calendar: void add(int,int)>(11, 12);
        goto label40;

     label39:
        nop;
        virtualinvoke val.<java.util.Calendar: void add(int,int)>(11, -12);
        virtualinvoke val.<java.util.Calendar: void add(int,int)>(5, 1);

     label40:
        nop;
        goto label42;

     label41:
        nop;
        temp$35 = aField;
        temp$36 = 0;
        temp$37 = temp$35[temp$36];
        virtualinvoke val.<java.util.Calendar: void add(int,int)>(temp$37, 1);

     label42:
        nop;

     label43:
        nop;

     label44:
        nop;
        return;

     label45:
        nop;
        nop;
        temp$26 = temp$26 + 1;
        goto label22;

     label46:
        nop;
        offset = 0;
        offsetSet = 0;
        goto label64;

     label47:
        nop;
        temp$38 = aField;
        temp$39 = 0;
        temp$40 = temp$38[temp$39];
        if temp$40 == 5 goto label48;

        goto label54;

     label48:
        nop;
        temp$41 = virtualinvoke val.<java.util.Calendar: int get(int)>(5);
        temp$42 = temp$41 - 1;
        offset = temp$42;
        if offset >= 15 goto label49;

        goto label50;

     label49:
        nop;
        temp$43 = offset;
        temp$44 = temp$43 - 15;
        offset = temp$44;

     label50:
        nop;
        if offset > 7 goto label52;

        goto label51;

     label51:
        nop;
        temp$45 = 0;
        goto label53;

     label52:
        nop;
        temp$45 = 1;

     label53:
        nop;
        roundUp = temp$45;
        temp$46 = 1;
        offsetSet = temp$46;

     label54:
        nop;
        goto label65;

     label55:
        nop;
        temp$47 = aField;
        temp$48 = 0;
        temp$49 = temp$47[temp$48];
        if temp$49 == 11 goto label56;

        goto label62;

     label56:
        nop;
        temp$50 = virtualinvoke val.<java.util.Calendar: int get(int)>(11);
        offset = temp$50;
        if offset >= 12 goto label57;

        goto label58;

     label57:
        nop;
        temp$51 = offset;
        temp$52 = temp$51 - 12;
        offset = temp$52;

     label58:
        nop;
        if offset >= 6 goto label60;

        goto label59;

     label59:
        nop;
        temp$53 = 0;
        goto label61;

     label60:
        nop;
        temp$53 = 1;

     label61:
        nop;
        roundUp = temp$53;
        temp$54 = 1;
        offsetSet = temp$54;

     label62:
        nop;
        goto label65;

     label63:
        nop;
        goto label65;

        goto label65;

     label64:
        nop;
        nop;
        lookupswitch(field)
        {
            case 9: goto label55;
            case 1001: goto label47;
            default: goto label63;
        };

     label65:
        nop;
        if offsetSet == 0 goto label66;

        goto label70;

     label66:
        nop;
        temp$55 = aField;
        temp$56 = 0;
        temp$57 = temp$55[temp$56];
        temp$58 = virtualinvoke val.<java.util.Calendar: int getActualMinimum(int)>(temp$57);
        min = temp$58;
        temp$59 = aField;
        temp$60 = 0;
        temp$61 = temp$59[temp$60];
        temp$62 = virtualinvoke val.<java.util.Calendar: int getActualMaximum(int)>(temp$61);
        max = temp$62;
        temp$63 = aField;
        temp$64 = 0;
        temp$65 = temp$63[temp$64];
        temp$66 = virtualinvoke val.<java.util.Calendar: int get(int)>(temp$65);
        temp$67 = temp$66 - min;
        offset = temp$67;
        temp$68 = max - min;
        temp$69 = temp$68 / 2;
        if offset > temp$69 goto label68;

        goto label67;

     label67:
        nop;
        temp$70 = 0;
        goto label69;

     label68:
        nop;
        temp$70 = 1;

     label69:
        nop;
        roundUp = temp$70;

     label70:
        nop;
        if offset != 0 goto label71;

        goto label72;

     label71:
        nop;
        temp$71 = aField;
        temp$72 = 0;
        temp$73 = temp$71[temp$72];
        temp$74 = aField;
        temp$75 = 0;
        temp$76 = temp$74[temp$75];
        temp$77 = virtualinvoke val.<java.util.Calendar: int get(int)>(temp$76);
        temp$78 = temp$77 - offset;
        virtualinvoke val.<java.util.Calendar: void set(int,int)>(temp$73, temp$78);

     label72:
        nop;
        nop;
        temp$23 = temp$23 + 1;
        goto label21;

     label73:
        nop;
        temp$79 = new java.lang.IllegalArgumentException;
        temp$80 = new java.lang.StringBuffer;
        specialinvoke temp$80.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("The field ");
        virtualinvoke temp$80.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(field);
        virtualinvoke temp$80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" is not supported");
        temp$81 = virtualinvoke temp$80.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$79.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(temp$81);
        throw temp$79;

        return;
    }
}
