public class WrapClass 
{
    public static final org.apache.commons.lang3.math.Fraction getFraction(int, int)
    {
        int numerator, denominator, temp$4, temp$5;
        java.lang.ArithmeticException temp$0, temp$3;
        boolean temp$1, temp$2;
        org.apache.commons.lang3.math.Fraction temp$6;

        numerator := @parameter0: int;
        denominator := @parameter1: int;
        if denominator == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = new java.lang.ArithmeticException;
        specialinvoke temp$0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The denominator must not be zero");
        throw temp$0;

     label1:
        nop;
        if denominator < 0 goto label2;

        goto label11;

     label2:
        nop;
        if numerator == -2147483648 goto label4;

        goto label3;

     label3:
        nop;
        temp$1 = 0;
        goto label5;

     label4:
        nop;
        temp$1 = 1;

     label5:
        nop;
        if denominator == -2147483648 goto label7;

        goto label6;

     label6:
        nop;
        temp$2 = 0;
        goto label8;

     label7:
        nop;
        temp$2 = 1;

     label8:
        nop;
        if temp$1 != temp$2 goto label9;

        goto label10;

     label9:
        nop;
        temp$3 = new java.lang.ArithmeticException;
        specialinvoke temp$3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: can\'t negate");
        throw temp$3;

     label10:
        nop;
        temp$4 = neg numerator;
        numerator = temp$4;
        temp$5 = neg denominator;
        denominator = temp$5;

     label11:
        nop;
        temp$6 = new org.apache.commons.lang3.math.Fraction;
        specialinvoke temp$6.<org.apache.commons.lang3.math.Fraction: void <init>(int,int)>(numerator, denominator);
        return temp$6;
    }
}
