public class WrapClass 
{
    public static java.lang.Object clone(java.lang.Object)
    {
        java.lang.Object obj, result, temp$6, temp$9, temp$14, checked, temp$31;
        boolean temp$0, temp$2;
        java.lang.Class temp$1, componentType, temp$3, temp$4, temp$10, temp$17, temp$22, temp$27;
        int length, temp$5, temp$7, temp$8;
        java.lang.reflect.Method clone, temp$12;
        java.lang.Class[] temp$11;
        java.lang.Object[] temp$13;
        java.lang.NoSuchMethodException e;
        org.apache.commons.lang3.exception.CloneFailedException temp$15, temp$20, temp$25;
        java.lang.StringBuffer temp$16, temp$21, temp$26;
        java.lang.String temp$18, temp$19, temp$23, temp$24, temp$28, temp$29;
        java.lang.IllegalAccessException e;
        java.lang.reflect.InvocationTargetException e;
        java.lang.Throwable temp$30;

        obj := @parameter0: java.lang.Object;
        temp$0 = obj instanceof java.lang.Cloneable;
        if temp$0 == 0 goto label12;

        goto label0;

     label0:
        nop;
        temp$1 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>();
        temp$2 = virtualinvoke temp$1.<java.lang.Class: boolean isArray()>();
        if temp$2 == 0 goto label5;

        goto label1;

     label1:
        nop;
        temp$3 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>();
        temp$4 = virtualinvoke temp$3.<java.lang.Class: java.lang.Class getComponentType()>();
        componentType = temp$4;
        temp$5 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(obj);
        length = temp$5;
        temp$6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentType, length);
        result = temp$6;

     label2:
        nop;
        temp$7 = length;
        temp$8 = temp$7 + -1;
        length = temp$8;
        if temp$7 > 0 goto label3;

        goto label4;

     label3:
        nop;
        temp$9 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(obj, length);
        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(result, length, temp$9);
        goto label2;

     label4:
        nop;
        nop;
        goto label11;

     label5:
        nop;

     label6:
        nop;
        temp$10 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>();
        temp$11 = newarray (java.lang.Class)[0];
        temp$12 = virtualinvoke temp$10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clone", temp$11);
        clone = temp$12;
        temp$13 = newarray (java.lang.Object)[0];
        temp$14 = virtualinvoke clone.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(obj, temp$13);
        result = temp$14;
        goto label10;

     label7:
        nop;
        e := @caughtexception;
        temp$15 = new org.apache.commons.lang3.exception.CloneFailedException;
        temp$16 = new java.lang.StringBuffer;
        specialinvoke temp$16.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Cloneable type ");
        temp$17 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>();
        temp$18 = virtualinvoke temp$17.<java.lang.Class: java.lang.String getName()>();
        virtualinvoke temp$16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$18);
        virtualinvoke temp$16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" has no clone method");
        temp$19 = virtualinvoke temp$16.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$15.<org.apache.commons.lang3.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>(temp$19, e);
        throw temp$15;

     label8:
        nop;
        e := @caughtexception;
        temp$20 = new org.apache.commons.lang3.exception.CloneFailedException;
        temp$21 = new java.lang.StringBuffer;
        specialinvoke temp$21.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Cannot clone Cloneable type ");
        temp$22 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>();
        temp$23 = virtualinvoke temp$22.<java.lang.Class: java.lang.String getName()>();
        virtualinvoke temp$21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$23);
        temp$24 = virtualinvoke temp$21.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$20.<org.apache.commons.lang3.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>(temp$24, e);
        throw temp$20;

     label9:
        nop;
        e := @caughtexception;
        temp$25 = new org.apache.commons.lang3.exception.CloneFailedException;
        temp$26 = new java.lang.StringBuffer;
        specialinvoke temp$26.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Exception cloning Cloneable type ");
        temp$27 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>();
        temp$28 = virtualinvoke temp$27.<java.lang.Class: java.lang.String getName()>();
        virtualinvoke temp$26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$28);
        temp$29 = virtualinvoke temp$26.<java.lang.StringBuffer: java.lang.String toString()>();
        temp$30 = virtualinvoke e.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
        specialinvoke temp$25.<org.apache.commons.lang3.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>(temp$29, temp$30);
        throw temp$25;

     label10:
        nop;

     label11:
        nop;
        checked = result;
        return checked;

     label12:
        nop;
        temp$31 = null;
        return temp$31;

        catch java.lang.NoSuchMethodException from label6 to label7 with label7;
        catch java.lang.IllegalAccessException from label6 to label7 with label8;
        catch java.lang.reflect.InvocationTargetException from label6 to label7 with label9;
    }
}
