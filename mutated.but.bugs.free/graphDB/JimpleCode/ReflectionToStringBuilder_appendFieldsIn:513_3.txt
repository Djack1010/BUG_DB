public class WrapClass 
{
    protected void appendFieldsIn(java.lang.Class)
    {
        org.apache.commons.lang3.builder.ReflectionToStringBuilder this;
        java.lang.Class clazz;
        boolean temp$0, temp$6;
        java.lang.reflect.Field[] fields, temp$1;
        int temp$2, temp$3;
        java.lang.reflect.Field field, temp$4;
        java.lang.String fieldName, temp$5, temp$11, temp$12;
        java.lang.Object fieldValue, temp$7;
        org.apache.commons.lang3.builder.ToStringBuilder temp$8;
        java.lang.IllegalAccessException ex;
        java.lang.InternalError temp$9;
        java.lang.StringBuffer temp$10;

        this := @this: org.apache.commons.lang3.builder.ReflectionToStringBuilder;
        clazz := @parameter0: java.lang.Class;
        temp$0 = virtualinvoke clazz.<java.lang.Class: boolean isArray()>();
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        return;

     label1:
        nop;
        temp$1 = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
        fields = temp$1;
        staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>(fields, 1);
        temp$2 = 0;

     label2:
        nop;
        temp$3 = lengthof fields;
        if temp$2 >= temp$3 goto label8;

        temp$4 = fields[temp$2];
        field = temp$4;
        temp$5 = virtualinvoke field.<java.lang.reflect.Field: java.lang.String getName()>();
        fieldName = temp$5;
        temp$6 = virtualinvoke this.<org.apache.commons.lang3.builder.ReflectionToStringBuilder: boolean accept(java.lang.reflect.Field)>(field);
        if temp$6 == 0 goto label7;

        goto label3;

     label3:
        nop;

     label4:
        nop;
        temp$7 = virtualinvoke this.<org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.Object getValue(java.lang.reflect.Field)>(field);
        fieldValue = temp$7;
        temp$8 = virtualinvoke this.<org.apache.commons.lang3.builder.ReflectionToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>(fieldName, fieldValue);
        goto label6;

     label5:
        nop;
        ex := @caughtexception;
        temp$9 = new java.lang.InternalError;
        temp$10 = new java.lang.StringBuffer;
        specialinvoke temp$10.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Unexpected IllegalAccessException: ");
        temp$11 = virtualinvoke ex.<java.lang.IllegalAccessException: java.lang.String getMessage()>();
        virtualinvoke temp$10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$11);
        temp$12 = virtualinvoke temp$10.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$9.<java.lang.InternalError: void <init>(java.lang.String)>(temp$12);
        throw temp$9;

     label6:
        nop;

     label7:
        nop;
        nop;
        temp$2 = temp$2 + 1;
        goto label2;

     label8:
        nop;
        return;

        catch java.lang.IllegalAccessException from label4 to label5 with label5;
    }
}
