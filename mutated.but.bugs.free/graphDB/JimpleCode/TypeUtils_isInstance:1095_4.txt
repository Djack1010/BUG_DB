public class WrapClass 
{
    public static boolean isInstance(java.lang.Object, java.lang.reflect.Type)
    {
        java.lang.Object value;
        java.lang.reflect.Type type;
        boolean temp$0, temp$1, temp$3, temp$5, temp$6;
        java.lang.Class temp$2, temp$4;

        value := @parameter0: java.lang.Object;
        type := @parameter1: java.lang.reflect.Type;
        if type == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = 1;
        return temp$0;

     label1:
        nop;
        if value == null goto label2;

        goto label4;

     label2:
        nop;
        temp$1 = type instanceof java.lang.Class;
        if temp$1 == 0 goto label6;

        goto label3;

     label3:
        nop;
        temp$2 = (java.lang.Class) type;
        temp$3 = virtualinvoke temp$2.<java.lang.Class: boolean isPrimitive()>();
        if temp$3 == 0 goto label6;

        goto label5;

        goto label5;

        goto label6;

     label4:
        nop;
        temp$4 = virtualinvoke value.<java.lang.Object: java.lang.Class getClass()>();
        temp$5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(temp$4, type, null);
        if temp$5 == 0 goto label5;

        goto label6;

        goto label6;

     label5:
        nop;
        temp$6 = 0;
        goto label7;

     label6:
        nop;
        temp$6 = 1;

     label7:
        nop;
        return temp$6;
    }
}
