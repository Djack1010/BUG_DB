public class WrapClass 
{
    public static java.util.Set getOverrideHierarchy(java.lang.reflect.Method, org.apache.commons.lang3.ClassUtils$Interfaces)
    {
        java.lang.reflect.Method method, m, temp$13;
        org.apache.commons.lang3.ClassUtils$Interfaces interfacesBehavior;
        java.util.Set result;
        java.util.LinkedHashSet temp$0;
        boolean temp$1, temp$9, temp$15, temp$16, temp$30, temp$33;
        java.lang.Class[] parameterTypes, temp$2, temp$14;
        java.lang.Class declaringClass, temp$3, temp$8, c, temp$11, temp$17;
        java.util.Iterator hierarchy, temp$5, temp$6;
        java.lang.Iterable temp$4;
        java.lang.Object temp$7, temp$10;
        java.lang.String temp$12;
        java.util.Map typeArguments, temp$18;
        int i, temp$19, temp$22, temp$27, temp$31, temp$32;
        java.lang.reflect.Type childType, temp$23, temp$24, parentType, temp$28, temp$29;
        java.lang.reflect.Type[] temp$20, temp$21, temp$25, temp$26;

        method := @parameter0: java.lang.reflect.Method;
        interfacesBehavior := @parameter1: org.apache.commons.lang3.ClassUtils$Interfaces;
        temp$0 = new java.util.LinkedHashSet;
        specialinvoke temp$0.<java.util.LinkedHashSet: void <init>()>();
        result = temp$0;
        temp$1 = interfaceinvoke result.<java.util.Set: boolean add(java.lang.Object)>(method);
        temp$2 = virtualinvoke method.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        parameterTypes = temp$2;
        temp$3 = virtualinvoke method.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
        declaringClass = temp$3;
        temp$4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Iterable hierarchy(java.lang.Class,org.apache.commons.lang3.ClassUtils$Interfaces)>(declaringClass, interfacesBehavior);
        temp$5 = interfaceinvoke temp$4.<java.lang.Iterable: java.util.Iterator iterator()>();
        temp$6 = (java.util.Iterator) temp$5;
        hierarchy = temp$6;
        temp$7 = interfaceinvoke hierarchy.<java.util.Iterator: java.lang.Object next()>();
        temp$8 = (java.lang.Class) temp$7;
        nop;

     label0:
        nop;
        temp$9 = interfaceinvoke hierarchy.<java.util.Iterator: boolean hasNext()>();
        if temp$9 == 0 goto label11;

        goto label1;

     label1:
        nop;
        temp$10 = interfaceinvoke hierarchy.<java.util.Iterator: java.lang.Object next()>();
        temp$11 = (java.lang.Class) temp$10;
        c = temp$11;
        temp$12 = virtualinvoke method.<java.lang.reflect.Method: java.lang.String getName()>();
        temp$13 = staticinvoke <org.apache.commons.lang3.reflect.MethodUtils: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(c, temp$12, parameterTypes);
        m = temp$13;
        if m == null goto label2;

        goto label3;

     label2:
        nop;
        goto label0;

     label3:
        nop;
        temp$14 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        temp$15 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(temp$14, parameterTypes);
        if temp$15 == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$16 = interfaceinvoke result.<java.util.Set: boolean add(java.lang.Object)>(m);
        goto label0;

     label5:
        nop;
        temp$17 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
        temp$18 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)>(declaringClass, temp$17);
        typeArguments = temp$18;
        i = 0;

     label6:
        nop;
        temp$19 = lengthof parameterTypes;
        if i < temp$19 goto label7;

        goto label10;

     label7:
        nop;
        temp$20 = virtualinvoke method.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();
        temp$21 = temp$20;
        temp$22 = i;
        temp$23 = temp$21[temp$22];
        temp$24 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)>(typeArguments, temp$23);
        childType = temp$24;
        temp$25 = virtualinvoke m.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();
        temp$26 = temp$25;
        temp$27 = i;
        temp$28 = temp$26[temp$27];
        temp$29 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)>(typeArguments, temp$28);
        parentType = temp$29;
        temp$30 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)>(childType, parentType);
        if temp$30 == 0 goto label8;

        goto label9;

     label8:
        nop;
        goto label0;

     label9:
        nop;
        nop;
        temp$31 = i;
        temp$32 = temp$31 + 1;
        i = temp$32;
        goto label6;

     label10:
        nop;
        temp$33 = interfaceinvoke result.<java.util.Set: boolean add(java.lang.Object)>(m);
        goto label0;

     label11:
        nop;
        nop;
        return result;
    }
}
