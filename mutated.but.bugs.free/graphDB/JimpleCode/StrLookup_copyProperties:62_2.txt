public class WrapClass 
{
    private static final java.util.Properties copyProperties(java.util.Properties)
    {
        java.util.Properties input, output, temp$0;
        java.util.Enumeration propertyNames, temp$1;
        boolean temp$2;
        java.lang.String propertyName, temp$4, temp$5;
        java.lang.Object temp$3, temp$6;

        input := @parameter0: java.util.Properties;
        temp$0 = new java.util.Properties;
        specialinvoke temp$0.<java.util.Properties: void <init>()>();
        output = temp$0;
        temp$1 = virtualinvoke input.<java.util.Properties: java.util.Enumeration propertyNames()>();
        propertyNames = (java.util.Enumeration) temp$1;

     label0:
        nop;
        temp$2 = interfaceinvoke propertyNames.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$2 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$3 = interfaceinvoke propertyNames.<java.util.Enumeration: java.lang.Object nextElement()>();
        temp$4 = (java.lang.String) temp$3;
        propertyName = temp$4;
        temp$5 = virtualinvoke input.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(propertyName);
        temp$6 = virtualinvoke output.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(propertyName, temp$5);
        goto label0;

     label2:
        nop;
        return output;
    }
}
