public class WrapClass 
{
    public static java.lang.reflect.Constructor getAccessibleConstructor(java.lang.reflect.Constructor)
    {
        java.lang.reflect.Constructor ctor, temp$2, temp$3;
        java.lang.Object[] temp$0;
        java.lang.Object temp$1;
        boolean temp$4, temp$6;
        java.lang.Class temp$5;

        ctor := @parameter0: java.lang.reflect.Constructor;
        temp$0 = newarray (java.lang.Object)[0];
        temp$1 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(ctor, "constructor cannot be null", temp$0);
        temp$2 = (java.lang.reflect.Constructor) temp$1;
        temp$4 = staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: boolean isAccessible(java.lang.reflect.Member)>(ctor);
        if temp$4 == 0 goto label2;

        goto label0;

     label0:
        nop;
        temp$5 = virtualinvoke ctor.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        temp$6 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: boolean isAccessible(java.lang.Class)>(temp$5);
        if temp$6 == 0 goto label2;

        goto label1;

        goto label1;

     label1:
        nop;
        temp$3 = ctor;
        goto label3;

     label2:
        nop;
        temp$3 = null;

     label3:
        nop;
        return temp$3;
    }
}
