public class WrapClass 
{
    private static final java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map, java.lang.reflect.TypeVariable[])
    {
        java.util.Map mappings;
        java.lang.reflect.TypeVariable[] variables;
        java.lang.reflect.Type[] result;
        int temp$0, index, temp$1, temp$2;
        java.lang.reflect.TypeVariable var, temp$3;
        boolean temp$4;
        java.lang.Object[] temp$5;
        java.lang.String temp$6;

        mappings := @parameter0: java.util.Map;
        variables := @parameter1: java.lang.reflect.TypeVariable[];
        temp$0 = lengthof variables;
        result = newarray (java.lang.reflect.Type)[temp$0];
        index = 0;
        temp$1 = 0;

     label0:
        nop;
        temp$2 = lengthof variables;
        if temp$1 >= temp$2 goto label1;

        temp$3 = variables[temp$1];
        var = temp$3;
        temp$4 = interfaceinvoke mappings.<java.util.Map: boolean containsKey(java.lang.Object)>(var);
        temp$5 = newarray (java.lang.Object)[1];
        temp$6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String toString(java.lang.reflect.Type)>(var);
        temp$5[0] = temp$6;
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(temp$4, "missing argument mapping for %s", temp$5);
        nop;
        temp$1 = temp$1 + 1;
        goto label0;

     label1:
        nop;
        return result;
    }
}
