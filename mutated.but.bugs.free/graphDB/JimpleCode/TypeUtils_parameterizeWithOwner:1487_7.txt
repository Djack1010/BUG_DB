public class WrapClass 
{
    public static final transient java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type[])
    {
        java.lang.reflect.Type owner, useOwner, temp$4;
        java.lang.Class raw, temp$2, temp$3, temp$5, temp$6;
        java.lang.reflect.Type[] typeArguments, temp$11;
        java.lang.Object[] temp$0, temp$8, temp$9, temp$10, temp$17;
        java.lang.Object temp$1;
        boolean temp$7, temp$16;
        java.lang.reflect.TypeVariable[] temp$12, temp$13, temp$18, temp$19;
        int temp$14, temp$15, temp$20, temp$22;
        java.lang.Integer temp$21, temp$23;
        org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl temp$24;

        owner := @parameter0: java.lang.reflect.Type;
        raw := @parameter1: java.lang.Class;
        typeArguments := @parameter2: java.lang.reflect.Type[];
        temp$0 = newarray (java.lang.Object)[0];
        temp$1 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(raw, "raw class is null", temp$0);
        temp$2 = (java.lang.Class) temp$1;
        temp$3 = virtualinvoke raw.<java.lang.Class: java.lang.Class getEnclosingClass()>();
        if temp$3 == null goto label0;

        goto label1;

     label0:
        nop;
        temp$4 = null;
        useOwner = temp$4;
        goto label5;

     label1:
        nop;
        if owner == null goto label2;

        goto label3;

     label2:
        nop;
        temp$5 = virtualinvoke raw.<java.lang.Class: java.lang.Class getEnclosingClass()>();
        useOwner = temp$5;
        goto label4;

     label3:
        nop;
        temp$6 = virtualinvoke raw.<java.lang.Class: java.lang.Class getEnclosingClass()>();
        temp$7 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(owner, temp$6);
        temp$8 = newarray (java.lang.Object)[2];
        temp$8[0] = owner;
        temp$8[1] = raw;
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(temp$7, "%s is invalid owner type for parameterized %s", temp$8);
        useOwner = owner;

     label4:
        nop;

     label5:
        nop;
        temp$9 = newarray (java.lang.Object)[0];
        temp$10 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] noNullElements(java.lang.Object[],java.lang.String,java.lang.Object[])>(typeArguments, "null type argument at index %s", temp$9);
        temp$11 = (java.lang.reflect.Type[]) temp$10;
        temp$12 = virtualinvoke raw.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
        temp$13 = (java.lang.reflect.TypeVariable[]) temp$12;
        temp$14 = lengthof temp$13;
        temp$15 = lengthof typeArguments;
        if temp$14 == temp$15 goto label7;

        goto label6;

     label6:
        nop;
        temp$16 = 0;
        goto label8;

     label7:
        nop;
        temp$16 = 1;

     label8:
        nop;
        temp$17 = newarray (java.lang.Object)[2];
        temp$18 = virtualinvoke raw.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
        temp$19 = (java.lang.reflect.TypeVariable[]) temp$18;
        temp$20 = lengthof temp$19;
        temp$21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(temp$20);
        temp$17[0] = temp$21;
        temp$22 = lengthof typeArguments;
        temp$23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(temp$22);
        temp$17[1] = temp$23;
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(temp$16, "invalid number of type parameters specified: expected %s, got %s", temp$17);
        temp$24 = new org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl;
        specialinvoke temp$24.<org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl: void <init>(java.lang.Class,java.lang.reflect.Type,java.lang.reflect.Type[],org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl$2)>(raw, useOwner, typeArguments, null);
        return temp$24;
    }
}
