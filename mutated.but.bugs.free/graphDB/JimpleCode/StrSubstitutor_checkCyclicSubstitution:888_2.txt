public class WrapClass 
{
    private final void checkCyclicSubstitution(java.lang.String, java.util.List)
    {
        org.apache.commons.lang3.text.StrSubstitutor this;
        java.lang.String varName, temp$4, temp$8;
        java.util.List priorVariables;
        boolean temp$0;
        org.apache.commons.lang3.text.StrBuilder buf, temp$1, temp$2, temp$5, temp$6;
        java.lang.Object temp$3;
        java.lang.IllegalStateException temp$7;

        this := @this: org.apache.commons.lang3.text.StrSubstitutor;
        varName := @parameter0: java.lang.String;
        priorVariables := @parameter1: java.util.List;
        temp$0 = interfaceinvoke priorVariables.<java.util.List: boolean contains(java.lang.Object)>(varName);
        if temp$0 == 0 goto label0;

        goto label1;

     label0:
        nop;
        return;

     label1:
        nop;
        temp$1 = new org.apache.commons.lang3.text.StrBuilder;
        specialinvoke temp$1.<org.apache.commons.lang3.text.StrBuilder: void <init>(int)>(256);
        buf = temp$1;
        temp$2 = virtualinvoke buf.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("Infinite loop in property interpolation of ");
        temp$3 = interfaceinvoke priorVariables.<java.util.List: java.lang.Object remove(int)>(0);
        temp$4 = (java.lang.String) temp$3;
        temp$5 = virtualinvoke buf.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>(temp$4);
        temp$6 = virtualinvoke buf.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Iterable,java.lang.String)>(priorVariables, "->");
        temp$7 = new java.lang.IllegalStateException;
        temp$8 = virtualinvoke buf.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();
        specialinvoke temp$7.<java.lang.IllegalStateException: void <init>(java.lang.String)>(temp$8);
        throw temp$7;

        return;
    }
}
