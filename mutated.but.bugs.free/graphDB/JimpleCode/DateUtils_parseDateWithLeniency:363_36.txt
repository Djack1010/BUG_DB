public class WrapClass 
{
    private static final java.util.Date parseDateWithLeniency(java.lang.String, java.util.Locale, java.lang.String[], boolean) throws java.text.ParseException
    {
        java.lang.String str, parsePattern, temp$6, pattern, str2, temp$9, temp$15;
        java.util.Locale locale;
        java.lang.String[] parsePatterns;
        boolean lenient, temp$7, temp$8;
        java.lang.IllegalArgumentException temp$0;
        java.text.SimpleDateFormat parser, temp$1, temp$2;
        java.text.ParsePosition pos, temp$3;
        int temp$4, temp$5, temp$11, temp$12;
        java.util.Date date, temp$10;
        java.text.ParseException temp$13;
        java.lang.StringBuffer temp$14;

        str := @parameter0: java.lang.String;
        locale := @parameter1: java.util.Locale;
        parsePatterns := @parameter2: java.lang.String[];
        lenient := @parameter3: boolean;
        if str == null goto label1;

        goto label0;

     label0:
        nop;
        if parsePatterns == null goto label1;

        goto label2;

        goto label2;

     label1:
        nop;
        temp$0 = new java.lang.IllegalArgumentException;
        specialinvoke temp$0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Date and Patterns must not be null");
        throw temp$0;

     label2:
        nop;
        if locale == null goto label3;

        goto label4;

     label3:
        nop;
        temp$1 = new java.text.SimpleDateFormat;
        specialinvoke temp$1.<java.text.SimpleDateFormat: void <init>()>();
        parser = temp$1;
        goto label5;

     label4:
        nop;
        temp$2 = new java.text.SimpleDateFormat;
        specialinvoke temp$2.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("", locale);
        parser = temp$2;

     label5:
        nop;
        virtualinvoke parser.<java.text.SimpleDateFormat: void setLenient(boolean)>(lenient);
        temp$3 = new java.text.ParsePosition;
        specialinvoke temp$3.<java.text.ParsePosition: void <init>(int)>(0);
        pos = temp$3;
        temp$4 = 0;

     label6:
        nop;
        temp$5 = lengthof parsePatterns;
        if temp$4 >= temp$5 goto label14;

        temp$6 = parsePatterns[temp$4];
        parsePattern = temp$6;
        pattern = parsePattern;
        temp$7 = virtualinvoke parsePattern.<java.lang.String: boolean endsWith(java.lang.String)>("ZZ");
        if temp$7 == 0 goto label8;

        goto label7;

     label7:
        nop;

     label8:
        nop;
        virtualinvoke parser.<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>(pattern);
        virtualinvoke pos.<java.text.ParsePosition: void setIndex(int)>(0);
        str2 = str;
        temp$8 = virtualinvoke parsePattern.<java.lang.String: boolean endsWith(java.lang.String)>("ZZ");
        if temp$8 == 0 goto label10;

        goto label9;

     label9:
        nop;
        temp$9 = virtualinvoke str.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("([-+][0-9][0-9]):([0-9][0-9])$", "$1$2");
        str2 = temp$9;

     label10:
        nop;
        temp$10 = virtualinvoke parser.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>(str2, pos);
        date = temp$10;
        if date != null goto label11;

        goto label13;

     label11:
        nop;
        temp$11 = virtualinvoke pos.<java.text.ParsePosition: int getIndex()>();
        temp$12 = virtualinvoke str2.<java.lang.String: int length()>();
        if temp$11 == temp$12 goto label12;

        goto label13;

        goto label12;

     label12:
        nop;
        return date;

     label13:
        nop;
        nop;
        temp$4 = temp$4 + 1;
        goto label6;

     label14:
        nop;
        temp$13 = new java.text.ParseException;
        temp$14 = new java.lang.StringBuffer;
        specialinvoke temp$14.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Unable to parse the date: ");
        virtualinvoke temp$14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(str);
        temp$15 = virtualinvoke temp$14.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$13.<java.text.ParseException: void <init>(java.lang.String,int)>(temp$15, -1);
        throw temp$13;
    }
}
