public class WrapClass 
{
    public static double nextDouble(double, double)
    {
        double startInclusive, endInclusive, temp$7, temp$8, temp$10, temp$11, temp$12;
        int temp$0, temp$3, temp$6;
        boolean temp$1, temp$4;
        java.lang.Object[] temp$2, temp$5;
        java.util.Random temp$9;

        startInclusive := @parameter0: double;
        endInclusive := @parameter1: double;
        temp$0 = endInclusive cmpl startInclusive;
        if temp$0 < 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = 0;
        goto label2;

     label1:
        nop;
        temp$1 = 1;

     label2:
        nop;
        temp$2 = newarray (java.lang.Object)[0];
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(temp$1, "Start value must be smaller or equal to end value.", temp$2);
        temp$3 = startInclusive cmpl 0.0;
        if temp$3 < 0 goto label3;

        goto label4;

     label3:
        nop;
        temp$4 = 0;
        goto label5;

     label4:
        nop;
        temp$4 = 1;

     label5:
        nop;
        temp$5 = newarray (java.lang.Object)[0];
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(temp$4, "Both range values must be non-negative.", temp$5);
        temp$6 = startInclusive cmpg endInclusive;
        if temp$6 > 0 goto label7;

        goto label6;

     label6:
        nop;
        return startInclusive;

     label7:
        nop;
        temp$7 = startInclusive;
        temp$8 = endInclusive - startInclusive;
        temp$9 = <org.apache.commons.lang3.RandomUtils: java.util.Random RANDOM>;
        temp$10 = virtualinvoke temp$9.<java.util.Random: double nextDouble()>();
        temp$11 = temp$8 * temp$10;
        temp$12 = temp$7 + temp$11;
        return temp$12;
    }
}
