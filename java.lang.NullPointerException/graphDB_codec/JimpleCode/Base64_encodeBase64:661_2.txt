public class WrapClass 
{
    public static byte[] encodeBase64(byte[], boolean, boolean, int)
    {
        byte[] binaryData, temp$6, temp$13;
        boolean isChunked, urlSafe, temp$0, temp$2;
        int maxResultSize, temp$1, temp$9;
        org.apache.commons.codec.binary.Base64 b64, temp$3, temp$4, temp$5;
        long len, temp$7, temp$8;
        java.lang.IllegalArgumentException temp$10;
        java.lang.StringBuffer temp$11;
        java.lang.String temp$12;

        binaryData := @parameter0: byte[];
        isChunked := @parameter1: boolean;
        urlSafe := @parameter2: boolean;
        maxResultSize := @parameter3: int;
        if binaryData == null goto label1;

        goto label0;

     label0:
        nop;
        temp$0 = 0;
        goto label2;

     label1:
        nop;
        temp$0 = 1;

     label2:
        nop;
        temp$1 = lengthof binaryData;
        if temp$1 == 0 goto label4;

        goto label3;

     label3:
        nop;
        temp$2 = 0;
        goto label5;

     label4:
        nop;
        temp$2 = 1;

     label5:
        nop;
        if temp$0 != temp$2 goto label6;

        goto label7;

     label6:
        nop;
        return binaryData;

     label7:
        nop;
        if isChunked == 0 goto label9;

        goto label8;

     label8:
        nop;
        temp$4 = new org.apache.commons.codec.binary.Base64;
        specialinvoke temp$4.<org.apache.commons.codec.binary.Base64: void <init>(boolean)>(urlSafe);
        temp$3 = temp$4;
        goto label10;

     label9:
        nop;
        temp$5 = new org.apache.commons.codec.binary.Base64;
        temp$6 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;
        specialinvoke temp$5.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],boolean)>(0, temp$6, urlSafe);
        temp$3 = temp$5;

     label10:
        nop;
        b64 = temp$3;
        temp$7 = virtualinvoke b64.<org.apache.commons.codec.binary.Base64: long getEncodedLength(byte[])>(binaryData);
        len = temp$7;
        temp$8 = (long) maxResultSize;
        temp$9 = len cmp temp$8;
        if temp$9 <= 0 goto label12;

        goto label11;

     label11:
        nop;
        temp$10 = new java.lang.IllegalArgumentException;
        temp$11 = new java.lang.StringBuffer;
        specialinvoke temp$11.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Input array too big, the output array would be bigger (");
        virtualinvoke temp$11.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(len);
        virtualinvoke temp$11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(") than the specified maximum size of ");
        virtualinvoke temp$11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(maxResultSize);
        temp$12 = virtualinvoke temp$11.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(temp$12);
        throw temp$10;

     label12:
        nop;
        temp$13 = virtualinvoke b64.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>(binaryData);
        return temp$13;
    }
}
