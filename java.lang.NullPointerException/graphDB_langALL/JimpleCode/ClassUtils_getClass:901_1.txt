public class WrapClass 
{
    public static java.lang.Class getClass(java.lang.ClassLoader, java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader classLoader;
        java.lang.String className, temp$0, temp$4, temp$8, temp$9;
        boolean initialize;
        java.lang.Class clazz, temp$1, temp$10;
        java.lang.ClassNotFoundException ex, ex2;
        int lastDotIndex, temp$2, temp$6, temp$7;
        java.lang.StringBuffer temp$3;
        char temp$5;

        classLoader := @parameter0: java.lang.ClassLoader;
        className := @parameter1: java.lang.String;
        initialize := @parameter2: boolean;

     label0:
        nop;
        temp$0 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String toCanonicalName(java.lang.String)>(className);
        temp$1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(temp$0, initialize, classLoader);
        clazz = temp$1;
        nop;

     label1:
        nop;
        return clazz;

     label2:
        nop;
        ex := @caughtexception;
        temp$2 = virtualinvoke className.<java.lang.String: int lastIndexOf(int)>(46);
        lastDotIndex = temp$2;
        if lastDotIndex != -1 goto label3;

        goto label8;

     label3:
        nop;

     label4:
        nop;
        temp$3 = new java.lang.StringBuffer;
        specialinvoke temp$3.<java.lang.StringBuffer: void <init>()>();
        temp$4 = virtualinvoke className.<java.lang.String: java.lang.String substring(int,int)>(0, lastDotIndex);
        virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$4);
        temp$5 = <org.apache.commons.lang3.ClassUtils: char INNER_CLASS_SEPARATOR_CHAR>;
        virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(temp$5);
        temp$6 = lastDotIndex;
        temp$7 = temp$6 + 1;
        temp$8 = virtualinvoke className.<java.lang.String: java.lang.String substring(int)>(temp$7);
        virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$8);
        temp$9 = virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.String toString()>();
        temp$10 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)>(classLoader, temp$9, initialize);

     label5:
        nop;
        return temp$10;

     label6:
        nop;
        ex2 := @caughtexception;
        nop;
        goto label7;

     label7:
        nop;

     label8:
        nop;
        throw ex;

        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }
}
