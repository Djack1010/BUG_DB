public class WrapClass 
{
    public static java.util.List convertClassNamesToClasses(java.util.List)
    {
        java.util.List classNames, classes;
        java.util.ArrayList temp$0;
        int temp$1;
        java.util.Iterator temp$2;
        java.lang.String className;
        boolean temp$3, temp$6, temp$7;
        java.lang.Object temp$4;
        java.lang.Class temp$5;
        java.lang.Exception ex;

        classNames := @parameter0: java.util.List;
        if classNames == null goto label0;

        goto label1;

     label0:
        nop;

     label1:
        nop;
        temp$0 = new java.util.ArrayList;
        temp$1 = interfaceinvoke classNames.<java.util.List: int size()>();
        specialinvoke temp$0.<java.util.ArrayList: void <init>(int)>(temp$1);
        classes = temp$0;
        temp$2 = interfaceinvoke classNames.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        nop;
        temp$3 = interfaceinvoke temp$2.<java.util.Iterator: boolean hasNext()>();
        if temp$3 == 0 goto label6;

        temp$4 = interfaceinvoke temp$2.<java.util.Iterator: java.lang.Object next()>();
        className = (java.lang.String) temp$4;

     label3:
        nop;
        temp$5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(className);
        temp$6 = interfaceinvoke classes.<java.util.List: boolean add(java.lang.Object)>(temp$5);
        goto label5;

     label4:
        nop;
        ex := @caughtexception;
        temp$7 = interfaceinvoke classes.<java.util.List: boolean add(java.lang.Object)>(null);
        nop;
        goto label5;

     label5:
        nop;
        nop;
        goto label2;

     label6:
        nop;
        return classes;

        catch java.lang.Exception from label3 to label4 with label4;
    }
}
