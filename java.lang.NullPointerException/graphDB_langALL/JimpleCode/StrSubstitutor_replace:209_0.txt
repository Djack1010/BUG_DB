public class WrapClass 
{
    public static java.lang.String replace(java.lang.Object, java.util.Properties)
    {
        java.lang.Object source, temp$4, temp$6;
        java.util.Properties valueProperties;
        java.lang.String temp$0, propName, propValue, temp$5, temp$7, temp$8;
        java.util.Map valueMap;
        java.util.HashMap temp$1;
        java.util.Enumeration propNames, temp$2;
        boolean temp$3;

        source := @parameter0: java.lang.Object;
        valueProperties := @parameter1: java.util.Properties;
        if valueProperties == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = virtualinvoke source.<java.lang.Object: java.lang.String toString()>();
        return temp$0;

     label1:
        nop;
        temp$1 = new java.util.HashMap;
        specialinvoke temp$1.<java.util.HashMap: void <init>()>();
        valueMap = temp$1;
        temp$2 = virtualinvoke valueProperties.<java.util.Properties: java.util.Enumeration propertyNames()>();
        propNames = temp$2;

     label2:
        nop;
        temp$3 = interfaceinvoke propNames.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$3 == 0 goto label4;

        goto label3;

     label3:
        nop;
        temp$4 = interfaceinvoke propNames.<java.util.Enumeration: java.lang.Object nextElement()>();
        propName = (java.lang.String) temp$4;
        temp$5 = virtualinvoke valueProperties.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(propName);
        propValue = temp$5;
        temp$6 = interfaceinvoke valueMap.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(propName, propValue);
        temp$7 = (java.lang.String) temp$6;
        goto label2;

     label4:
        nop;
        temp$8 = staticinvoke <org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.Object,java.util.Map)>(source, valueMap);
        return temp$8;
    }
}
