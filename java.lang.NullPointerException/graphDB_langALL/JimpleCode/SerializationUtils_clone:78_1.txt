public class WrapClass 
{
    public static java.io.Serializable clone(java.io.Serializable)
    {
        java.io.Serializable object, readObject;
        byte[] objectData, temp$0;
        java.io.ByteArrayInputStream bais, temp$1;
        org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream in, temp$2;
        java.lang.Class temp$3;
        java.lang.ClassLoader temp$4;
        java.lang.Object temp$5;
        java.io.IOException ex, ex, ex;
        org.apache.commons.lang3.SerializationException temp$6, temp$7, temp$8, temp$10;
        java.lang.ClassNotFoundException ex;
        java.lang.Throwable temp$9;

        object := @parameter0: java.io.Serializable;
        temp$0 = staticinvoke <org.apache.commons.lang3.SerializationUtils: byte[] serialize(java.io.Serializable)>(object);
        objectData = temp$0;
        temp$1 = new java.io.ByteArrayInputStream;
        specialinvoke temp$1.<java.io.ByteArrayInputStream: void <init>(byte[])>(objectData);
        bais = temp$1;
        in = null;

     label0:
        nop;
        temp$2 = new org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream;
        temp$3 = interfaceinvoke object.<java.io.Serializable: java.lang.Class getClass()>();
        temp$4 = virtualinvoke temp$3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        specialinvoke temp$2.<org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader)>(bais, temp$4);
        in = temp$2;
        temp$5 = virtualinvoke in.<org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.lang.Object readObject()>();
        readObject = (java.io.Serializable) temp$5;

     label1:
        nop;

     label2:
        nop;
        if in != null goto label3;

        goto label4;

     label3:
        nop;
        virtualinvoke in.<org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: void close()>();

     label4:
        nop;
        goto label6;

     label5:
        nop;
        ex := @caughtexception;
        temp$6 = new org.apache.commons.lang3.SerializationException;
        specialinvoke temp$6.<org.apache.commons.lang3.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>("IOException on closing cloned object data InputStream.", ex);
        throw temp$6;

     label6:
        nop;
        return readObject;

     label7:
        nop;
        ex := @caughtexception;
        temp$7 = new org.apache.commons.lang3.SerializationException;
        specialinvoke temp$7.<org.apache.commons.lang3.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>("ClassNotFoundException while reading cloned object data", ex);
        throw temp$7;

     label8:
        nop;
        ex := @caughtexception;
        temp$8 = new org.apache.commons.lang3.SerializationException;
        specialinvoke temp$8.<org.apache.commons.lang3.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>("IOException while reading cloned object data", ex);
        throw temp$8;

     label9:
        nop;
        temp$9 := @caughtexception;

     label10:
        nop;
        if in != null goto label11;

        goto label12;

     label11:
        nop;
        virtualinvoke in.<org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: void close()>();

     label12:
        nop;
        goto label14;

     label13:
        nop;
        ex := @caughtexception;
        temp$10 = new org.apache.commons.lang3.SerializationException;
        specialinvoke temp$10.<org.apache.commons.lang3.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>("IOException on closing cloned object data InputStream.", ex);
        throw temp$10;

     label14:
        nop;
        throw temp$9;

        catch java.io.IOException from label2 to label5 with label5;
        catch java.io.IOException from label10 to label13 with label13;
        catch java.lang.ClassNotFoundException from label0 to label1 with label7;
        catch java.io.IOException from label0 to label1 with label8;
        catch java.lang.Throwable from label0 to label1 with label9;
        catch java.lang.Throwable from label7 to label9 with label9;
    }
}
