public class WrapClass 
{
    public static java.lang.Object readField(java.lang.reflect.Field, java.lang.Object, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field field;
        java.lang.Object target, temp$2;
        boolean forceAccess, temp$0, temp$1;

        field := @parameter0: java.lang.reflect.Field;
        target := @parameter1: java.lang.Object;
        forceAccess := @parameter2: boolean;
        if forceAccess == 0 goto label2;

        goto label0;

     label0:
        nop;
        temp$0 = virtualinvoke field.<java.lang.reflect.Field: boolean isAccessible()>();
        if temp$0 == 0 goto label1;

        goto label2;

        goto label1;

     label1:
        nop;
        virtualinvoke field.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
        goto label3;

     label2:
        nop;
        temp$1 = staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: boolean setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>(field);

     label3:
        nop;
        temp$2 = virtualinvoke field.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(target);
        return temp$2;
    }
}
