public class WrapClass 
{
    private static final boolean isAssignable(java.lang.reflect.Type, java.lang.Class)
    {
        java.lang.reflect.Type type, bound, temp$19, temp$30;
        java.lang.Class toClass, temp$8, temp$12, temp$24, temp$25, temp$26, temp$31;
        boolean temp$0, temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7, temp$9, temp$10, temp$13, temp$14, temp$20, temp$21, temp$22, temp$23, temp$27, temp$28, temp$32, temp$33, temp$34, temp$35;
        java.lang.reflect.ParameterizedType temp$11;
        java.lang.reflect.TypeVariable temp$15;
        java.lang.reflect.Type[] temp$16;
        int temp$17, temp$18;
        java.lang.reflect.GenericArrayType temp$29;
        java.lang.IllegalStateException temp$36;
        java.lang.StringBuffer temp$37;
        java.lang.String temp$38;

        type := @parameter0: java.lang.reflect.Type;
        toClass := @parameter1: java.lang.Class;
        if type == null goto label0;

        goto label10;

     label0:
        nop;
        if toClass == null goto label2;

        goto label1;

     label1:
        nop;
        temp$0 = 0;
        goto label3;

     label2:
        nop;
        temp$0 = 1;

     label3:
        nop;
        temp$1 = virtualinvoke toClass.<java.lang.Class: boolean isPrimitive()>();
        if temp$1 == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$2 = 0;
        goto label6;

     label5:
        nop;
        temp$2 = 1;

     label6:
        nop;
        if temp$0 != temp$2 goto label8;

        goto label7;

     label7:
        nop;
        temp$3 = 0;
        goto label9;

     label8:
        nop;
        temp$3 = 1;

     label9:
        nop;
        return temp$3;

     label10:
        nop;
        if toClass == null goto label11;

        goto label12;

     label11:
        nop;
        temp$4 = 0;
        return temp$4;

     label12:
        nop;
        temp$5 = virtualinvoke toClass.<java.lang.Class: boolean equals(java.lang.Object)>(type);
        if temp$5 == 0 goto label14;

        goto label13;

     label13:
        nop;
        temp$6 = 1;
        return temp$6;

     label14:
        nop;
        temp$7 = type instanceof java.lang.Class;
        if temp$7 == 0 goto label16;

        goto label15;

     label15:
        nop;
        temp$8 = (java.lang.Class) type;
        temp$9 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(temp$8, toClass);
        return temp$9;

     label16:
        nop;
        temp$10 = type instanceof java.lang.reflect.ParameterizedType;
        if temp$10 == 0 goto label18;

        goto label17;

     label17:
        nop;
        temp$11 = (java.lang.reflect.ParameterizedType) type;
        temp$12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(temp$11);
        temp$13 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(temp$12, toClass);
        return temp$13;

     label18:
        nop;
        temp$14 = type instanceof java.lang.reflect.TypeVariable;
        if temp$14 == 0 goto label24;

        goto label19;

     label19:
        nop;
        temp$15 = (java.lang.reflect.TypeVariable) type;
        temp$16 = interfaceinvoke temp$15.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
        temp$17 = 0;

     label20:
        nop;
        temp$18 = lengthof temp$16;
        if temp$17 >= temp$18 goto label23;

        temp$19 = temp$16[temp$17];
        bound = temp$19;
        temp$20 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(bound, toClass);
        if temp$20 == 0 goto label22;

        goto label21;

     label21:
        nop;
        temp$21 = 1;
        return temp$21;

     label22:
        nop;
        nop;
        temp$17 = temp$17 + 1;
        goto label20;

     label23:
        nop;
        temp$22 = 0;
        return temp$22;

     label24:
        nop;
        temp$23 = type instanceof java.lang.reflect.GenericArrayType;
        if temp$23 == 0 goto label33;

        goto label25;

     label25:
        nop;
        temp$25 = <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class class$java$lang$Object>;
        if temp$25 != null goto label26;

        temp$26 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class class$(java.lang.String)>("java.lang.Object");
        <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class class$java$lang$Object> = temp$26;
        temp$24 = temp$26;
        goto label27;

     label26:
        nop;
        temp$24 = <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class class$java$lang$Object>;

     label27:
        nop;
        temp$27 = virtualinvoke toClass.<java.lang.Class: boolean equals(java.lang.Object)>(temp$24);
        if temp$27 == 0 goto label28;

        goto label31;

     label28:
        nop;
        temp$28 = virtualinvoke toClass.<java.lang.Class: boolean isArray()>();
        if temp$28 == 0 goto label30;

        goto label29;

     label29:
        nop;
        temp$29 = (java.lang.reflect.GenericArrayType) type;
        temp$30 = interfaceinvoke temp$29.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
        temp$31 = virtualinvoke toClass.<java.lang.Class: java.lang.Class getComponentType()>();
        temp$32 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(temp$30, temp$31);
        if temp$32 == 0 goto label30;

        goto label31;

        goto label31;

        goto label30;

     label30:
        nop;
        temp$33 = 0;
        goto label32;

     label31:
        nop;
        temp$33 = 1;

     label32:
        nop;
        return temp$33;

     label33:
        nop;
        temp$34 = type instanceof java.lang.reflect.WildcardType;
        if temp$34 == 0 goto label35;

        goto label34;

     label34:
        nop;
        temp$35 = 0;
        return temp$35;

     label35:
        nop;
        temp$36 = new java.lang.IllegalStateException;
        temp$37 = new java.lang.StringBuffer;
        specialinvoke temp$37.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("found an unhandled type: ");
        virtualinvoke temp$37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(type);
        temp$38 = virtualinvoke temp$37.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$36.<java.lang.IllegalStateException: void <init>(java.lang.String)>(temp$38);
        throw temp$36;
    }
}
