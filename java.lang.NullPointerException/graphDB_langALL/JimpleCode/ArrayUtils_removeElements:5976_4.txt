public class WrapClass 
{
    public static transient boolean[] removeElements(boolean[], boolean[])
    {
        boolean[] array, values, temp$2, temp$30;
        boolean temp$0, temp$1, v, temp$6, temp$16, temp$23;
        java.util.HashMap occurrences, temp$3;
        int temp$4, temp$5, found, i, ct, temp$22, temp$24, temp$25, temp$26, temp$27, temp$28;
        java.lang.Boolean boxed, temp$7, v, temp$19;
        org.apache.commons.lang3.mutable.MutableInt count, temp$9, temp$10, temp$12, temp$21;
        java.lang.Object temp$8, temp$11, temp$17, temp$18, temp$20, temp$29;
        java.util.BitSet toRemove;
        java.util.Set temp$13, temp$14;
        java.util.Iterator temp$15;
        java.util.Map$Entry e;

        array := @parameter0: boolean[];
        values := @parameter1: boolean[];
        temp$0 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(array);
        if temp$0 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(values);
        if temp$1 == 0 goto label2;

        goto label1;

        goto label2;

     label1:
        nop;
        temp$2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] clone(boolean[])>(array);
        return temp$2;

     label2:
        nop;
        temp$3 = new java.util.HashMap;
        specialinvoke temp$3.<java.util.HashMap: void <init>(int)>(2);
        occurrences = temp$3;
        temp$4 = 0;

     label3:
        nop;
        temp$5 = lengthof values;
        if temp$4 >= temp$5 goto label7;

        temp$6 = values[temp$4];
        v = temp$6;
        temp$7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v);
        boxed = temp$7;
        temp$8 = virtualinvoke occurrences.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(boxed);
        temp$9 = (org.apache.commons.lang3.mutable.MutableInt) temp$8;
        count = temp$9;
        if count == null goto label4;

        goto label5;

     label4:
        nop;
        temp$10 = new org.apache.commons.lang3.mutable.MutableInt;
        specialinvoke temp$10.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);
        temp$11 = virtualinvoke occurrences.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(boxed, temp$10);
        temp$12 = (org.apache.commons.lang3.mutable.MutableInt) temp$11;
        goto label6;

     label5:
        nop;
        virtualinvoke count.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();

     label6:
        nop;
        nop;
        temp$4 = temp$4 + 1;
        goto label3;

     label7:
        nop;
        toRemove = null;
        temp$13 = virtualinvoke occurrences.<java.util.HashMap: java.util.Set entrySet()>();
        temp$14 = (java.util.Set) temp$13;
        temp$15 = interfaceinvoke temp$14.<java.lang.Iterable: java.util.Iterator iterator()>();

     label8:
        nop;
        temp$16 = interfaceinvoke temp$15.<java.util.Iterator: boolean hasNext()>();
        if temp$16 == 0 goto label14;

        temp$17 = interfaceinvoke temp$15.<java.util.Iterator: java.lang.Object next()>();
        e = (java.util.Map$Entry) temp$17;
        temp$18 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();
        temp$19 = (java.lang.Boolean) temp$18;
        v = temp$19;
        found = 0;
        i = 0;
        temp$20 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();
        temp$21 = (org.apache.commons.lang3.mutable.MutableInt) temp$20;
        temp$22 = virtualinvoke temp$21.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();
        ct = temp$22;

     label9:
        nop;
        if i < ct goto label10;

        goto label13;

     label10:
        nop;
        temp$23 = virtualinvoke v.<java.lang.Boolean: boolean booleanValue()>();
        temp$24 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>(array, temp$23, found);
        found = temp$24;
        if found < 0 goto label11;

        goto label12;

     label11:
        nop;
        goto label13;

     label12:
        nop;
        temp$25 = found;
        temp$26 = temp$25 + 1;
        found = temp$26;
        virtualinvoke toRemove.<java.util.BitSet: void set(int)>(temp$25);
        nop;
        temp$27 = i;
        temp$28 = temp$27 + 1;
        i = temp$28;
        goto label9;

     label13:
        nop;
        nop;
        goto label8;

     label14:
        nop;
        temp$29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(array, toRemove);
        temp$30 = (boolean[]) temp$29;
        return temp$30;
    }
}
