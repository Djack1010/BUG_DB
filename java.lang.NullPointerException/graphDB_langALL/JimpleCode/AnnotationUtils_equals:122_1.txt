public class WrapClass 
{
    public static boolean equals(java.lang.annotation.Annotation, java.lang.annotation.Annotation)
    {
        java.lang.annotation.Annotation a1, a2;
        boolean temp$0, temp$1, temp$10, temp$11, temp$19, temp$25, temp$26, temp$27, temp$28, temp$29;
        java.lang.Class type, temp$2, type2, temp$3, temp$6, temp$9, temp$18, temp$24;
        java.lang.Object[] temp$4, temp$7, temp$20, temp$22;
        java.lang.Object temp$5, temp$8, v1, temp$21, v2, temp$23;
        java.lang.reflect.Method[] temp$12;
        int temp$13, temp$14, temp$17;
        java.lang.reflect.Method m, temp$15;
        java.lang.Class[] temp$16;
        java.lang.IllegalAccessException ex;
        java.lang.reflect.InvocationTargetException ex;

        a1 := @parameter0: java.lang.annotation.Annotation;
        a2 := @parameter1: java.lang.annotation.Annotation;
        if a1 == a2 goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = 1;
        return temp$0;

     label1:
        nop;
        if a1 == null goto label2;

        goto label3;

     label2:
        nop;
        temp$1 = 0;
        return temp$1;

     label3:
        nop;
        temp$2 = interfaceinvoke a1.<java.lang.annotation.Annotation: java.lang.Class annotationType()>();
        type = temp$2;
        temp$3 = interfaceinvoke a2.<java.lang.annotation.Annotation: java.lang.Class annotationType()>();
        type2 = temp$3;
        temp$4 = newarray (java.lang.Object)[1];
        temp$4[0] = a1;
        temp$5 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(type, "Annotation %s with null annotationType()", temp$4);
        temp$6 = (java.lang.Class) temp$5;
        temp$7 = newarray (java.lang.Object)[1];
        temp$7[0] = a2;
        temp$8 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(type2, "Annotation %s with null annotationType()", temp$7);
        temp$9 = (java.lang.Class) temp$8;
        temp$10 = virtualinvoke type.<java.lang.Class: boolean equals(java.lang.Object)>(type2);
        if temp$10 == 0 goto label4;

        goto label5;

     label4:
        nop;
        temp$11 = 0;
        return temp$11;

     label5:
        nop;

     label6:
        nop;
        temp$12 = virtualinvoke type.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
        temp$13 = 0;

     label7:
        nop;
        temp$14 = lengthof temp$12;
        if temp$13 >= temp$14 goto label14;

        temp$15 = temp$12[temp$13];
        m = temp$15;
        temp$16 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        temp$17 = lengthof temp$16;
        if temp$17 == 0 goto label8;

        goto label13;

     label8:
        nop;
        temp$18 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        temp$19 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean isValidAnnotationMemberType(java.lang.Class)>(temp$18);
        if temp$19 == 0 goto label13;

        goto label9;

        goto label9;

     label9:
        nop;
        temp$20 = newarray (java.lang.Object)[0];
        temp$21 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(a1, temp$20);
        v1 = temp$21;
        temp$22 = newarray (java.lang.Object)[0];
        temp$23 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(a2, temp$22);
        v2 = temp$23;
        temp$24 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        temp$25 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)>(temp$24, v1, v2);
        if temp$25 == 0 goto label10;

        goto label12;

     label10:
        nop;
        temp$26 = 0;

     label11:
        nop;
        return temp$26;

     label12:
        nop;

     label13:
        nop;
        nop;
        temp$13 = temp$13 + 1;
        goto label7;

     label14:
        nop;
        goto label17;

     label15:
        nop;
        ex := @caughtexception;
        temp$27 = 0;
        nop;
        return temp$27;

     label16:
        nop;
        ex := @caughtexception;
        temp$28 = 0;
        nop;
        return temp$28;

     label17:
        nop;
        temp$29 = 1;
        return temp$29;

        catch java.lang.IllegalAccessException from label6 to label11 with label15;
        catch java.lang.IllegalAccessException from label12 to label15 with label15;
        catch java.lang.reflect.InvocationTargetException from label6 to label11 with label16;
        catch java.lang.reflect.InvocationTargetException from label12 to label15 with label16;
    }
}
