public class WrapClass 
{
    private static final java.lang.String typeVariableToString(java.lang.reflect.TypeVariable)
    {
        java.lang.reflect.TypeVariable v;
        java.lang.StringBuilder buf, temp$10, temp$12;
        java.lang.reflect.Type[] bounds, temp$0, temp$6, temp$11;
        int temp$1, temp$2, temp$7;
        java.lang.Class temp$3, temp$4, temp$5;
        java.lang.reflect.Type temp$8;
        boolean temp$9;
        java.lang.String temp$13;

        v := @parameter0: java.lang.reflect.TypeVariable;
        buf = null;
        temp$0 = interfaceinvoke v.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
        bounds = temp$0;
        temp$1 = lengthof bounds;
        if temp$1 > 0 goto label0;

        goto label5;

     label0:
        nop;
        temp$2 = lengthof bounds;
        if temp$2 == 1 goto label1;

        goto label4;

     label1:
        nop;
        temp$4 = <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class class$java$lang$Object>;
        if temp$4 != null goto label2;

        temp$5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class class$(java.lang.String)>("java.lang.Object");
        <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class class$java$lang$Object> = temp$5;
        temp$3 = temp$5;
        goto label3;

     label2:
        nop;
        temp$3 = <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class class$java$lang$Object>;

     label3:
        nop;
        temp$6 = bounds;
        temp$7 = 0;
        temp$8 = temp$6[temp$7];
        temp$9 = virtualinvoke temp$3.<java.lang.Class: boolean equals(java.lang.Object)>(temp$8);
        if temp$9 == 0 goto label4;

        goto label5;

        goto label5;

        goto label4;

     label4:
        nop;
        temp$10 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" extends ");
        temp$11 = interfaceinvoke v.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
        temp$12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.StringBuilder appendAllTo(java.lang.StringBuilder,java.lang.String,java.lang.reflect.Type[])>(buf, " & ", temp$11);

     label5:
        nop;
        temp$13 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.String toString()>();
        return temp$13;
    }
}
