public class WrapClass 
{
    public boolean isEncodeEquals(java.lang.String, java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder this;
        java.lang.String name1, name2, temp$0, temp$3, temp$5, temp$13, temp$14, temp$15, temp$16, temp$17, temp$18, temp$19, temp$20;
        boolean temp$1, temp$2, temp$4, temp$6, temp$7, temp$10, temp$11, temp$12, temp$25, temp$33;
        int temp$8, temp$9, temp$21, temp$22, temp$23, temp$24, sumLength, temp$26, temp$27, temp$28, temp$29, temp$30, minRating, temp$31, count, temp$32;

        this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;
        name1 := @parameter0: java.lang.String;
        name2 := @parameter1: java.lang.String;
        temp$0 = <org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String SPACE>;
        temp$1 = virtualinvoke temp$0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(name1);
        if temp$1 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$2 = 0;
        return temp$2;

     label1:
        nop;
        if name2 == null goto label4;

        goto label2;

     label2:
        nop;
        temp$3 = <org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String EMPTY>;
        temp$4 = virtualinvoke temp$3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(name2);
        if temp$4 == 0 goto label3;

        goto label4;

        goto label3;

     label3:
        nop;
        temp$5 = <org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String SPACE>;
        temp$6 = virtualinvoke temp$5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(name2);
        if temp$6 == 0 goto label5;

        goto label4;

        goto label5;

     label4:
        nop;
        temp$7 = 0;
        return temp$7;

     label5:
        nop;
        temp$8 = virtualinvoke name1.<java.lang.String: int length()>();
        if temp$8 == 1 goto label7;

        goto label6;

     label6:
        nop;
        temp$9 = virtualinvoke name2.<java.lang.String: int length()>();
        if temp$9 == 1 goto label7;

        goto label8;

        goto label8;

     label7:
        nop;
        temp$10 = 0;
        return temp$10;

     label8:
        nop;
        temp$11 = virtualinvoke name1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(name2);
        if temp$11 == 0 goto label10;

        goto label9;

     label9:
        nop;
        temp$12 = 1;
        return temp$12;

     label10:
        nop;
        temp$13 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String cleanName(java.lang.String)>(name1);
        name1 = temp$13;
        temp$14 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String cleanName(java.lang.String)>(name2);
        name2 = temp$14;
        temp$15 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>(name1);
        name1 = temp$15;
        temp$16 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>(name2);
        name2 = temp$16;
        temp$17 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>(name1);
        name1 = temp$17;
        temp$18 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>(name2);
        name2 = temp$18;
        temp$19 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>(name1);
        name1 = temp$19;
        temp$20 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>(name2);
        name2 = temp$20;
        temp$21 = virtualinvoke name1.<java.lang.String: int length()>();
        temp$22 = virtualinvoke name2.<java.lang.String: int length()>();
        temp$23 = temp$21 - temp$22;
        temp$24 = staticinvoke <java.lang.Math: int abs(int)>(temp$23);
        if temp$24 >= 3 goto label11;

        goto label12;

     label11:
        nop;
        temp$25 = 0;
        return temp$25;

     label12:
        nop;
        temp$26 = virtualinvoke name1.<java.lang.String: int length()>();
        temp$27 = temp$26;
        temp$28 = virtualinvoke name2.<java.lang.String: int length()>();
        temp$29 = temp$27 + temp$28;
        temp$30 = staticinvoke <java.lang.Math: int abs(int)>(temp$29);
        sumLength = temp$30;
        minRating = 0;
        temp$31 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(sumLength);
        minRating = temp$31;
        temp$32 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String)>(name1, name2);
        count = temp$32;
        if count >= minRating goto label14;

        goto label13;

     label13:
        nop;
        temp$33 = 0;
        goto label15;

     label14:
        nop;
        temp$33 = 1;

     label15:
        nop;
        return temp$33;
    }
}
