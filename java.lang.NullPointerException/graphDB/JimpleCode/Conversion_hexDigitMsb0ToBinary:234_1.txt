public class WrapClass 
{
    public static boolean[] hexDigitMsb0ToBinary(char)
    {
        char hexDigit;
        boolean[] temp$0, temp$2, temp$3, temp$5, temp$6, temp$8, temp$9, temp$11, temp$12, temp$14, temp$15, temp$17, temp$18, temp$20, temp$21, temp$23, temp$24, temp$26, temp$27, temp$29, temp$30, temp$32, temp$33, temp$35, temp$36, temp$38, temp$39, temp$41, temp$42, temp$43, temp$45;
        java.lang.Object temp$1, temp$4, temp$7, temp$10, temp$13, temp$16, temp$19, temp$22, temp$25, temp$28, temp$31, temp$34, temp$37, temp$40, temp$44;
        java.lang.IllegalArgumentException temp$46;
        java.lang.StringBuffer temp$47;
        java.lang.String temp$48;

        hexDigit := @parameter0: char;
        goto label23;

     label0:
        nop;
        temp$0 = <org.apache.commons.lang3.Conversion: boolean[] FFFF>;
        temp$1 = virtualinvoke temp$0.<java.lang.Object: java.lang.Object clone()>();
        temp$2 = (boolean[]) temp$1;
        return temp$2;

     label1:
        nop;
        temp$3 = <org.apache.commons.lang3.Conversion: boolean[] FFFT>;
        temp$4 = virtualinvoke temp$3.<java.lang.Object: java.lang.Object clone()>();
        temp$5 = (boolean[]) temp$4;
        return temp$5;

     label2:
        nop;
        temp$6 = <org.apache.commons.lang3.Conversion: boolean[] FFTF>;
        temp$7 = virtualinvoke temp$6.<java.lang.Object: java.lang.Object clone()>();
        temp$8 = (boolean[]) temp$7;
        return temp$8;

     label3:
        nop;
        temp$9 = <org.apache.commons.lang3.Conversion: boolean[] FFTT>;
        temp$10 = virtualinvoke temp$9.<java.lang.Object: java.lang.Object clone()>();
        temp$11 = (boolean[]) temp$10;
        return temp$11;

     label4:
        nop;
        temp$12 = <org.apache.commons.lang3.Conversion: boolean[] FTFF>;
        temp$13 = virtualinvoke temp$12.<java.lang.Object: java.lang.Object clone()>();
        temp$14 = (boolean[]) temp$13;
        return temp$14;

     label5:
        nop;
        temp$15 = <org.apache.commons.lang3.Conversion: boolean[] FTFT>;
        temp$16 = virtualinvoke temp$15.<java.lang.Object: java.lang.Object clone()>();
        temp$17 = (boolean[]) temp$16;
        return temp$17;

     label6:
        nop;
        temp$18 = <org.apache.commons.lang3.Conversion: boolean[] FTTF>;
        temp$19 = virtualinvoke temp$18.<java.lang.Object: java.lang.Object clone()>();
        temp$20 = (boolean[]) temp$19;
        return temp$20;

     label7:
        nop;
        temp$21 = <org.apache.commons.lang3.Conversion: boolean[] FTTT>;
        temp$22 = virtualinvoke temp$21.<java.lang.Object: java.lang.Object clone()>();
        temp$23 = (boolean[]) temp$22;
        return temp$23;

     label8:
        nop;
        temp$24 = <org.apache.commons.lang3.Conversion: boolean[] TFFF>;
        temp$25 = virtualinvoke temp$24.<java.lang.Object: java.lang.Object clone()>();
        temp$26 = (boolean[]) temp$25;
        return temp$26;

     label9:
        nop;
        temp$27 = <org.apache.commons.lang3.Conversion: boolean[] TFFT>;
        temp$28 = virtualinvoke temp$27.<java.lang.Object: java.lang.Object clone()>();
        temp$29 = (boolean[]) temp$28;
        return temp$29;

     label10:
        nop;

     label11:
        nop;
        temp$30 = <org.apache.commons.lang3.Conversion: boolean[] TFTF>;
        temp$31 = virtualinvoke temp$30.<java.lang.Object: java.lang.Object clone()>();
        temp$32 = (boolean[]) temp$31;
        return temp$32;

     label12:
        nop;

     label13:
        nop;
        temp$33 = <org.apache.commons.lang3.Conversion: boolean[] TFTT>;
        temp$34 = virtualinvoke temp$33.<java.lang.Object: java.lang.Object clone()>();
        temp$35 = (boolean[]) temp$34;
        return temp$35;

     label14:
        nop;

     label15:
        nop;
        temp$36 = <org.apache.commons.lang3.Conversion: boolean[] TTFF>;
        temp$37 = virtualinvoke temp$36.<java.lang.Object: java.lang.Object clone()>();
        temp$38 = (boolean[]) temp$37;
        return temp$38;

     label16:
        nop;

     label17:
        nop;
        temp$39 = <org.apache.commons.lang3.Conversion: boolean[] TTFT>;
        temp$40 = virtualinvoke temp$39.<java.lang.Object: java.lang.Object clone()>();
        temp$41 = (boolean[]) temp$40;
        return temp$41;

     label18:
        nop;

     label19:
        nop;
        temp$42 = null;
        return temp$42;

     label20:
        nop;

     label21:
        nop;
        temp$43 = <org.apache.commons.lang3.Conversion: boolean[] TTTT>;
        temp$44 = virtualinvoke temp$43.<java.lang.Object: java.lang.Object clone()>();
        temp$45 = (boolean[]) temp$44;
        return temp$45;

     label22:
        nop;
        temp$46 = new java.lang.IllegalArgumentException;
        temp$47 = new java.lang.StringBuffer;
        specialinvoke temp$47.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Cannot interpret \'");
        virtualinvoke temp$47.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(hexDigit);
        virtualinvoke temp$47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("\' as a hexadecimal digit");
        temp$48 = virtualinvoke temp$47.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$46.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(temp$48);
        throw temp$46;

     label23:
        nop;
        nop;
        lookupswitch(hexDigit)
        {
            case 48: goto label0;
            case 49: goto label1;
            case 50: goto label2;
            case 51: goto label3;
            case 52: goto label4;
            case 53: goto label5;
            case 54: goto label6;
            case 55: goto label7;
            case 56: goto label8;
            case 57: goto label9;
            case 65: goto label11;
            case 66: goto label13;
            case 67: goto label15;
            case 68: goto label17;
            case 69: goto label19;
            case 70: goto label21;
            case 97: goto label10;
            case 98: goto label12;
            case 99: goto label14;
            case 100: goto label16;
            case 101: goto label18;
            case 102: goto label20;
            default: goto label22;
        };

        nop;
    }
}
