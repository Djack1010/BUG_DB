public class WrapClass 
{
    public static java.util.Set getOverrideHierarchy(java.lang.reflect.Method, org.apache.commons.lang3.ClassUtils$Interfaces)
    {
        java.lang.reflect.Method method, temp$1, m, temp$12;
        org.apache.commons.lang3.ClassUtils$Interfaces interfacesBehavior;
        java.lang.Object temp$0, temp$6, temp$9;
        java.util.Set result;
        java.util.LinkedHashSet temp$2;
        boolean temp$3, temp$8, temp$14, temp$15, temp$29, temp$32;
        java.lang.Class[] parameterTypes, temp$4, temp$13;
        java.lang.Class declaringClass, temp$5, temp$7, c, temp$10, temp$16;
        java.util.Iterator hierarchy;
        java.lang.String temp$11;
        java.util.Map typeArguments, temp$17;
        int i, temp$18, temp$21, temp$26, temp$30, temp$31;
        java.lang.reflect.Type childType, temp$22, temp$23, parentType, temp$27, temp$28;
        java.lang.reflect.Type[] temp$19, temp$20, temp$24, temp$25;

        method := @parameter0: java.lang.reflect.Method;
        interfacesBehavior := @parameter1: org.apache.commons.lang3.ClassUtils$Interfaces;
        temp$0 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object)>(method);
        temp$1 = (java.lang.reflect.Method) temp$0;
        temp$2 = new java.util.LinkedHashSet;
        specialinvoke temp$2.<java.util.LinkedHashSet: void <init>()>();
        result = temp$2;
        temp$3 = interfaceinvoke result.<java.util.Set: boolean add(java.lang.Object)>(method);
        temp$4 = virtualinvoke method.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        parameterTypes = temp$4;
        temp$5 = virtualinvoke method.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
        declaringClass = temp$5;
        hierarchy = null;
        temp$6 = interfaceinvoke hierarchy.<java.util.Iterator: java.lang.Object next()>();
        temp$7 = (java.lang.Class) temp$6;
        nop;

     label0:
        nop;
        temp$8 = interfaceinvoke hierarchy.<java.util.Iterator: boolean hasNext()>();
        if temp$8 == 0 goto label11;

        goto label1;

     label1:
        nop;
        temp$9 = interfaceinvoke hierarchy.<java.util.Iterator: java.lang.Object next()>();
        temp$10 = (java.lang.Class) temp$9;
        c = temp$10;
        temp$11 = virtualinvoke method.<java.lang.reflect.Method: java.lang.String getName()>();
        temp$12 = staticinvoke <org.apache.commons.lang3.reflect.MethodUtils: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(c, temp$11, parameterTypes);
        m = temp$12;
        if m == null goto label2;

        goto label3;

     label2:
        nop;
        goto label0;

     label3:
        nop;
        temp$13 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        temp$14 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(temp$13, parameterTypes);
        if temp$14 == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$15 = interfaceinvoke result.<java.util.Set: boolean add(java.lang.Object)>(m);
        goto label0;

     label5:
        nop;
        temp$16 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
        temp$17 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)>(declaringClass, temp$16);
        typeArguments = temp$17;
        i = 0;

     label6:
        nop;
        temp$18 = lengthof parameterTypes;
        if i < temp$18 goto label7;

        goto label10;

     label7:
        nop;
        temp$19 = virtualinvoke method.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();
        temp$20 = temp$19;
        temp$21 = i;
        temp$22 = temp$20[temp$21];
        temp$23 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)>(typeArguments, temp$22);
        childType = temp$23;
        temp$24 = virtualinvoke m.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();
        temp$25 = temp$24;
        temp$26 = i;
        temp$27 = temp$25[temp$26];
        temp$28 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)>(typeArguments, temp$27);
        parentType = temp$28;
        temp$29 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)>(childType, parentType);
        if temp$29 == 0 goto label8;

        goto label9;

     label8:
        nop;
        goto label0;

     label9:
        nop;
        nop;
        temp$30 = i;
        temp$31 = temp$30 + 1;
        i = temp$31;
        goto label6;

     label10:
        nop;
        temp$32 = interfaceinvoke result.<java.util.Set: boolean add(java.lang.Object)>(m);
        goto label0;

     label11:
        nop;
        nop;
        return result;
    }
}
