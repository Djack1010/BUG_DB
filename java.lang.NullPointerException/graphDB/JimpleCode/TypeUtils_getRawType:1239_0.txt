public class WrapClass 
{
    private static final java.lang.Class getRawType(java.lang.reflect.ParameterizedType)
    {
        java.lang.reflect.ParameterizedType parameterizedType;
        java.lang.reflect.Type rawType, temp$0;
        boolean temp$1;
        java.lang.IllegalStateException temp$2;
        java.lang.StringBuffer temp$3;
        java.lang.String temp$4;
        java.lang.Class temp$5;

        parameterizedType := @parameter0: java.lang.reflect.ParameterizedType;
        temp$0 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
        rawType = temp$0;
        temp$1 = rawType instanceof java.lang.Class;
        if temp$1 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = new java.lang.IllegalStateException;
        temp$3 = new java.lang.StringBuffer;
        specialinvoke temp$3.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Wait... What!? Type of rawType: ");
        virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(rawType);
        temp$4 = virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(temp$4);
        throw temp$2;

     label1:
        nop;
        temp$5 = (java.lang.Class) rawType;
        return temp$5;
    }
}
