public class WrapClass 
{
    private static final transient java.lang.String prependIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[])
    {
        java.lang.String str, temp$7, temp$8;
        java.lang.CharSequence prefix, p, temp$4;
        boolean ignoreCase, temp$0, temp$5;
        java.lang.CharSequence[] prefixes;
        int temp$1, temp$2, temp$3;
        java.lang.StringBuffer temp$6;

        str := @parameter0: java.lang.String;
        prefix := @parameter1: java.lang.CharSequence;
        ignoreCase := @parameter2: boolean;
        prefixes := @parameter3: java.lang.CharSequence[];
        if str == null goto label1;

        goto label0;

     label0:
        nop;
        temp$0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(str, prefix, ignoreCase);
        if temp$0 == 0 goto label2;

        goto label1;

        goto label2;

     label1:
        nop;
        return str;

     label2:
        nop;
        if prefixes != null goto label3;

        goto label9;

     label3:
        nop;
        temp$1 = lengthof prefixes;
        if temp$1 > 0 goto label4;

        goto label9;

        goto label4;

     label4:
        nop;
        temp$2 = 0;

     label5:
        nop;
        temp$3 = lengthof prefixes;
        if temp$2 >= temp$3 goto label8;

        temp$4 = prefixes[temp$2];
        p = temp$4;
        temp$5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(str, p, ignoreCase);
        if temp$5 == 0 goto label7;

        goto label6;

     label6:
        nop;
        return str;

     label7:
        nop;
        nop;
        temp$2 = temp$2 + 1;
        goto label5;

     label8:
        nop;

     label9:
        nop;
        temp$6 = new java.lang.StringBuffer;
        specialinvoke temp$6.<java.lang.StringBuffer: void <init>()>();
        temp$7 = interfaceinvoke prefix.<java.lang.CharSequence: java.lang.String toString()>();
        virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$7);
        virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(str);
        temp$8 = virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.String toString()>();
        return temp$8;
    }
}
