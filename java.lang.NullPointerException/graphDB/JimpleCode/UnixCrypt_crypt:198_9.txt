public class WrapClass 
{
    public static java.lang.String crypt(byte[], java.lang.String)
    {
        byte[] original, key, temp$25, temp$32, temp$35, b, temp$49, temp$54;
        java.lang.String salt, temp$11, temp$14, temp$74;
        java.util.Random randomGenerator, temp$0;
        int numSaltChars, temp$4, temp$5, temp$8, temp$9, eSwap0, eSwap1, temp$22, temp$23, i, temp$24, temp$26, temp$28, temp$29, i, temp$30, temp$31, iChar, temp$33, temp$36, temp$37, temp$39, temp$40, temp$44, temp$45, temp$47, temp$48, temp$50, i, y, u, j, c, temp$52, temp$53, temp$55, temp$57, temp$58, temp$59, temp$60, temp$61, temp$62, temp$63, temp$64, temp$65, temp$67, temp$68, temp$70, temp$71, temp$72, temp$73;
        char[] temp$1, temp$3, temp$7;
        java.lang.StringBuffer temp$2, temp$13;
        char temp$6, temp$10, charZero, temp$16, charOne, temp$17, temp$19, temp$21, temp$69;
        java.lang.IllegalArgumentException temp$12;
        java.lang.StringBuilder buffer, temp$15;
        int[] temp$18, temp$20, schedule, temp$41, out, temp$42, temp$43, temp$46, temp$66;
        byte temp$27, temp$34, temp$38, temp$51, temp$56;

        original := @parameter0: byte[];
        salt := @parameter1: java.lang.String;
        if salt == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = new java.util.Random;
        specialinvoke temp$0.<java.util.Random: void <init>()>();
        randomGenerator = temp$0;
        temp$1 = <org.apache.commons.codec.digest.UnixCrypt: char[] SALT_CHARS>;
        numSaltChars = lengthof temp$1;
        temp$2 = new java.lang.StringBuffer;
        specialinvoke temp$2.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("");
        temp$3 = <org.apache.commons.codec.digest.UnixCrypt: char[] SALT_CHARS>;
        temp$4 = virtualinvoke randomGenerator.<java.util.Random: int nextInt(int)>(numSaltChars);
        temp$5 = temp$4;
        temp$6 = temp$3[temp$5];
        virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(temp$6);
        temp$7 = <org.apache.commons.codec.digest.UnixCrypt: char[] SALT_CHARS>;
        temp$8 = virtualinvoke randomGenerator.<java.util.Random: int nextInt(int)>(numSaltChars);
        temp$9 = temp$8;
        temp$10 = temp$7[temp$9];
        virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(temp$10);
        temp$11 = virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.String toString()>();
        salt = temp$11;
        goto label2;

     label1:
        nop;
        temp$12 = new java.lang.IllegalArgumentException;
        temp$13 = new java.lang.StringBuffer;
        specialinvoke temp$13.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Invalid salt value: ");
        virtualinvoke temp$13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(salt);
        temp$14 = virtualinvoke temp$13.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(temp$14);
        throw temp$12;

     label2:
        nop;
        temp$15 = new java.lang.StringBuilder;
        specialinvoke temp$15.<java.lang.StringBuilder: void <init>(java.lang.String)>("             ");
        buffer = temp$15;
        temp$16 = virtualinvoke salt.<java.lang.String: char charAt(int)>(0);
        charZero = temp$16;
        temp$17 = virtualinvoke salt.<java.lang.String: char charAt(int)>(1);
        charOne = temp$17;
        virtualinvoke buffer.<java.lang.StringBuilder: void setCharAt(int,char)>(0, charZero);
        virtualinvoke buffer.<java.lang.StringBuilder: void setCharAt(int,char)>(1, charOne);
        temp$18 = <org.apache.commons.codec.digest.UnixCrypt: int[] CON_SALT>;
        temp$19 = charZero;
        eSwap0 = temp$18[temp$19];
        temp$20 = <org.apache.commons.codec.digest.UnixCrypt: int[] CON_SALT>;
        temp$21 = charOne;
        temp$22 = temp$20[temp$21];
        temp$23 = temp$22 << 4;
        eSwap1 = temp$23;
        key = newarray (byte)[8];
        i = 0;

     label3:
        nop;
        temp$24 = lengthof key;
        if i < temp$24 goto label4;

        goto label5;

     label4:
        nop;
        temp$25 = key;
        temp$26 = i;
        temp$27 = 0;
        temp$25[temp$26] = temp$27;
        nop;
        temp$28 = i;
        temp$29 = temp$28 + 1;
        i = temp$29;
        goto label3;

     label5:
        nop;
        i = 0;

     label6:
        nop;
        temp$30 = lengthof key;
        if i < temp$30 goto label7;

        goto label9;

     label7:
        nop;
        temp$31 = lengthof original;
        if i < temp$31 goto label8;

        goto label9;

        goto label8;

     label8:
        nop;
        temp$32 = original;
        temp$33 = i;
        temp$34 = temp$32[temp$33];
        iChar = (int) temp$34;
        temp$35 = key;
        temp$36 = i;
        temp$37 = iChar << 1;
        temp$38 = (byte) temp$37;
        temp$35[temp$36] = temp$38;
        nop;
        temp$39 = i;
        temp$40 = temp$39 + 1;
        i = temp$40;
        goto label6;

     label9:
        nop;
        temp$41 = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int[] desSetKey(byte[])>(key);
        schedule = temp$41;
        temp$42 = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int[] body(int[],int,int)>(schedule, eSwap0, eSwap1);
        out = temp$42;
        b = newarray (byte)[9];
        temp$43 = out;
        temp$44 = 0;
        temp$45 = temp$43[temp$44];
        staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void intToFourBytes(int,byte[],int)>(temp$45, b, 0);
        temp$46 = out;
        temp$47 = 1;
        temp$48 = temp$46[temp$47];
        staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void intToFourBytes(int,byte[],int)>(temp$48, b, 4);
        temp$49 = b;
        temp$50 = 8;
        temp$51 = 0;
        temp$49[temp$50] = temp$51;
        i = 2;
        y = 0;
        u = 128;

     label10:
        nop;
        if i < 13 goto label11;

        goto label19;

     label11:
        nop;
        j = 0;
        c = 0;

     label12:
        nop;
        if j < 6 goto label13;

        goto label18;

     label13:
        nop;
        temp$52 = c;
        temp$53 = temp$52 << 1;
        c = temp$53;
        temp$54 = b;
        temp$55 = y;
        temp$56 = temp$54[temp$55];
        temp$57 = (int) temp$56;
        temp$58 = temp$57 & u;
        if temp$58 != 0 goto label14;

        goto label15;

     label14:
        nop;
        temp$59 = c;
        temp$60 = temp$59 | 1;
        c = temp$60;

     label15:
        nop;
        temp$61 = u;
        temp$62 = temp$61 >>> 1;
        u = temp$62;
        if u == 0 goto label16;

        goto label17;

     label16:
        nop;
        temp$63 = y;
        temp$64 = temp$63 + 1;
        y = temp$64;
        temp$65 = 128;
        u = temp$65;

     label17:
        nop;
        temp$66 = <org.apache.commons.codec.digest.UnixCrypt: int[] COV2CHAR>;
        temp$67 = c;
        temp$68 = temp$66[temp$67];
        temp$69 = (char) temp$68;
        virtualinvoke buffer.<java.lang.StringBuilder: void setCharAt(int,char)>(i, temp$69);
        nop;
        temp$70 = j;
        temp$71 = temp$70 + 1;
        j = temp$71;
        goto label12;

     label18:
        nop;
        nop;
        temp$72 = i;
        temp$73 = temp$72 + 1;
        i = temp$73;
        goto label10;

     label19:
        nop;
        temp$74 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>();
        return temp$74;
    }
}
