public class WrapClass 
{
    private static final void reflectionAppend(java.lang.Object, java.lang.Class, org.apache.commons.lang3.builder.HashCodeBuilder, boolean, java.lang.String[])
    {
        java.lang.Object object, fieldValue, temp$12;
        java.lang.Class clazz;
        org.apache.commons.lang3.builder.HashCodeBuilder builder, temp$13;
        boolean useTransients, temp$0, temp$5, temp$9, temp$11;
        java.lang.String[] excludeFields;
        java.lang.reflect.Field[] fields;
        int temp$1, temp$2, temp$7, temp$8, temp$10;
        java.lang.reflect.Field field, temp$3;
        java.lang.String temp$4, temp$6;
        java.lang.IllegalAccessException e;
        java.lang.InternalError temp$14;
        java.lang.Throwable temp$15;

        object := @parameter0: java.lang.Object;
        clazz := @parameter1: java.lang.Class;
        builder := @parameter2: org.apache.commons.lang3.builder.HashCodeBuilder;
        useTransients := @parameter3: boolean;
        excludeFields := @parameter4: java.lang.String[];
        temp$0 = staticinvoke <org.apache.commons.lang3.builder.HashCodeBuilder: boolean isRegistered(java.lang.Object)>(object);
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        return;

     label1:
        nop;

     label2:
        nop;
        staticinvoke <org.apache.commons.lang3.builder.HashCodeBuilder: void register(java.lang.Object)>(object);
        fields = null;
        staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>(fields, 1);
        temp$1 = 0;

     label3:
        nop;
        temp$2 = lengthof fields;
        if temp$1 >= temp$2 goto label13;

        temp$3 = fields[temp$1];
        field = temp$3;
        temp$4 = virtualinvoke field.<java.lang.reflect.Field: java.lang.String getName()>();
        temp$5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(excludeFields, temp$4);
        if temp$5 == 0 goto label4;

        goto label12;

     label4:
        nop;
        temp$6 = virtualinvoke field.<java.lang.reflect.Field: java.lang.String getName()>();
        temp$7 = virtualinvoke temp$6.<java.lang.String: int indexOf(int)>(36);
        if temp$7 == -1 goto label5;

        goto label12;

        goto label5;

     label5:
        nop;
        if useTransients == 0 goto label6;

        goto label7;

     label6:
        nop;
        temp$8 = virtualinvoke field.<java.lang.reflect.Field: int getModifiers()>();
        temp$9 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>(temp$8);
        if temp$9 == 0 goto label7;

        goto label12;

        goto label12;

        goto label7;

     label7:
        nop;
        temp$10 = virtualinvoke field.<java.lang.reflect.Field: int getModifiers()>();
        temp$11 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(temp$10);
        if temp$11 == 0 goto label8;

        goto label12;

        goto label8;

     label8:
        nop;

     label9:
        nop;
        temp$12 = virtualinvoke field.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(object);
        fieldValue = temp$12;
        temp$13 = virtualinvoke builder.<org.apache.commons.lang3.builder.HashCodeBuilder: org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)>(fieldValue);
        goto label11;

     label10:
        nop;
        e := @caughtexception;
        temp$14 = new java.lang.InternalError;
        specialinvoke temp$14.<java.lang.InternalError: void <init>(java.lang.String)>("Unexpected IllegalAccessException");
        throw temp$14;

     label11:
        nop;

     label12:
        nop;
        nop;
        temp$1 = temp$1 + 1;
        goto label3;

     label13:
        nop;
        staticinvoke <org.apache.commons.lang3.builder.HashCodeBuilder: void unregister(java.lang.Object)>(object);
        goto label15;

     label14:
        nop;
        temp$15 := @caughtexception;
        staticinvoke <org.apache.commons.lang3.builder.HashCodeBuilder: void unregister(java.lang.Object)>(object);
        throw temp$15;

     label15:
        nop;
        return;

        catch java.lang.IllegalAccessException from label9 to label10 with label10;
        catch java.lang.Throwable from label2 to label14 with label14;
    }
}
