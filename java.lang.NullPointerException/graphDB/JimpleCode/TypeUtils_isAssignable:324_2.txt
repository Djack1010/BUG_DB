public class WrapClass 
{
    private static final boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map)
    {
        java.lang.reflect.Type type, toType;
        java.util.Map typeVarAssigns;
        boolean temp$0, temp$1, temp$2, temp$4, temp$5, temp$7, temp$8, temp$10, temp$11, temp$13;
        java.lang.reflect.ParameterizedType temp$3;
        java.lang.reflect.GenericArrayType temp$6;
        java.lang.reflect.WildcardType temp$9;
        java.lang.reflect.TypeVariable temp$12;
        java.lang.IllegalStateException temp$14;
        java.lang.StringBuffer temp$15;
        java.lang.String temp$16;

        type := @parameter0: java.lang.reflect.Type;
        toType := @parameter1: java.lang.reflect.Type;
        typeVarAssigns := @parameter2: java.util.Map;
        if toType == null goto label1;

        goto label0;

     label0:
        nop;
        temp$0 = toType instanceof java.lang.Class;
        if temp$0 == 0 goto label2;

        goto label1;

        goto label2;

     label1:
        nop;
        temp$1 = 0;
        return temp$1;

     label2:
        nop;
        temp$2 = toType instanceof java.lang.reflect.ParameterizedType;
        if temp$2 == 0 goto label4;

        goto label3;

     label3:
        nop;
        temp$3 = (java.lang.reflect.ParameterizedType) toType;
        temp$4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)>(type, temp$3, typeVarAssigns);
        return temp$4;

     label4:
        nop;
        temp$5 = toType instanceof java.lang.reflect.GenericArrayType;
        if temp$5 == 0 goto label6;

        goto label5;

     label5:
        nop;
        temp$6 = (java.lang.reflect.GenericArrayType) toType;
        temp$7 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.GenericArrayType,java.util.Map)>(type, temp$6, typeVarAssigns);
        return temp$7;

     label6:
        nop;
        temp$8 = toType instanceof java.lang.reflect.WildcardType;
        if temp$8 == 0 goto label8;

        goto label7;

     label7:
        nop;
        temp$9 = (java.lang.reflect.WildcardType) toType;
        temp$10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.WildcardType,java.util.Map)>(type, temp$9, typeVarAssigns);
        return temp$10;

     label8:
        nop;
        temp$11 = toType instanceof java.lang.reflect.TypeVariable;
        if temp$11 == 0 goto label10;

        goto label9;

     label9:
        nop;
        temp$12 = (java.lang.reflect.TypeVariable) toType;
        temp$13 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.util.Map)>(type, temp$12, typeVarAssigns);
        return temp$13;

     label10:
        nop;
        temp$14 = new java.lang.IllegalStateException;
        temp$15 = new java.lang.StringBuffer;
        specialinvoke temp$15.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("found an unhandled type: ");
        virtualinvoke temp$15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(toType);
        temp$16 = virtualinvoke temp$15.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$14.<java.lang.IllegalStateException: void <init>(java.lang.String)>(temp$16);
        throw temp$14;
    }
}
