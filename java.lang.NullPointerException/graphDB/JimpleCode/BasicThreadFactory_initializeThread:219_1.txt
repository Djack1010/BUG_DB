public class WrapClass 
{
    private final void initializeThread(java.lang.Thread)
    {
        org.apache.commons.lang3.concurrent.BasicThreadFactory this;
        java.lang.Thread t;
        java.lang.String temp$0, temp$4, temp$6;
        java.lang.Long count, temp$3;
        java.util.concurrent.atomic.AtomicLong temp$1;
        long temp$2;
        java.lang.Object[] temp$5;
        java.lang.Thread$UncaughtExceptionHandler temp$7, temp$8;
        java.lang.Integer temp$9, temp$10;
        int temp$11;
        java.lang.Boolean temp$12;
        boolean temp$13;

        this := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory;
        t := @parameter0: java.lang.Thread;
        temp$0 = virtualinvoke this.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.String getNamingPattern()>();
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = this.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.util.concurrent.atomic.AtomicLong threadCounter>;
        temp$2 = virtualinvoke temp$1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();
        temp$3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(temp$2);
        count = temp$3;
        temp$4 = virtualinvoke this.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.String getNamingPattern()>();
        temp$5 = newarray (java.lang.Object)[1];
        temp$5[0] = count;
        temp$6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(temp$4, temp$5);
        virtualinvoke t.<java.lang.Thread: void setName(java.lang.String)>(temp$6);

     label1:
        nop;
        temp$7 = virtualinvoke this.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();
        if temp$7 != null goto label2;

        goto label3;

     label2:
        nop;
        temp$8 = virtualinvoke this.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();
        virtualinvoke t.<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>(temp$8);

     label3:
        nop;
        temp$9 = virtualinvoke this.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Integer getPriority()>();
        if temp$9 != null goto label4;

        goto label5;

     label4:
        nop;
        temp$10 = virtualinvoke this.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Integer getPriority()>();
        temp$11 = virtualinvoke temp$10.<java.lang.Integer: int intValue()>();
        virtualinvoke t.<java.lang.Thread: void setPriority(int)>(temp$11);

     label5:
        nop;
        temp$12 = virtualinvoke this.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Boolean getDaemonFlag()>();
        temp$13 = virtualinvoke temp$12.<java.lang.Boolean: boolean booleanValue()>();
        virtualinvoke t.<java.lang.Thread: void setDaemon(boolean)>(temp$13);
        return;
    }
}
