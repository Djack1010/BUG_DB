public class WrapClass 
{
    public final org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)
    {
        org.apache.commons.lang3.math.Fraction this, fraction, temp$3, temp$20;
        java.lang.IllegalArgumentException temp$0;
        int temp$1, temp$2, d1, temp$4, temp$5, temp$6, d2, temp$7, temp$8, temp$9, temp$10, temp$11, temp$12, temp$13, temp$14, temp$15, temp$16, temp$17, temp$18, temp$19;

        this := @this: org.apache.commons.lang3.math.Fraction;
        fraction := @parameter0: org.apache.commons.lang3.math.Fraction;
        if fraction == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = new java.lang.IllegalArgumentException;
        specialinvoke temp$0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The fraction must not be null");
        throw temp$0;

     label1:
        nop;
        temp$1 = this.<org.apache.commons.lang3.math.Fraction: int numerator>;
        if temp$1 == 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$2 = fraction.<org.apache.commons.lang3.math.Fraction: int numerator>;
        if temp$2 == 0 goto label3;

        goto label4;

        goto label4;

     label3:
        nop;
        temp$3 = null;
        return temp$3;

     label4:
        nop;
        temp$4 = this.<org.apache.commons.lang3.math.Fraction: int numerator>;
        temp$5 = fraction.<org.apache.commons.lang3.math.Fraction: int denominator>;
        temp$6 = staticinvoke <org.apache.commons.lang3.math.Fraction: int greatestCommonDivisor(int,int)>(temp$4, temp$5);
        d1 = temp$6;
        temp$7 = fraction.<org.apache.commons.lang3.math.Fraction: int numerator>;
        temp$8 = this.<org.apache.commons.lang3.math.Fraction: int denominator>;
        temp$9 = staticinvoke <org.apache.commons.lang3.math.Fraction: int greatestCommonDivisor(int,int)>(temp$7, temp$8);
        d2 = temp$9;
        temp$10 = this.<org.apache.commons.lang3.math.Fraction: int numerator>;
        temp$11 = temp$10 / d1;
        temp$12 = fraction.<org.apache.commons.lang3.math.Fraction: int numerator>;
        temp$13 = temp$12 / d2;
        temp$14 = staticinvoke <org.apache.commons.lang3.math.Fraction: int mulAndCheck(int,int)>(temp$11, temp$13);
        temp$15 = this.<org.apache.commons.lang3.math.Fraction: int denominator>;
        temp$16 = temp$15 / d2;
        temp$17 = fraction.<org.apache.commons.lang3.math.Fraction: int denominator>;
        temp$18 = temp$17 / d1;
        temp$19 = staticinvoke <org.apache.commons.lang3.math.Fraction: int mulPosAndCheck(int,int)>(temp$16, temp$18);
        temp$20 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(temp$14, temp$19);
        return temp$20;
    }
}
