public class WrapClass 
{
    private final java.lang.String cleanup(java.lang.String)
    {
        org.apache.commons.codec.language.DaitchMokotoffSoundex this;
        java.lang.String input, temp$17;
        java.lang.StringBuilder sb, temp$0, temp$16;
        char[] temp$1;
        int temp$2, temp$3;
        char ch, temp$4, temp$6, temp$15;
        boolean temp$5, temp$7, temp$10;
        java.util.Map temp$8, temp$11;
        java.lang.Character temp$9, temp$12, temp$14;
        java.lang.Object temp$13;

        this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex;
        input := @parameter0: java.lang.String;
        temp$0 = new java.lang.StringBuilder;
        specialinvoke temp$0.<java.lang.StringBuilder: void <init>()>();
        sb = temp$0;
        temp$1 = virtualinvoke input.<java.lang.String: char[] toCharArray()>();
        temp$2 = 0;

     label0:
        nop;
        temp$3 = lengthof temp$1;
        if temp$2 >= temp$3 goto label7;

        temp$4 = temp$1[temp$2];
        ch = temp$4;
        temp$5 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch);
        if temp$5 == 0 goto label2;

        goto label1;

     label1:
        nop;
        goto label6;

     label2:
        nop;
        temp$6 = staticinvoke <java.lang.Character: char toLowerCase(char)>(ch);
        ch = temp$6;
        temp$7 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex: boolean folding>;
        if temp$7 == 0 goto label5;

        goto label3;

     label3:
        nop;
        temp$8 = <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.Map FOLDINGS>;
        temp$9 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(ch);
        temp$10 = interfaceinvoke temp$8.<java.util.Map: boolean containsKey(java.lang.Object)>(temp$9);
        if temp$10 == 0 goto label5;

        goto label4;

        goto label4;

     label4:
        nop;
        temp$11 = <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.Map FOLDINGS>;
        temp$12 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(ch);
        temp$13 = interfaceinvoke temp$11.<java.util.Map: java.lang.Object get(java.lang.Object)>(temp$12);
        temp$14 = (java.lang.Character) temp$13;
        temp$15 = virtualinvoke temp$14.<java.lang.Character: char charValue()>();
        ch = temp$15;

     label5:
        nop;
        temp$16 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(ch);

     label6:
        nop;
        temp$2 = temp$2 + 1;
        goto label0;

     label7:
        nop;
        temp$17 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();
        return temp$17;
    }
}
