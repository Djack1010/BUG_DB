public class WrapClass 
{
    public static java.util.List getAllFieldsList(java.lang.Class)
    {
        java.lang.Class 'cls', currentClass, temp$7;
        boolean temp$0, temp$6;
        java.lang.Object[] temp$1;
        java.util.List allFields;
        java.util.ArrayList temp$2;
        java.lang.reflect.Field[] declaredFields;
        int temp$3, temp$4;
        java.lang.reflect.Field field, temp$5;

        'cls' := @parameter0: java.lang.Class;
        if 'cls' != null goto label1;

        goto label0;

     label0:
        nop;
        temp$0 = 0;
        goto label2;

     label1:
        nop;
        temp$0 = 1;

     label2:
        nop;
        temp$1 = newarray (java.lang.Object)[0];
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(temp$0, "The class must not be null", temp$1);
        temp$2 = new java.util.ArrayList;
        specialinvoke temp$2.<java.util.ArrayList: void <init>()>();
        allFields = temp$2;
        currentClass = 'cls';

     label3:
        nop;
        if currentClass != null goto label4;

        goto label7;

     label4:
        nop;
        declaredFields = null;
        temp$3 = 0;

     label5:
        nop;
        temp$4 = lengthof declaredFields;
        if temp$3 >= temp$4 goto label6;

        temp$5 = declaredFields[temp$3];
        field = temp$5;
        temp$6 = interfaceinvoke allFields.<java.util.List: boolean add(java.lang.Object)>(field);
        nop;
        temp$3 = temp$3 + 1;
        goto label5;

     label6:
        nop;
        temp$7 = virtualinvoke currentClass.<java.lang.Class: java.lang.Class getSuperclass()>();
        currentClass = temp$7;
        goto label3;

     label7:
        nop;
        return allFields;
    }
}
