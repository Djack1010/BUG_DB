public class WrapClass 
{
    public static java.lang.Object readStaticField(java.lang.reflect.Field, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field field;
        boolean forceAccess, temp$0, temp$3;
        java.lang.Object[] temp$1, temp$4;
        int temp$2;
        java.lang.String temp$5;
        java.lang.Object temp$6;

        field := @parameter0: java.lang.reflect.Field;
        forceAccess := @parameter1: boolean;
        if field != null goto label1;

        goto label0;

     label0:
        nop;
        temp$0 = 0;
        goto label2;

     label1:
        nop;
        temp$0 = 1;

     label2:
        nop;
        temp$1 = newarray (java.lang.Object)[0];
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(temp$0, "The field must not be null", temp$1);
        temp$2 = virtualinvoke field.<java.lang.reflect.Field: int getModifiers()>();
        temp$3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(temp$2);
        temp$4 = newarray (java.lang.Object)[1];
        temp$5 = virtualinvoke field.<java.lang.reflect.Field: java.lang.String getName()>();
        temp$4[0] = temp$5;
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(temp$3, "The field \'%s\' is not static", temp$4);
        temp$6 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readField(java.lang.reflect.Field,java.lang.Object,boolean)>(field, null, forceAccess);
        return temp$6;
    }
}
