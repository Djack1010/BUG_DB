public class WrapClass 
{
    private static final void mapTypeVariablesToArguments(java.lang.Class, java.lang.reflect.ParameterizedType, java.util.Map)
    {
        java.lang.Class 'cls';
        java.lang.reflect.ParameterizedType parameterizedType, temp$2;
        java.util.Map typeVarAssigns;
        java.lang.reflect.Type ownerType, temp$0, typeArg, temp$16, temp$18;
        boolean temp$1, temp$12, temp$13;
        java.lang.reflect.Type[] typeArgs, temp$3, temp$10;
        java.lang.reflect.TypeVariable[] typeVars, temp$4, temp$8;
        java.util.List typeVarList, temp$5, temp$6;
        int i, temp$7, temp$9, temp$11, temp$19, temp$20;
        java.lang.reflect.TypeVariable typeVar, temp$14;
        java.lang.Object temp$15, temp$17;

        'cls' := @parameter0: java.lang.Class;
        parameterizedType := @parameter1: java.lang.reflect.ParameterizedType;
        typeVarAssigns := @parameter2: java.util.Map;
        temp$0 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
        ownerType = temp$0;
        temp$1 = ownerType instanceof java.lang.reflect.ParameterizedType;
        if temp$1 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$2 = (java.lang.reflect.ParameterizedType) ownerType;
        staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)>('cls', temp$2, typeVarAssigns);

     label1:
        nop;
        temp$3 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
        typeArgs = temp$3;
        typeVars = null;
        temp$4 = virtualinvoke 'cls'.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
        temp$5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(temp$4);
        temp$6 = (java.util.List) temp$5;
        typeVarList = temp$6;
        i = 0;

     label2:
        nop;
        temp$7 = lengthof typeArgs;
        if i < temp$7 goto label3;

        goto label7;

     label3:
        nop;
        temp$8 = typeVars;
        temp$9 = i;
        typeVar = temp$8[temp$9];
        temp$10 = typeArgs;
        temp$11 = i;
        typeArg = temp$10[temp$11];
        temp$12 = interfaceinvoke typeVarList.<java.util.List: boolean contains(java.lang.Object)>(typeArg);
        if temp$12 == 0 goto label6;

        goto label4;

     label4:
        nop;
        temp$13 = interfaceinvoke typeVarAssigns.<java.util.Map: boolean containsKey(java.lang.Object)>(typeVar);
        if temp$13 == 0 goto label6;

        goto label5;

        goto label5;

     label5:
        nop;
        temp$14 = (java.lang.reflect.TypeVariable) typeArg;
        temp$15 = interfaceinvoke typeVarAssigns.<java.util.Map: java.lang.Object get(java.lang.Object)>(typeVar);
        temp$16 = (java.lang.reflect.Type) temp$15;
        temp$17 = interfaceinvoke typeVarAssigns.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(temp$14, temp$16);
        temp$18 = (java.lang.reflect.Type) temp$17;

     label6:
        nop;
        nop;
        temp$19 = i;
        temp$20 = temp$19 + 1;
        i = temp$20;
        goto label2;

     label7:
        nop;
        return;
    }
}
