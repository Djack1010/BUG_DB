public class WrapClass 
{
    public static transient java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class 'cls', temp$2;
        java.lang.Class[] parameterTypes;
        java.lang.Object[] temp$0;
        java.lang.Object temp$1;
        java.lang.reflect.Constructor ctor, temp$3, result, ctor, temp$8;
        boolean temp$4;
        java.lang.NoSuchMethodException e;
        java.lang.reflect.Constructor[] ctors, temp$5;
        int temp$6, temp$7;

        'cls' := @parameter0: java.lang.Class;
        parameterTypes := @parameter1: java.lang.Class[];
        temp$0 = newarray (java.lang.Object)[0];
        temp$1 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>('cls', "class cannot be null", temp$0);
        temp$2 = (java.lang.Class) temp$1;

     label0:
        nop;
        temp$3 = virtualinvoke 'cls'.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(parameterTypes);
        ctor = temp$3;
        temp$4 = staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: boolean setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>(ctor);

     label1:
        nop;
        return ctor;

     label2:
        nop;
        e := @caughtexception;
        nop;
        goto label3;

     label3:
        nop;
        result = null;
        temp$5 = virtualinvoke 'cls'.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();
        ctors = temp$5;
        temp$6 = 0;

     label4:
        nop;
        temp$7 = lengthof ctors;
        if temp$6 >= temp$7 goto label5;

        temp$8 = ctors[temp$6];
        ctor = temp$8;
        nop;
        temp$6 = temp$6 + 1;
        goto label4;

     label5:
        nop;
        return result;

        catch java.lang.NoSuchMethodException from label0 to label1 with label2;
    }
}
