public class WrapClass 
{
    public static java.util.List convertClassesToClassNames(java.util.List)
    {
        java.util.List classes, temp$0, classNames;
        java.util.ArrayList temp$1;
        int temp$2;
        java.util.Iterator temp$3;
        java.lang.Class 'cls';
        boolean temp$4, temp$6, temp$8;
        java.lang.Object temp$5;
        java.lang.String temp$7;

        classes := @parameter0: java.util.List;
        if classes == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = null;
        return temp$0;

     label1:
        nop;
        temp$1 = new java.util.ArrayList;
        temp$2 = interfaceinvoke classes.<java.util.List: int size()>();
        specialinvoke temp$1.<java.util.ArrayList: void <init>(int)>(temp$2);
        classNames = temp$1;
        temp$3 = interfaceinvoke classes.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        nop;
        temp$4 = interfaceinvoke temp$3.<java.util.Iterator: boolean hasNext()>();
        if temp$4 == 0 goto label6;

        temp$5 = interfaceinvoke temp$3.<java.util.Iterator: java.lang.Object next()>();
        'cls' = (java.lang.Class) temp$5;
        if 'cls' == null goto label3;

        goto label4;

     label3:
        nop;
        temp$6 = interfaceinvoke classNames.<java.util.List: boolean add(java.lang.Object)>(null);
        goto label5;

     label4:
        nop;
        temp$7 = virtualinvoke 'cls'.<java.lang.Class: java.lang.String getName()>();
        temp$8 = interfaceinvoke classNames.<java.util.List: boolean add(java.lang.Object)>(temp$7);

     label5:
        nop;
        nop;
        goto label2;

     label6:
        nop;
        return classNames;
    }
}
