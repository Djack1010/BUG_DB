public class WrapClass 
{
    public static transient java.lang.Object[] removeElements(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] array, values, temp$2, result;
        boolean temp$0, temp$1, temp$15;
        java.util.HashMap occurrences;
        int temp$3, temp$4, found, i, ct, temp$20, temp$21, temp$22, temp$23, temp$24, temp$25;
        java.lang.Object v, temp$5, temp$6, temp$9, temp$16, v, temp$17, temp$18, temp$26;
        org.apache.commons.lang3.mutable.MutableInt count, temp$7, temp$8, temp$10, temp$19;
        java.util.BitSet toRemove, temp$11;
        java.util.Set temp$12, temp$13;
        java.util.Iterator temp$14;
        java.util.Map$Entry e;

        array := @parameter0: java.lang.Object[];
        values := @parameter1: java.lang.Object[];
        temp$0 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(array);
        if temp$0 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(values);
        if temp$1 == 0 goto label2;

        goto label1;

        goto label2;

     label1:
        nop;
        temp$2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(array);
        return temp$2;

     label2:
        nop;
        occurrences = null;
        temp$3 = 0;

     label3:
        nop;
        temp$4 = lengthof values;
        if temp$3 >= temp$4 goto label7;

        temp$5 = values[temp$3];
        v = temp$5;
        temp$6 = virtualinvoke occurrences.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v);
        temp$7 = (org.apache.commons.lang3.mutable.MutableInt) temp$6;
        count = temp$7;
        if count == null goto label4;

        goto label5;

     label4:
        nop;
        temp$8 = new org.apache.commons.lang3.mutable.MutableInt;
        specialinvoke temp$8.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);
        temp$9 = virtualinvoke occurrences.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v, temp$8);
        temp$10 = (org.apache.commons.lang3.mutable.MutableInt) temp$9;
        goto label6;

     label5:
        nop;
        virtualinvoke count.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();

     label6:
        nop;
        nop;
        temp$3 = temp$3 + 1;
        goto label3;

     label7:
        nop;
        temp$11 = new java.util.BitSet;
        specialinvoke temp$11.<java.util.BitSet: void <init>()>();
        toRemove = temp$11;
        temp$12 = virtualinvoke occurrences.<java.util.HashMap: java.util.Set entrySet()>();
        temp$13 = (java.util.Set) temp$12;
        temp$14 = interfaceinvoke temp$13.<java.lang.Iterable: java.util.Iterator iterator()>();

     label8:
        nop;
        temp$15 = interfaceinvoke temp$14.<java.util.Iterator: boolean hasNext()>();
        if temp$15 == 0 goto label14;

        temp$16 = interfaceinvoke temp$14.<java.util.Iterator: java.lang.Object next()>();
        e = (java.util.Map$Entry) temp$16;
        temp$17 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();
        v = temp$17;
        found = 0;
        i = 0;
        temp$18 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();
        temp$19 = (org.apache.commons.lang3.mutable.MutableInt) temp$18;
        temp$20 = virtualinvoke temp$19.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();
        ct = temp$20;

     label9:
        nop;
        if i < ct goto label10;

        goto label13;

     label10:
        nop;
        temp$21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>(array, v, found);
        found = temp$21;
        if found < 0 goto label11;

        goto label12;

     label11:
        nop;
        goto label13;

     label12:
        nop;
        temp$22 = found;
        temp$23 = temp$22 + 1;
        found = temp$23;
        virtualinvoke toRemove.<java.util.BitSet: void set(int)>(temp$22);
        nop;
        temp$24 = i;
        temp$25 = temp$24 + 1;
        i = temp$25;
        goto label9;

     label13:
        nop;
        nop;
        goto label8;

     label14:
        nop;
        temp$26 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,java.util.BitSet)>(array, toRemove);
        result = (java.lang.Object[]) temp$26;
        return result;
    }
}
