public class WrapClass 
{
    public static transient java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class 'cls';
        java.lang.String methodName, temp$7;
        java.lang.Class[] parameterTypes, temp$9, temp$12, temp$13;
        java.lang.reflect.Method method, temp$0, temp$2, bestMatch, method, temp$6, accessibleMethod, temp$11;
        boolean temp$1, temp$8, temp$10, temp$15;
        java.lang.NoSuchMethodException e;
        java.lang.reflect.Method[] methods, temp$3;
        int temp$4, temp$5, temp$14;

        'cls' := @parameter0: java.lang.Class;
        methodName := @parameter1: java.lang.String;
        parameterTypes := @parameter2: java.lang.Class[];

     label0:
        nop;
        temp$0 = virtualinvoke 'cls'.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(methodName, parameterTypes);
        method = temp$0;
        temp$1 = staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: boolean setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>(method);
        temp$2 = null;

     label1:
        nop;
        return temp$2;

     label2:
        nop;
        e := @caughtexception;
        nop;
        goto label3;

     label3:
        nop;
        bestMatch = null;
        temp$3 = virtualinvoke 'cls'.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();
        methods = temp$3;
        temp$4 = 0;

     label4:
        nop;
        temp$5 = lengthof methods;
        if temp$4 >= temp$5 goto label12;

        temp$6 = methods[temp$4];
        method = temp$6;
        temp$7 = virtualinvoke method.<java.lang.reflect.Method: java.lang.String getName()>();
        temp$8 = virtualinvoke temp$7.<java.lang.String: boolean equals(java.lang.Object)>(methodName);
        if temp$8 == 0 goto label11;

        goto label5;

     label5:
        nop;
        temp$9 = virtualinvoke method.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        temp$10 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(parameterTypes, temp$9, 1);
        if temp$10 == 0 goto label11;

        goto label6;

        goto label6;

     label6:
        nop;
        temp$11 = staticinvoke <org.apache.commons.lang3.reflect.MethodUtils: java.lang.reflect.Method getAccessibleMethod(java.lang.reflect.Method)>(method);
        accessibleMethod = temp$11;
        if accessibleMethod != null goto label7;

        goto label10;

     label7:
        nop;
        if bestMatch == null goto label9;

        goto label8;

     label8:
        nop;
        temp$12 = virtualinvoke accessibleMethod.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        temp$13 = virtualinvoke bestMatch.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        temp$14 = staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: int compareParameterTypes(java.lang.Class[],java.lang.Class[],java.lang.Class[])>(temp$12, temp$13, parameterTypes);
        if temp$14 < 0 goto label9;

        goto label10;

        goto label10;

        goto label9;

     label9:
        nop;
        bestMatch = accessibleMethod;

     label10:
        nop;

     label11:
        nop;
        nop;
        temp$4 = temp$4 + 1;
        goto label4;

     label12:
        nop;
        if bestMatch != null goto label13;

        goto label14;

     label13:
        nop;
        temp$15 = staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: boolean setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>(bestMatch);

     label14:
        nop;
        return bestMatch;

        catch java.lang.NoSuchMethodException from label0 to label1 with label2;
    }
}
