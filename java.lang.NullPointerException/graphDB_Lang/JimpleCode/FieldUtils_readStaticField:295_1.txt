public class WrapClass 
{
    public static java.lang.Object readStaticField(java.lang.reflect.Field, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field field;
        boolean forceAccess, temp$2;
        java.lang.Object[] temp$0, temp$3;
        int temp$1;
        java.lang.String temp$4;
        java.lang.Object temp$5;

        field := @parameter0: java.lang.reflect.Field;
        forceAccess := @parameter1: boolean;
        temp$0 = newarray (java.lang.Object)[0];
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(1, "The field must not be null", temp$0);
        temp$1 = virtualinvoke field.<java.lang.reflect.Field: int getModifiers()>();
        temp$2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(temp$1);
        temp$3 = newarray (java.lang.Object)[1];
        temp$4 = virtualinvoke field.<java.lang.reflect.Field: java.lang.String getName()>();
        temp$3[0] = temp$4;
        staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(temp$2, "The field \'%s\' is not static", temp$3);
        temp$5 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readField(java.lang.reflect.Field,java.lang.Object,boolean)>(field, null, forceAccess);
        return temp$5;
    }
}
