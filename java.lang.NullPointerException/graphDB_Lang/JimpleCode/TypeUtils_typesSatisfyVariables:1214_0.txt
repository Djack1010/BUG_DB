public class WrapClass 
{
    public static boolean typesSatisfyVariables(java.util.Map)
    {
        java.util.Map typeVarAssigns, temp$2;
        java.lang.Object[] temp$0;
        java.lang.Object temp$1, temp$7, temp$8, temp$10;
        java.util.Set temp$3, temp$4;
        java.util.Iterator temp$5;
        java.util.Map$Entry entry;
        boolean temp$6, temp$17, temp$18, temp$19;
        java.lang.reflect.TypeVariable typeVar, temp$9;
        java.lang.reflect.Type type, temp$11, bound, temp$15, temp$16;
        java.lang.reflect.Type[] temp$12;
        int temp$13, temp$14;

        typeVarAssigns := @parameter0: java.util.Map;
        temp$0 = newarray (java.lang.Object)[0];
        temp$1 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(typeVarAssigns, "typeVarAssigns is null", temp$0);
        temp$2 = (java.util.Map) temp$1;
        temp$3 = interfaceinvoke typeVarAssigns.<java.util.Map: java.util.Set entrySet()>();
        temp$4 = (java.util.Set) temp$3;
        temp$5 = interfaceinvoke temp$4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label0:
        nop;
        temp$6 = interfaceinvoke temp$5.<java.util.Iterator: boolean hasNext()>();
        if temp$6 == 0 goto label5;

        temp$7 = interfaceinvoke temp$5.<java.util.Iterator: java.lang.Object next()>();
        entry = (java.util.Map$Entry) temp$7;
        temp$8 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();
        temp$9 = (java.lang.reflect.TypeVariable) temp$8;
        typeVar = temp$9;
        temp$10 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();
        temp$11 = (java.lang.reflect.Type) temp$10;
        type = temp$11;
        temp$12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitBounds(java.lang.reflect.TypeVariable)>(typeVar);
        temp$13 = 0;

     label1:
        nop;
        temp$14 = lengthof temp$12;
        if temp$13 >= temp$14 goto label4;

        temp$15 = temp$12[temp$13];
        bound = temp$15;
        temp$16 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type,java.util.Map)>(bound, typeVarAssigns);
        temp$17 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(type, temp$16, typeVarAssigns);
        if temp$17 == 0 goto label2;

        goto label3;

     label2:
        nop;
        temp$18 = 0;
        return temp$18;

     label3:
        nop;
        nop;
        temp$13 = temp$13 + 1;
        goto label1;

     label4:
        nop;
        nop;
        goto label0;

     label5:
        nop;
        temp$19 = 1;
        return temp$19;
    }
}
