public class WrapClass 
{
    private static final java.lang.Throwable getCauseUsingMethodName(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable throwable, temp$10, temp$11;
        java.lang.String methodName;
        java.lang.reflect.Method method, temp$2;
        java.lang.Class temp$0, temp$3, temp$4, temp$5, temp$6;
        java.lang.Class[] temp$1;
        java.lang.NoSuchMethodException ignored;
        java.lang.SecurityException ignored;
        boolean temp$7;
        java.lang.Object[] temp$8;
        java.lang.Object temp$9;
        java.lang.IllegalAccessException ignored;
        java.lang.IllegalArgumentException ignored;
        java.lang.reflect.InvocationTargetException ignored;

        throwable := @parameter0: java.lang.Throwable;
        methodName := @parameter1: java.lang.String;
        method = null;

     label0:
        nop;
        temp$0 = virtualinvoke throwable.<java.lang.Throwable: java.lang.Class getClass()>();
        temp$1 = newarray (java.lang.Class)[0];
        temp$2 = virtualinvoke temp$0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(methodName, temp$1);
        method = temp$2;
        goto label3;

     label1:
        nop;
        ignored := @caughtexception;
        nop;
        goto label3;

     label2:
        nop;
        ignored := @caughtexception;
        nop;
        goto label3;

     label3:
        nop;
        if method != null goto label4;

        goto label14;

     label4:
        nop;
        temp$4 = <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;
        if temp$4 != null goto label5;

        temp$5 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");
        <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable> = temp$5;
        temp$3 = temp$5;
        goto label6;

     label5:
        nop;
        temp$3 = <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

     label6:
        nop;
        temp$6 = virtualinvoke method.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        temp$7 = virtualinvoke temp$3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(temp$6);
        if temp$7 == 0 goto label14;

        goto label7;

        goto label7;

     label7:
        nop;

     label8:
        nop;
        temp$8 = newarray (java.lang.Object)[0];
        temp$9 = virtualinvoke method.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(throwable, temp$8);
        temp$10 = (java.lang.Throwable) temp$9;

     label9:
        nop;
        return temp$10;

     label10:
        nop;
        ignored := @caughtexception;
        nop;
        goto label13;

     label11:
        nop;
        ignored := @caughtexception;
        nop;
        goto label13;

     label12:
        nop;
        ignored := @caughtexception;
        nop;
        goto label13;

     label13:
        nop;

     label14:
        nop;
        temp$11 = null;
        return temp$11;

        catch java.lang.NoSuchMethodException from label0 to label1 with label1;
        catch java.lang.SecurityException from label0 to label1 with label2;
        catch java.lang.IllegalAccessException from label8 to label9 with label10;
        catch java.lang.IllegalArgumentException from label8 to label9 with label11;
        catch java.lang.reflect.InvocationTargetException from label8 to label9 with label12;
    }
}
