public class WrapClass 
{
    public static java.lang.reflect.Method[] getMethodsWithAnnotation(java.lang.Class, java.lang.Class)
    {
        java.lang.Class 'cls', annotationCls;
        java.util.List annotatedMethodsList, temp$0;
        int temp$1;
        java.lang.reflect.Method[] temp$2, temp$4;
        java.lang.Object[] temp$3;

        'cls' := @parameter0: java.lang.Class;
        annotationCls := @parameter1: java.lang.Class;
        temp$0 = staticinvoke <org.apache.commons.lang3.reflect.MethodUtils: java.util.List getMethodsListWithAnnotation(java.lang.Class,java.lang.Class)>('cls', annotationCls);
        annotatedMethodsList = temp$0;
        temp$1 = interfaceinvoke annotatedMethodsList.<java.util.List: int size()>();
        temp$2 = newarray (java.lang.reflect.Method)[temp$1];
        temp$3 = interfaceinvoke annotatedMethodsList.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(temp$2);
        temp$4 = (java.lang.reflect.Method[]) temp$3;
        return temp$4;
    }
}
