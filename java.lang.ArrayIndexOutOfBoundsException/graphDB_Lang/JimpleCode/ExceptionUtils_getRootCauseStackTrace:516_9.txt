public class WrapClass 
{
    public static java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable throwable, temp$6, temp$12, temp$17, temp$24;
        java.lang.String[] temp$0, temp$35, temp$37;
        java.lang.Throwable[] throwables, temp$1, temp$3, temp$9, temp$15, temp$22;
        int count, temp$4, temp$5, i, temp$8, temp$10, temp$11, temp$14, temp$16, temp$23, j, temp$28, temp$32, temp$33, temp$34;
        java.util.List frames, nextTrace, temp$7, trace, temp$13;
        java.util.ArrayList temp$2;
        java.lang.String temp$18, temp$21, temp$25, temp$26, temp$30;
        boolean temp$19, temp$27, temp$31;
        java.lang.StringBuffer temp$20;
        java.lang.Object temp$29;
        java.lang.Object[] temp$36;

        throwable := @parameter0: java.lang.Throwable;
        if throwable == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
        return temp$0;

     label1:
        nop;
        temp$1 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.Throwable[] getThrowables(java.lang.Throwable)>(throwable);
        throwables = temp$1;
        count = lengthof throwables;
        temp$2 = new java.util.ArrayList;
        specialinvoke temp$2.<java.util.ArrayList: void <init>()>();
        frames = temp$2;
        temp$3 = throwables;
        temp$4 = count * 1;
        temp$5 = temp$4;
        temp$6 = temp$3[temp$5];
        temp$7 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.util.List getStackFrameList(java.lang.Throwable)>(temp$6);
        nextTrace = temp$7;
        i = count;

     label2:
        nop;
        temp$8 = i + -1;
        i = temp$8;
        if temp$8 >= 0 goto label3;

        goto label12;

     label3:
        nop;
        trace = nextTrace;
        if i != 0 goto label4;

        goto label5;

     label4:
        nop;
        temp$9 = throwables;
        temp$10 = i - 1;
        temp$11 = temp$10;
        temp$12 = temp$9[temp$11];
        temp$13 = staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: java.util.List getStackFrameList(java.lang.Throwable)>(temp$12);
        nextTrace = temp$13;
        staticinvoke <org.apache.commons.lang3.exception.ExceptionUtils: void removeCommonFrames(java.util.List,java.util.List)>(trace, nextTrace);

     label5:
        nop;
        temp$14 = count - 1;
        if i == temp$14 goto label6;

        goto label7;

     label6:
        nop;
        temp$15 = throwables;
        temp$16 = i;
        temp$17 = temp$15[temp$16];
        temp$18 = virtualinvoke temp$17.<java.lang.Throwable: java.lang.String toString()>();
        temp$19 = interfaceinvoke frames.<java.util.List: boolean add(java.lang.Object)>(temp$18);
        goto label8;

     label7:
        nop;
        temp$20 = new java.lang.StringBuffer;
        specialinvoke temp$20.<java.lang.StringBuffer: void <init>()>();
        temp$21 = <org.apache.commons.lang3.exception.ExceptionUtils: java.lang.String WRAPPED_MARKER>;
        virtualinvoke temp$20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$21);
        temp$22 = throwables;
        temp$23 = i;
        temp$24 = temp$22[temp$23];
        temp$25 = virtualinvoke temp$24.<java.lang.Throwable: java.lang.String toString()>();
        virtualinvoke temp$20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$25);
        temp$26 = virtualinvoke temp$20.<java.lang.StringBuffer: java.lang.String toString()>();
        temp$27 = interfaceinvoke frames.<java.util.List: boolean add(java.lang.Object)>(temp$26);

     label8:
        nop;
        j = 0;

     label9:
        nop;
        temp$28 = interfaceinvoke trace.<java.util.List: int size()>();
        if j < temp$28 goto label10;

        goto label11;

     label10:
        nop;
        temp$29 = interfaceinvoke trace.<java.util.List: java.lang.Object get(int)>(j);
        temp$30 = (java.lang.String) temp$29;
        temp$31 = interfaceinvoke frames.<java.util.List: boolean add(java.lang.Object)>(temp$30);
        nop;
        temp$32 = j;
        temp$33 = temp$32 + 1;
        j = temp$33;
        goto label9;

     label11:
        nop;
        nop;
        goto label2;

     label12:
        nop;
        temp$34 = interfaceinvoke frames.<java.util.List: int size()>();
        temp$35 = newarray (java.lang.String)[temp$34];
        temp$36 = interfaceinvoke frames.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(temp$35);
        temp$37 = (java.lang.String[]) temp$36;
        return temp$37;
    }
}
