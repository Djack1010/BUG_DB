public class WrapClass 
{
    private static final java.lang.Object add(java.lang.Object, int, java.lang.Object, java.lang.Class)
    {
        java.lang.Object array, element, joinedArray, temp$3, result, temp$10;
        int index, length, temp$4, temp$8, temp$9, temp$11, temp$12, temp$13;
        java.lang.Class clss;
        java.lang.IndexOutOfBoundsException temp$0, temp$5;
        java.lang.StringBuffer temp$1, temp$6;
        java.lang.String temp$2, temp$7;

        array := @parameter0: java.lang.Object;
        index := @parameter1: int;
        element := @parameter2: java.lang.Object;
        clss := @parameter3: java.lang.Class;
        if array == null goto label0;

        goto label3;

     label0:
        nop;
        if index != 0 goto label1;

        goto label2;

     label1:
        nop;
        temp$0 = new java.lang.IndexOutOfBoundsException;
        temp$1 = new java.lang.StringBuffer;
        specialinvoke temp$1.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Index: ");
        virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(index);
        virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(", Length: 0");
        temp$2 = virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(temp$2);
        throw temp$0;

     label2:
        nop;
        temp$3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(clss, 1);
        joinedArray = temp$3;
        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(joinedArray, 0, element);
        return joinedArray;

     label3:
        nop;
        temp$4 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(array);
        length = temp$4;
        if index > length goto label5;

        goto label4;

     label4:
        nop;
        if index < 0 goto label5;

        goto label6;

        goto label6;

     label5:
        nop;
        temp$5 = new java.lang.IndexOutOfBoundsException;
        temp$6 = new java.lang.StringBuffer;
        specialinvoke temp$6.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Index: ");
        virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(index);
        virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(", Length: ");
        virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(length);
        temp$7 = virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(temp$7);
        throw temp$5;

     label6:
        nop;
        temp$8 = length;
        temp$9 = temp$8 + 1;
        temp$10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(clss, temp$9);
        result = temp$10;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, 0, result, 0, index);
        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(result, index, element);
        if index < length goto label7;

        goto label8;

     label7:
        nop;
        temp$11 = index;
        temp$12 = temp$11 + -1;
        temp$13 = length - index;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, index, result, temp$12, temp$13);

     label8:
        nop;
        return result;
    }
}
