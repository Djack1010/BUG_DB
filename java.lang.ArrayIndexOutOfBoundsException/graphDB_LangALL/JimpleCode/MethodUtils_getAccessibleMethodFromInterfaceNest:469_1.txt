public class WrapClass 
{
    private static final transient java.lang.reflect.Method getAccessibleMethodFromInterfaceNest(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class 'cls', temp$4, temp$9, temp$13, temp$17;
        java.lang.String methodName;
        java.lang.Class[] parameterTypes, interfaces, temp$0, temp$2, temp$7, temp$11;
        int i, temp$1, temp$3, temp$5, temp$8, temp$12, temp$15, temp$16;
        boolean temp$6;
        java.lang.reflect.Method temp$10, method, temp$14, temp$18;
        java.lang.NoSuchMethodException e;

        'cls' := @parameter0: java.lang.Class;
        methodName := @parameter1: java.lang.String;
        parameterTypes := @parameter2: java.lang.Class[];

     label0:
        nop;
        if 'cls' != null goto label1;

        goto label14;

     label1:
        nop;
        temp$0 = virtualinvoke 'cls'.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        interfaces = temp$0;
        i = 0;

     label2:
        nop;
        temp$1 = lengthof interfaces;
        if i <= temp$1 goto label3;

        goto label13;

     label3:
        nop;
        temp$2 = interfaces;
        temp$3 = i;
        temp$4 = temp$2[temp$3];
        temp$5 = virtualinvoke temp$4.<java.lang.Class: int getModifiers()>();
        temp$6 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(temp$5);
        if temp$6 == 0 goto label4;

        goto label5;

     label4:
        nop;
        goto label12;

     label5:
        nop;

     label6:
        nop;
        temp$7 = interfaces;
        temp$8 = i;
        temp$9 = temp$7[temp$8];
        temp$10 = virtualinvoke temp$9.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(methodName, parameterTypes);

     label7:
        nop;
        return temp$10;

     label8:
        nop;
        e := @caughtexception;
        nop;
        goto label9;

     label9:
        nop;
        temp$11 = interfaces;
        temp$12 = i;
        temp$13 = temp$11[temp$12];
        temp$14 = staticinvoke <org.apache.commons.lang3.reflect.MethodUtils: java.lang.reflect.Method getAccessibleMethodFromInterfaceNest(java.lang.Class,java.lang.String,java.lang.Class[])>(temp$13, methodName, parameterTypes);
        method = temp$14;
        if method != null goto label10;

        goto label11;

     label10:
        nop;
        return method;

     label11:
        nop;

     label12:
        nop;
        temp$15 = i;
        temp$16 = temp$15 + 1;
        i = temp$16;
        goto label2;

     label13:
        nop;
        nop;
        temp$17 = virtualinvoke 'cls'.<java.lang.Class: java.lang.Class getSuperclass()>();
        'cls' = temp$17;
        goto label0;

     label14:
        nop;
        temp$18 = null;
        return temp$18;

        catch java.lang.NoSuchMethodException from label6 to label7 with label8;
    }
}
