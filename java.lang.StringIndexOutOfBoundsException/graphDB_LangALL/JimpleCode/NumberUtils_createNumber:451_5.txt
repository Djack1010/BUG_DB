public class WrapClass 
{
    public static java.lang.Number createNumber(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String str, pfx, temp$5, mant, dec, exp, temp$35, temp$38, temp$41, temp$42, temp$47, temp$48, temp$49, temp$50, temp$59, temp$60, numeric, temp$63, temp$69, temp$76, temp$89, temp$95, temp$96;
        boolean temp$0, temp$6, temp$51, allZeros, temp$64, temp$65, temp$66, temp$70, temp$71, temp$78, temp$82, allZeros, temp$100, temp$101, temp$102, temp$104, temp$108;
        java.lang.NumberFormatException temp$1, temp$33, temp$45, nfe, temp$74, nfe, nfe, e, temp$87, nfe, nfe, nfe, nfe;
        java.lang.String[] hex_prefixes, temp$2;
        int pfxLen, temp$3, temp$4, temp$7, temp$8, temp$9, i, temp$10, temp$12, temp$13, temp$14, temp$15, temp$16, hexDigits, temp$17, temp$18, temp$19, temp$21, temp$24, temp$25, decPos, temp$27, expPos, temp$28, temp$29, temp$30, temp$31, numDecimals, temp$32, temp$36, temp$37, temp$39, temp$40, temp$43, temp$44, temp$52, temp$53, temp$54, temp$55, temp$56, temp$57, temp$58, temp$61, temp$62, temp$68, temp$80, temp$85, temp$90, temp$91, temp$92, temp$93, temp$94, temp$106, temp$110;
        char firstSigDigit, temp$11, lastChar, temp$26, temp$67;
        java.math.BigInteger temp$20, temp$73, temp$99;
        java.lang.Long temp$22, temp$72, temp$98;
        java.lang.Integer temp$23, temp$97;
        java.lang.StringBuffer temp$34, temp$46, temp$75, temp$88;
        java.lang.Float f, temp$77, f, temp$103;
        float temp$79, temp$83, temp$105;
        java.lang.Double d, temp$81, d, temp$107;
        double temp$84, temp$109;
        java.math.BigDecimal temp$86, temp$111;

        str := @parameter0: java.lang.String;
        temp$0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(str);
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = new java.lang.NumberFormatException;
        specialinvoke temp$1.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number");
        throw temp$1;

     label1:
        nop;
        temp$2 = newarray (java.lang.String)[6];
        temp$2[0] = "0x";
        temp$2[1] = "0X";
        temp$2[2] = "-0x";
        temp$2[3] = "-0X";
        temp$2[4] = "#";
        temp$2[5] = "-#";
        hex_prefixes = temp$2;
        pfxLen = 0;
        temp$3 = 0;

     label2:
        nop;
        temp$4 = lengthof hex_prefixes;
        if temp$3 >= temp$4 goto label5;

        temp$5 = hex_prefixes[temp$3];
        pfx = temp$5;
        temp$6 = virtualinvoke str.<java.lang.String: boolean startsWith(java.lang.String)>(pfx);
        if temp$6 == 0 goto label4;

        goto label3;

     label3:
        nop;
        temp$7 = pfxLen;
        temp$8 = virtualinvoke pfx.<java.lang.String: int length()>();
        temp$9 = temp$7 + temp$8;
        pfxLen = temp$9;
        goto label5;

     label4:
        nop;
        nop;
        temp$3 = temp$3 + 1;
        goto label2;

     label5:
        nop;
        if pfxLen > 0 goto label6;

        goto label21;

     label6:
        nop;
        firstSigDigit = 0;
        i = pfxLen;

     label7:
        nop;
        temp$10 = virtualinvoke str.<java.lang.String: int length()>();
        if i < temp$10 goto label8;

        goto label12;

     label8:
        nop;
        temp$11 = virtualinvoke str.<java.lang.String: char charAt(int)>(i);
        firstSigDigit = temp$11;
        temp$12 = (int) firstSigDigit;
        if temp$12 == 48 goto label9;

        goto label10;

     label9:
        nop;
        temp$13 = pfxLen;
        temp$14 = temp$13 + 1;
        pfxLen = temp$14;
        goto label11;

     label10:
        nop;
        goto label12;

     label11:
        nop;
        nop;
        temp$15 = i;
        temp$16 = temp$15 + 1;
        i = temp$16;
        goto label7;

     label12:
        nop;
        temp$17 = virtualinvoke str.<java.lang.String: int length()>();
        temp$18 = temp$17 - pfxLen;
        hexDigits = temp$18;
        if hexDigits > 16 goto label15;

        goto label13;

     label13:
        nop;
        if hexDigits == 16 goto label14;

        goto label16;

     label14:
        nop;
        temp$19 = (int) firstSigDigit;
        if temp$19 > 55 goto label15;

        goto label16;

        goto label15;

        goto label16;

     label15:
        nop;
        temp$20 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigInteger createBigInteger(java.lang.String)>(str);
        return temp$20;

     label16:
        nop;
        if hexDigits > 8 goto label19;

        goto label17;

     label17:
        nop;
        if hexDigits == 8 goto label18;

        goto label20;

     label18:
        nop;
        temp$21 = (int) firstSigDigit;
        if temp$21 > 55 goto label19;

        goto label20;

        goto label19;

        goto label20;

     label19:
        nop;
        temp$22 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Long createLong(java.lang.String)>(str);
        return temp$22;

     label20:
        nop;
        temp$23 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer createInteger(java.lang.String)>(str);
        return temp$23;

     label21:
        nop;
        temp$24 = virtualinvoke str.<java.lang.String: int length()>();
        temp$25 = temp$24 - 1;
        temp$26 = virtualinvoke str.<java.lang.String: char charAt(int)>(temp$25);
        lastChar = temp$26;
        temp$27 = virtualinvoke str.<java.lang.String: int indexOf(int)>(46);
        decPos = temp$27;
        temp$28 = virtualinvoke str.<java.lang.String: int indexOf(int)>(101);
        temp$29 = temp$28;
        temp$30 = virtualinvoke str.<java.lang.String: int indexOf(int)>(69);
        temp$31 = temp$29 + temp$30;
        expPos = temp$31 + 1;
        numDecimals = 0;
        if decPos > -1 goto label22;

        goto label29;

     label22:
        nop;
        if expPos > -1 goto label23;

        goto label27;

     label23:
        nop;
        if expPos < decPos goto label25;

        goto label24;

     label24:
        nop;
        temp$32 = virtualinvoke str.<java.lang.String: int length()>();
        if expPos > temp$32 goto label25;

        goto label26;

        goto label26;

     label25:
        nop;
        temp$33 = new java.lang.NumberFormatException;
        temp$34 = new java.lang.StringBuffer;
        specialinvoke temp$34.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(str);
        virtualinvoke temp$34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" is not a valid number.");
        temp$35 = virtualinvoke temp$34.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$33.<java.lang.NumberFormatException: void <init>(java.lang.String)>(temp$35);
        throw temp$33;

     label26:
        nop;
        temp$36 = decPos;
        temp$37 = temp$36 + 1;
        temp$38 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(temp$37, expPos);
        dec = temp$38;
        goto label28;

     label27:
        nop;
        temp$39 = decPos;
        temp$40 = temp$39 + 1;
        temp$41 = virtualinvoke str.<java.lang.String: java.lang.String substring(int)>(temp$40);
        dec = temp$41;

     label28:
        nop;
        temp$42 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.String getMantissa(java.lang.String,int)>(str, decPos);
        mant = temp$42;
        temp$43 = virtualinvoke dec.<java.lang.String: int length()>();
        numDecimals = temp$43;
        goto label35;

     label29:
        nop;
        if expPos > -1 goto label30;

        goto label33;

     label30:
        nop;
        temp$44 = virtualinvoke str.<java.lang.String: int length()>();
        if expPos > temp$44 goto label31;

        goto label32;

     label31:
        nop;
        temp$45 = new java.lang.NumberFormatException;
        temp$46 = new java.lang.StringBuffer;
        specialinvoke temp$46.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(str);
        virtualinvoke temp$46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" is not a valid number.");
        temp$47 = virtualinvoke temp$46.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$45.<java.lang.NumberFormatException: void <init>(java.lang.String)>(temp$47);
        throw temp$45;

     label32:
        nop;
        temp$48 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.String getMantissa(java.lang.String,int)>(str, expPos);
        mant = temp$48;
        goto label34;

     label33:
        nop;
        temp$49 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.String getMantissa(java.lang.String)>(str);
        mant = temp$49;

     label34:
        nop;
        temp$50 = null;
        dec = temp$50;

     label35:
        nop;
        temp$51 = staticinvoke <java.lang.Character: boolean isDigit(char)>(lastChar);
        if temp$51 == 0 goto label36;

        goto label84;

     label36:
        nop;
        temp$52 = (int) lastChar;
        if temp$52 != 46 goto label37;

        goto label84;

        goto label37;

     label37:
        nop;
        if expPos > -1 goto label38;

        goto label40;

     label38:
        nop;
        temp$53 = virtualinvoke str.<java.lang.String: int length()>();
        temp$54 = temp$53 - 1;
        if expPos < temp$54 goto label39;

        goto label40;

        goto label39;

     label39:
        nop;
        temp$55 = expPos;
        temp$56 = temp$55 + 1;
        temp$57 = virtualinvoke str.<java.lang.String: int length()>();
        temp$58 = temp$57 - 1;
        temp$59 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(temp$56, temp$58);
        exp = temp$59;
        goto label41;

     label40:
        nop;
        temp$60 = null;
        exp = temp$60;

     label41:
        nop;
        temp$61 = virtualinvoke str.<java.lang.String: int length()>();
        temp$62 = temp$61 - 1;
        temp$63 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(0, temp$62);
        numeric = temp$63;
        temp$64 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isAllZeros(java.lang.String)>(mant);
        if temp$64 == 0 goto label43;

        goto label42;

     label42:
        nop;
        temp$65 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isAllZeros(java.lang.String)>(exp);
        if temp$65 == 0 goto label43;

        goto label44;

        goto label44;

     label43:
        nop;
        temp$66 = 0;
        goto label45;

     label44:
        nop;
        temp$66 = 1;

     label45:
        nop;
        allZeros = temp$66;
        goto label83;

     label46:
        nop;

     label47:
        nop;
        if dec == null goto label48;

        goto label57;

     label48:
        nop;
        if exp == null goto label49;

        goto label57;

        goto label49;

     label49:
        nop;
        temp$67 = virtualinvoke numeric.<java.lang.String: char charAt(int)>(0);
        temp$68 = (int) temp$67;
        if temp$68 == 45 goto label50;

        goto label51;

     label50:
        nop;
        temp$69 = virtualinvoke numeric.<java.lang.String: java.lang.String substring(int)>(1);
        temp$70 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isDigits(java.lang.String)>(temp$69);
        if temp$70 == 0 goto label51;

        goto label52;

        goto label52;

     label51:
        nop;
        temp$71 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isDigits(java.lang.String)>(numeric);
        if temp$71 == 0 goto label57;

        goto label52;

        goto label57;

        goto label52;

     label52:
        nop;

     label53:
        nop;
        temp$72 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Long createLong(java.lang.String)>(numeric);

     label54:
        nop;
        return temp$72;

     label55:
        nop;
        nfe := @caughtexception;
        nop;
        goto label56;

     label56:
        nop;
        temp$73 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigInteger createBigInteger(java.lang.String)>(numeric);
        return temp$73;

     label57:
        nop;
        temp$74 = new java.lang.NumberFormatException;
        temp$75 = new java.lang.StringBuffer;
        specialinvoke temp$75.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(str);
        virtualinvoke temp$75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" is not a valid number.");
        temp$76 = virtualinvoke temp$75.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$74.<java.lang.NumberFormatException: void <init>(java.lang.String)>(temp$76);
        throw temp$74;

     label58:
        nop;

     label59:
        nop;

     label60:
        nop;
        temp$77 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Float createFloat(java.lang.String)>(numeric);
        f = temp$77;
        temp$78 = virtualinvoke f.<java.lang.Float: boolean isInfinite()>();
        if temp$78 == 0 goto label61;

        goto label65;

     label61:
        nop;
        temp$79 = virtualinvoke f.<java.lang.Float: float floatValue()>();
        temp$80 = temp$79 cmpg 0.0F;
        if temp$80 != 0 goto label63;

        goto label62;

     label62:
        nop;
        if allZeros == 0 goto label65;

        goto label63;

        goto label65;

        goto label63;

     label63:
        nop;

     label64:
        nop;
        return f;

     label65:
        nop;
        goto label67;

     label66:
        nop;
        nfe := @caughtexception;
        nop;
        goto label67;

     label67:
        nop;

     label68:
        nop;

     label69:
        nop;

     label70:
        nop;
        temp$81 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Double createDouble(java.lang.String)>(numeric);
        d = temp$81;
        temp$82 = virtualinvoke d.<java.lang.Double: boolean isInfinite()>();
        if temp$82 == 0 goto label71;

        goto label75;

     label71:
        nop;
        temp$83 = virtualinvoke d.<java.lang.Double: float floatValue()>();
        temp$84 = (double) temp$83;
        temp$85 = temp$84 cmpg 0.0;
        if temp$85 != 0 goto label73;

        goto label72;

     label72:
        nop;
        if allZeros == 0 goto label75;

        goto label73;

        goto label75;

        goto label73;

     label73:
        nop;

     label74:
        nop;
        return d;

     label75:
        nop;
        goto label77;

     label76:
        nop;
        nfe := @caughtexception;
        nop;
        goto label77;

     label77:
        nop;

     label78:
        nop;
        temp$86 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigDecimal createBigDecimal(java.lang.String)>(numeric);

     label79:
        nop;
        return temp$86;

     label80:
        nop;
        e := @caughtexception;
        nop;
        goto label81;

     label81:
        nop;

     label82:
        nop;
        temp$87 = new java.lang.NumberFormatException;
        temp$88 = new java.lang.StringBuffer;
        specialinvoke temp$88.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(str);
        virtualinvoke temp$88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" is not a valid number.");
        temp$89 = virtualinvoke temp$88.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$87.<java.lang.NumberFormatException: void <init>(java.lang.String)>(temp$89);
        throw temp$87;

     label83:
        nop;
        nop;
        lookupswitch(lastChar)
        {
            case 68: goto label69;
            case 70: goto label59;
            case 76: goto label47;
            case 100: goto label68;
            case 102: goto label58;
            case 108: goto label46;
            default: goto label82;
        };

        nop;

     label84:
        nop;
        if expPos > -1 goto label85;

        goto label87;

     label85:
        nop;
        temp$90 = virtualinvoke str.<java.lang.String: int length()>();
        temp$91 = temp$90 - 1;
        if expPos < temp$91 goto label86;

        goto label87;

        goto label86;

     label86:
        nop;
        temp$92 = expPos;
        temp$93 = temp$92 + 1;
        temp$94 = virtualinvoke str.<java.lang.String: int length()>();
        temp$95 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(temp$93, temp$94);
        exp = temp$95;
        goto label88;

     label87:
        nop;
        temp$96 = null;
        exp = temp$96;

     label88:
        nop;
        if dec == null goto label89;

        goto label99;

     label89:
        nop;
        if exp == null goto label90;

        goto label99;

        goto label90;

     label90:
        nop;

     label91:
        nop;
        temp$97 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer createInteger(java.lang.String)>(str);

     label92:
        nop;
        return temp$97;

     label93:
        nop;
        nfe := @caughtexception;
        nop;
        goto label94;

     label94:
        nop;

     label95:
        nop;
        temp$98 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Long createLong(java.lang.String)>(str);

     label96:
        nop;
        return temp$98;

     label97:
        nop;
        nfe := @caughtexception;
        nop;
        goto label98;

     label98:
        nop;
        temp$99 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigInteger createBigInteger(java.lang.String)>(str);
        return temp$99;

     label99:
        nop;
        temp$100 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isAllZeros(java.lang.String)>(mant);
        if temp$100 == 0 goto label101;

        goto label100;

     label100:
        nop;
        temp$101 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isAllZeros(java.lang.String)>(exp);
        if temp$101 == 0 goto label101;

        goto label102;

        goto label102;

     label101:
        nop;
        temp$102 = 0;
        goto label103;

     label102:
        nop;
        temp$102 = 1;

     label103:
        nop;
        allZeros = temp$102;

     label104:
        nop;
        if numDecimals <= 7 goto label105;

        goto label111;

     label105:
        nop;
        temp$103 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Float createFloat(java.lang.String)>(str);
        f = temp$103;
        temp$104 = virtualinvoke f.<java.lang.Float: boolean isInfinite()>();
        if temp$104 == 0 goto label106;

        goto label110;

     label106:
        nop;
        temp$105 = virtualinvoke f.<java.lang.Float: float floatValue()>();
        temp$106 = temp$105 cmpg 0.0F;
        if temp$106 != 0 goto label108;

        goto label107;

     label107:
        nop;
        if allZeros == 0 goto label110;

        goto label108;

        goto label110;

        goto label108;

     label108:
        nop;

     label109:
        nop;
        return f;

     label110:
        nop;

     label111:
        nop;
        goto label113;

     label112:
        nop;
        nfe := @caughtexception;
        nop;
        goto label113;

     label113:
        nop;

     label114:
        nop;
        if numDecimals <= 16 goto label115;

        goto label121;

     label115:
        nop;
        temp$107 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Double createDouble(java.lang.String)>(str);
        d = temp$107;
        temp$108 = virtualinvoke d.<java.lang.Double: boolean isInfinite()>();
        if temp$108 == 0 goto label116;

        goto label120;

     label116:
        nop;
        temp$109 = virtualinvoke d.<java.lang.Double: double doubleValue()>();
        temp$110 = temp$109 cmpg 0.0;
        if temp$110 != 0 goto label118;

        goto label117;

     label117:
        nop;
        if allZeros == 0 goto label120;

        goto label118;

        goto label120;

        goto label118;

     label118:
        nop;

     label119:
        nop;
        return d;

     label120:
        nop;

     label121:
        nop;
        goto label123;

     label122:
        nop;
        nfe := @caughtexception;
        nop;
        goto label123;

     label123:
        nop;
        temp$111 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigDecimal createBigDecimal(java.lang.String)>(str);
        return temp$111;

        catch java.lang.NumberFormatException from label53 to label54 with label55;
        catch java.lang.NumberFormatException from label60 to label64 with label66;
        catch java.lang.NumberFormatException from label65 to label66 with label66;
        catch java.lang.NumberFormatException from label70 to label74 with label76;
        catch java.lang.NumberFormatException from label75 to label76 with label76;
        catch java.lang.NumberFormatException from label78 to label79 with label80;
        catch java.lang.NumberFormatException from label91 to label92 with label93;
        catch java.lang.NumberFormatException from label95 to label96 with label97;
        catch java.lang.NumberFormatException from label104 to label109 with label112;
        catch java.lang.NumberFormatException from label110 to label112 with label112;
        catch java.lang.NumberFormatException from label114 to label119 with label122;
        catch java.lang.NumberFormatException from label120 to label122 with label122;
    }
}
